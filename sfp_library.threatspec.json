{
  "specification": {
    "version": "0.1.0", 
    "name": "ThreatSpec"
  }, 
  "document": {
    "updated": 1498843977331, 
    "created": 1498843977331
  }, 
  "threats": {
    "@cwe_447_unimplemented_or_unsupported_feature_in_ui": {
      "references": [
        "CWE 447", 
        "https://cwe.mitre.org/data/definitions/447.html"
      ], 
      "name": "Unimplemented or Unsupported Feature in UI", 
      "parent": "@feature", 
      "description": "A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented."
    }, 
    "@cwe_252_unchecked_return_value": {
      "references": [
        "CWE 252", 
        "https://cwe.mitre.org/data/definitions/252.html"
      ], 
      "name": "Unchecked Return Value", 
      "parent": "@unchecked_status_condition", 
      "description": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions. Two common programmer assumptions are this function call can never fail and it doesn t matter if this function call fails . If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the software is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges."
    }, 
    "@cwe_77_improper_neutralization_of_special_elements_used_in_a_command_command_injection": {
      "references": [
        "CWE 77", 
        "https://cwe.mitre.org/data/definitions/77.html"
      ], 
      "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component. Command injection vulnerabilities typically occur when:.Command injection is a common problem with wrapper programs."
    }, 
    "@cwe_307_improper_restriction_of_excessive_authentication_attempts": {
      "references": [
        "CWE 307", 
        "https://cwe.mitre.org/data/definitions/307.html"
      ], 
      "name": "Improper Restriction of Excessive Authentication Attempts", 
      "parent": "@unrestricted_authentication", 
      "description": "The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks."
    }, 
    "@cwe_301_reflection_attack_in_an_authentication_protocol": {
      "references": [
        "CWE 301", 
        "https://cwe.mitre.org/data/definitions/301.html"
      ], 
      "name": "Reflection Attack in an Authentication Protocol", 
      "parent": "@channel_attack", 
      "description": "Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user. A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol."
    }, 
    "@cwe_473_php_external_variable_modification": {
      "references": [
        "CWE 473", 
        "https://cwe.mitre.org/data/definitions/473.html"
      ], 
      "name": "PHP External Variable Modification", 
      "parent": "@tainted_input_to_environment", 
      "description": "A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise."
    }, 
    "@cwe_379_creation_of_temporary_file_in_directory_with_incorrect_permissions": {
      "references": [
        "CWE 379", 
        "https://cwe.mitre.org/data/definitions/379.html"
      ], 
      "name": "Creation of Temporary File in Directory with Incorrect Permissions", 
      "parent": "@exposure_temporary_file", 
      "description": "The software creates a temporary file in a directory whose permissions allow unintended actors to determine the file s existence or otherwise access that file. On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user s actions are. From this, higher levels of security could be breached."
    }, 
    "@unrestricted_consumption": {
      "refs": [
        "985"
      ], 
      "name": "Unrestricted Consumption", 
      "parent": "@resource_management"
    }, 
    "@cwe_496_public_data_assigned_to_private_array_typed_field": {
      "references": [
        "CWE 496", 
        "https://cwe.mitre.org/data/definitions/496.html"
      ], 
      "name": "Public Data Assigned to Private Array-Typed Field", 
      "parent": "@tainted_input_to_variable", 
      "description": "Assigning public data to a private array is equivalent to giving public access to the array."
    }, 
    "@cwe_288_authentication_bypass_using_an_alternate_path_or_channel": {
      "references": [
        "CWE 288", 
        "https://cwe.mitre.org/data/definitions/288.html"
      ], 
      "name": "Authentication Bypass Using an Alternate Path or Channel", 
      "parent": "@authentication_bypass", 
      "description": "A product requires authentication, but the product has an alternate path or channel that does not require authentication."
    }, 
    "@cwe_483_incorrect_block_delimitation": {
      "references": [
        "CWE 483", 
        "https://cwe.mitre.org/data/definitions/483.html"
      ], 
      "name": "Incorrect Block Delimitation", 
      "parent": "@design", 
      "description": "The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error. In some languages, braces or other delimiters are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. In some cases, the logic error can have security implications."
    }, 
    "@cwe_262_not_using_password_aging": {
      "references": [
        "CWE 262", 
        "https://cwe.mitre.org/data/definitions/262.html"
      ], 
      "name": "Not Using Password Aging", 
      "parent": "@insecure_authentication_policy", 
      "description": "If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner."
    }, 
    "@cwe_771_missing_reference_to_active_allocated_resource": {
      "references": [
        "CWE 771", 
        "https://cwe.mitre.org/data/definitions/771.html"
      ], 
      "name": "Missing Reference to Active Allocated Resource", 
      "parent": "@failure_to_release_resource", 
      "description": "The software does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed. This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed."
    }, 
    "@cwe_154_improper_neutralization_of_variable_name_delimiters": {
      "references": [
        "CWE 154", 
        "https://cwe.mitre.org/data/definitions/154.html"
      ], 
      "name": "Improper Neutralization of Variable Name Delimiters", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component. As data is parsed, an injected delimiter may cause the process to take unexpected actions that result in an attack. Example: for an environment variable."
    }, 
    "@weak_cryptography": {
      "refs": [
        "959"
      ], 
      "name": "Weak Cryptography", 
      "parent": "@cryptography"
    }, 
    "@faulty_input_transformation": {
      "refs": [
        "992"
      ], 
      "name": "Faulty Input Transformation", 
      "parent": "@tainted_input"
    }, 
    "@resource_management": {
      "refs": [
        "892"
      ], 
      "name": "Resource Management", 
      "parent": "@sfp"
    }, 
    "@cwe_760_use_of_a_one_way_hash_with_a_predictable_salt": {
      "references": [
        "CWE 760", 
        "https://cwe.mitre.org/data/definitions/760.html"
      ], 
      "name": "Use of a One-Way Hash with a Predictable Salt", 
      "parent": "@broken_cryptography", 
      "description": "The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software uses a predictable salt as part of the input. This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide..It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details."
    }, 
    "@cwe_97_improper_neutralization_of_server_side_includes_ssi_within_a_web_page": {
      "references": [
        "CWE 97", 
        "https://cwe.mitre.org/data/definitions/97.html"
      ], 
      "name": "Improper Neutralization of Server-Side Includes (SSI) Within a Web Page", 
      "parent": "@tainted_input_to_command", 
      "description": "The software generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include SSI directive."
    }, 
    "@cwe_508_non_replicating_malicious_code": {
      "references": [
        "CWE 508", 
        "https://cwe.mitre.org/data/definitions/508.html"
      ], 
      "name": "Non-Replicating Malicious Code", 
      "parent": "@malware", 
      "description": "Non-replicating malicious code only resides on the target system or software that is attacked; it does not attempt to spread to other systems."
    }, 
    "@multiple_binds_to_the_same_port": {
      "refs": [
        "954"
      ], 
      "name": "Multiple Binds to the Same Port", 
      "parent": "@authentication"
    }, 
    "@cwe_14_compiler_removal_of_code_to_clear_buffers": {
      "references": [
        "CWE 14", 
        "https://cwe.mitre.org/data/definitions/14.html"
      ], 
      "name": "Compiler Removal of Code to Clear Buffers", 
      "parent": "@exposed_data", 
      "description": "Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka dead store removal.  This compiler optimization error occurs when:"
    }, 
    "@cwe_402_transmission_of_private_resources_into_a_new_sphere_resource_leak": {
      "references": [
        "CWE 402", 
        "https://cwe.mitre.org/data/definitions/402.html"
      ], 
      "name": "Transmission of Private Resources into a New Sphere ('Resource Leak')", 
      "parent": "@exposed_data", 
      "description": "The software makes resources available to untrusted parties when those resources are only intended to be accessed by the software."
    }, 
    "@cwe_474_use_of_function_with_inconsistent_implementations": {
      "references": [
        "CWE 474", 
        "https://cwe.mitre.org/data/definitions/474.html"
      ], 
      "name": "Use of Function with Inconsistent Implementations", 
      "parent": "@use_of_an_improper_api", 
      "description": "The code uses a function that has inconsistent implementations across operating systems and versions. The use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases..The implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include:"
    }, 
    "@cwe_240_improper_handling_of_inconsistent_structural_elements": {
      "references": [
        "CWE 240", 
        "https://cwe.mitre.org/data/definitions/240.html"
      ], 
      "name": "Improper Handling of Inconsistent Structural Elements", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not handle or incorrectly handles when two or more structural elements should be consistent, but are not."
    }, 
    "@cwe_156_improper_neutralization_of_whitespace": {
      "references": [
        "CWE 156", 
        "https://cwe.mitre.org/data/definitions/156.html"
      ], 
      "name": "Improper Neutralization of Whitespace", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component. This can include space, tab, etc."
    }, 
    "@cwe_540_information_exposure_through_source_code": {
      "references": [
        "CWE 540", 
        "https://cwe.mitre.org/data/definitions/540.html"
      ], 
      "name": "Information Exposure Through Source Code", 
      "parent": "@exposed_data", 
      "description": "Source code on a web server often contains sensitive information and should generally not be accessible to users. There are situations where it is critical to remove source code from an area or server. For example, obtaining Perl source code on a system allows an attacker to understand the logic of the script and extract extremely useful information such as code bugs or logins and passwords."
    }, 
    "@cwe_48_path_equivalence_file_name_internal_whitespace": {
      "references": [
        "CWE 48", 
        "https://cwe.mitre.org/data/definitions/48.html"
      ], 
      "name": "Path Equivalence: 'file name' (Internal Whitespace)", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of internal space file SPACE name without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_622_improper_validation_of_function_hook_arguments": {
      "references": [
        "CWE 622", 
        "https://cwe.mitre.org/data/definitions/622.html"
      ], 
      "name": "Improper Validation of Function Hook Arguments", 
      "parent": "@tainted_input_to_environment", 
      "description": "A product adds hooks to user-accessible API functions, but does not properly validate the arguments. This could lead to resultant vulnerabilities. Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself."
    }, 
    "@cwe_464_addition_of_data_structure_sentinel": {
      "references": [
        "CWE 464", 
        "https://cwe.mitre.org/data/definitions/464.html"
      ], 
      "name": "Addition of Data Structure Sentinel", 
      "parent": "@design", 
      "description": "The accidental addition of a data-structure sentinel can cause serious programming logic problems. Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels."
    }, 
    "@cwe_348_use_of_less_trusted_source": {
      "references": [
        "CWE 348", 
        "https://cwe.mitre.org/data/definitions/348.html"
      ], 
      "name": "Use of Less Trusted Source", 
      "parent": "@architecture", 
      "description": "The software has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack."
    }, 
    "@cwe_623_unsafe_activex_control_marked_safe_for_scripting": {
      "references": [
        "CWE 623", 
        "https://cwe.mitre.org/data/definitions/623.html"
      ], 
      "name": "Unsafe ActiveX Control Marked Safe For Scripting", 
      "parent": "@implementation", 
      "description": "An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting. This might allow attackers to use dangerous functionality via a web page that accesses the control, which can lead to different resultant vulnerabilities, depending on the control s behavior."
    }, 
    "@cwe_424_improper_protection_of_alternate_path": {
      "references": [
        "CWE 424", 
        "https://cwe.mitre.org/data/definitions/424.html"
      ], 
      "name": "Improper Protection of Alternate Path", 
      "parent": "@insecure_resource_access", 
      "description": "The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources."
    }, 
    "@cwe_128_wrap_around_error": {
      "references": [
        "CWE 128", 
        "https://cwe.mitre.org/data/definitions/128.html"
      ], 
      "name": "Wrap-around Error", 
      "parent": "@glitch_in_computation", 
      "description": "Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small, negative, or undefined value."
    }, 
    "@cwe_495_private_array_typed_field_returned_from_a_public_method": {
      "references": [
        "CWE 495", 
        "https://cwe.mitre.org/data/definitions/495.html"
      ], 
      "name": "Private Array-Typed Field Returned From A Public Method", 
      "parent": "@exposed_data", 
      "description": "The product has a method that is declared public, but returns a reference to a private array, which could then be modified in unexpected ways."
    }, 
    "@cwe_449_the_ui_performs_the_wrong_action": {
      "references": [
        "CWE 449", 
        "https://cwe.mitre.org/data/definitions/449.html"
      ], 
      "name": "The UI Performs the Wrong Action", 
      "parent": "@feature", 
      "description": "The UI performs the wrong action with respect to the user s request."
    }, 
    "@cwe_694_use_of_multiple_resources_with_duplicate_identifier": {
      "references": [
        "CWE 694", 
        "https://cwe.mitre.org/data/definitions/694.html"
      ], 
      "name": "Use of Multiple Resources with Duplicate Identifier", 
      "parent": "@life_cycle", 
      "description": "The software uses multiple resources that can have the same identifier, in a context in which unique identifiers are required. If the software assumes that each resource has a unique identifier, the software could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier."
    }, 
    "@cwe_306_missing_authentication_for_critical_function": {
      "references": [
        "CWE 306", 
        "https://cwe.mitre.org/data/definitions/306.html"
      ], 
      "name": "Missing Authentication for Critical Function", 
      "parent": "@missing_authentication", 
      "description": "The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources."
    }, 
    "@cwe_668_exposure_of_resource_to_wrong_sphere": {
      "references": [
        "CWE 668", 
        "https://cwe.mitre.org/data/definitions/668.html"
      ], 
      "name": "Exposure of Resource to Wrong Sphere", 
      "parent": "@exposed_data", 
      "description": "The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource. Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files..A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system..In either case, the end result is that a resource has been exposed to the wrong party."
    }, 
    "@cwe_58_path_equivalence_windows_83_filename": {
      "references": [
        "CWE 58", 
        "https://cwe.mitre.org/data/definitions/58.html"
      ], 
      "name": "Path Equivalence: Windows 8.3 Filename", 
      "parent": "@path_traversal", 
      "description": "The software contains a protection mechanism that restricts access to a long filename on a Windows operating system, but the software does not properly restrict access to the equivalent short 8.3 filename. On later Windows operating systems, a file can have a long name and a short name that is compatible with older Windows file systems, with up to 8 characters in the filename and 3 characters for the extension. These 8.3 filenames, therefore, act as an alternate name for files with long names, so they are useful pathname equivalence manipulations."
    }, 
    "@access_management": {
      "refs": [
        "944"
      ], 
      "name": "Access Management", 
      "parent": "@access_control"
    }, 
    "@cwe_482_comparing_instead_of_assigning": {
      "references": [
        "CWE 482", 
        "https://cwe.mitre.org/data/definitions/482.html"
      ], 
      "name": "Comparing instead of Assigning", 
      "parent": "@unused_entities", 
      "description": "The code uses an operator for comparison when the intention was to perform an assignment. In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused."
    }, 
    "@cwe_309_use_of_password_system_for_primary_authentication": {
      "references": [
        "CWE 309", 
        "https://cwe.mitre.org/data/definitions/309.html"
      ], 
      "name": "Use of Password System for Primary Authentication", 
      "parent": "@authentication_bypass", 
      "description": "The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism."
    }, 
    "@cwe_363_race_condition_enabling_link_following": {
      "references": [
        "CWE 363", 
        "https://cwe.mitre.org/data/definitions/363.html"
      ], 
      "name": "Race Condition Enabling Link Following", 
      "parent": "@race_condition_window", 
      "description": "The software checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the software to access the wrong file. While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the software to slow down e.g. with memory consumption , causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks."
    }, 
    "@cwe_146_improper_neutralization_of_expressioncommand_delimiters": {
      "references": [
        "CWE 146", 
        "https://cwe.mitre.org/data/definitions/146.html"
      ], 
      "name": "Improper Neutralization of Expression/Command Delimiters", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component. As data is parsed, an injected absent malformed delimiter may cause the process to take unexpected actions."
    }, 
    "@cwe_549_missing_password_field_masking": {
      "references": [
        "CWE 549", 
        "https://cwe.mitre.org/data/definitions/549.html"
      ], 
      "name": "Missing Password Field Masking", 
      "parent": "@feature", 
      "description": "The software does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords."
    }, 
    "@cwe_329_not_using_a_random_iv_with_cbc_mode": {
      "references": [
        "CWE 329", 
        "https://cwe.mitre.org/data/definitions/329.html"
      ], 
      "name": "Not Using a Random IV with CBC Mode", 
      "parent": "@weak_cryptography", 
      "description": "Not using a random initialization Vector IV with Cipher Block Chaining CBC Mode causes algorithms to be susceptible to dictionary attacks."
    }, 
    "@cwe_29_path_traversal_filename": {
      "references": [
        "CWE 29", 
        "https://cwe.mitre.org/data/definitions/29.html"
      ], 
      "name": "Path Traversal: '\\..\\filename'", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize .. filename leading backslash dot dot sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory..This is similar to CWE-25, except using instead of . Sometimes a program checks for .. at the beginning of the input, so a .. can bypass that check. It is also useful for bypassing path traversal protection schemes that only assume that the separator is valid."
    }, 
    "@cwe_525_information_exposure_through_browser_caching": {
      "references": [
        "CWE 525", 
        "https://cwe.mitre.org/data/definitions/525.html"
      ], 
      "name": "Information Exposure Through Browser Caching", 
      "parent": "@other_exposures", 
      "description": "For each web page, the application should have an appropriate caching policy specifying the extent to which the page and its form fields should be cached."
    }, 
    "@cwe_50_path_equivalence_multipleleadingslash": {
      "references": [
        "CWE 50", 
        "https://cwe.mitre.org/data/definitions/50.html"
      ], 
      "name": "Path Equivalence: '//multiple/leading/slash'", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of multiple leading slash multiple leading slash without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_492_use_of_inner_class_containing_sensitive_data": {
      "references": [
        "CWE 492", 
        "https://cwe.mitre.org/data/definitions/492.html"
      ], 
      "name": "Use of Inner Class Containing Sensitive Data", 
      "parent": "@other_exposures", 
      "description": "Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers. Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in their enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields."
    }, 
    "@cwe_56_path_equivalence_filedir_wildcard": {
      "references": [
        "CWE 56", 
        "https://cwe.mitre.org/data/definitions/56.html"
      ], 
      "name": "Path Equivalence: 'filedir*' (Wildcard)", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of asterisk wildcard filedir without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_574_ejb_bad_practices_use_of_synchronization_primitives": {
      "references": [
        "CWE 574", 
        "https://cwe.mitre.org/data/definitions/574.html"
      ], 
      "name": "EJB Bad Practices: Use of Synchronization Primitives", 
      "parent": "@use_of_an_improper_api", 
      "description": "The program violates the Enterprise JavaBeans EJB specification by using thread synchronization primitives. The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances. The specification justifies this requirement in the following way: This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean s instances, others may distribute the instances across multiple JVMs. "
    }, 
    "@cwe_456_missing_initialization_of_a_variable": {
      "references": [
        "CWE 456", 
        "https://cwe.mitre.org/data/definitions/456.html"
      ], 
      "name": "Missing Initialization of a Variable", 
      "parent": "@glitch_in_computation", 
      "description": "The software does not initialize critical variables, which causes the execution environment to use unexpected values."
    }, 
    "@cwe_202_exposure_of_sensitive_data_through_data_queries": {
      "references": [
        "CWE 202", 
        "https://cwe.mitre.org/data/definitions/202.html"
      ], 
      "name": "Exposure of Sensitive Data Through Data Queries", 
      "parent": "@state_disclosure", 
      "description": "When trying to keep information confidential, an attacker can often infer some of the information by using statistics. In situations where data should not be tied to individual users, but a large number of users should be able to make queries that scrub the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user."
    }, 
    "@cwe_526_information_exposure_through_environmental_variables": {
      "references": [
        "CWE 526", 
        "https://cwe.mitre.org/data/definitions/526.html"
      ], 
      "name": "Information Exposure Through Environmental Variables", 
      "parent": "@exposed_data", 
      "description": "Environmental variables may contain sensitive information about a remote server."
    }, 
    "@cwe_606_unchecked_input_for_loop_condition": {
      "references": [
        "CWE 606", 
        "https://cwe.mitre.org/data/definitions/606.html"
      ], 
      "name": "Unchecked Input for Loop Condition", 
      "parent": "@tainted_input_to_variable", 
      "description": "The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service because of excessive looping."
    }, 
    "@cwe_614_sensitive_cookie_in_https_session_without_secure_attribute": {
      "references": [
        "CWE 614", 
        "https://cwe.mitre.org/data/definitions/614.html"
      ], 
      "name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", 
      "parent": "@other_exposures", 
      "description": "The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session."
    }, 
    "@cwe_144_improper_neutralization_of_line_delimiters": {
      "references": [
        "CWE 144", 
        "https://cwe.mitre.org/data/definitions/144.html"
      ], 
      "name": "Improper Neutralization of Line Delimiters", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component. As data is parsed, an injected absent malformed delimiter may cause the process to take unexpected actions."
    }, 
    "@cwe_46_path_equivalence_filename__trailing_space": {
      "references": [
        "CWE 46", 
        "https://cwe.mitre.org/data/definitions/46.html"
      ], 
      "name": "Path Equivalence: 'filename ' (Trailing Space)", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of trailing space filedir without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_302_authentication_bypass_by_assumed_immutable_data": {
      "references": [
        "CWE 302", 
        "https://cwe.mitre.org/data/definitions/302.html"
      ], 
      "name": "Authentication Bypass by Assumed-Immutable Data", 
      "parent": "@faulty_endpoint_authentication", 
      "description": "The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker."
    }, 
    "@cwe_479_signal_handler_use_of_a_non_reentrant_function": {
      "references": [
        "CWE 479", 
        "https://cwe.mitre.org/data/definitions/479.html"
      ], 
      "name": "Signal Handler Use of a Non-reentrant Function", 
      "parent": "@use_of_an_improper_api", 
      "description": "The program defines a signal handler that calls a non-reentrant function. Non-reentrant functions are functions that cannot safely be called, interrupted, and then recalled before the first call has finished without resulting in memory corruption. This can lead to an unexpected system state an unpredictable results with a variety of potential consequences depending on context, including denial of service and code execution..Many functions are not reentrant, but some of them can result in the corruption of memory if they are used in a signal handler. The function call syslog is an example of this. In order to perform its functionality, it allocates a small amount of memory as scratch space. If syslog is suspended by a signal call and the signal handler calls syslog , the memory used by both of these functions enters an undefined, and possibly, exploitable state. Implementations of malloc and free manage metadata in global structures in order to track which memory is allocated versus which memory is available, but they are non-reentrant. Simultaneous calls to these functions can cause corruption of the metadata."
    }, 
    "@cwe_383_j2ee_bad_practices_direct_use_of_threads": {
      "references": [
        "CWE 383", 
        "https://cwe.mitre.org/data/definitions/383.html"
      ], 
      "name": "J2EE Bad Practices: Direct Use of Threads", 
      "parent": "@use_of_an_improper_api", 
      "description": "Thread management in a Web application is forbidden in some circumstances and is always highly error prone. Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors."
    }, 
    "@cwe_99_improper_control_of_resource_identifiers_resource_injection": {
      "references": [
        "CWE 99", 
        "https://cwe.mitre.org/data/definitions/99.html"
      ], 
      "name": "Improper Control of Resource Identifiers ('Resource Injection')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control. A resource injection issue occurs when the following two conditions are met:.This may enable an attacker to access or modify otherwise protected system resources."
    }, 
    "@cwe_548_information_exposure_through_directory_listing": {
      "references": [
        "CWE 548", 
        "https://cwe.mitre.org/data/definitions/548.html"
      ], 
      "name": "Information Exposure Through Directory Listing", 
      "parent": "@exposed_data", 
      "description": "A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers. A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible."
    }, 
    "@cwe_612_information_exposure_through_indexing_of_private_data": {
      "references": [
        "CWE 612", 
        "https://cwe.mitre.org/data/definitions/612.html"
      ], 
      "name": "Information Exposure Through Indexing of Private Data", 
      "parent": "@exposed_data", 
      "description": "The product performs an indexing routine against private documents, but does not sufficiently verify that the actors who can access the index also have the privileges to access the private documents. When an indexing routine is applied against a group of private documents, and that index s results are available to outsiders who do not have access to those documents, then outsiders might be able to obtain sensitive information by conducting targeted searches. The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured or implemented to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them."
    }, 
    "@cwe_155_improper_neutralization_of_wildcards_or_matching_symbols": {
      "references": [
        "CWE 155", 
        "https://cwe.mitre.org/data/definitions/155.html"
      ], 
      "name": "Improper Neutralization of Wildcards or Matching Symbols", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component. As data is parsed, an injected element may cause the process to take unexpected actions."
    }, 
    "@cwe_263_password_aging_with_long_expiration": {
      "references": [
        "CWE 263", 
        "https://cwe.mitre.org/data/definitions/263.html"
      ], 
      "name": "Password Aging with Long Expiration", 
      "parent": "@insecure_authentication_policy", 
      "description": "Allowing password aging to occur unchecked can result in the possibility of diminished password integrity. Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password."
    }, 
    "@cwe_501_trust_boundary_violation": {
      "references": [
        "CWE 501", 
        "https://cwe.mitre.org/data/definitions/501.html"
      ], 
      "name": "Trust Boundary Violation", 
      "parent": "@exposed_data", 
      "description": "The product mixes trusted and untrusted data in the same data structure or structured message. A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data."
    }, 
    "@cwe_191_integer_underflow_wrap_or_wraparound": {
      "references": [
        "CWE 191", 
        "https://cwe.mitre.org/data/definitions/191.html"
      ], 
      "name": "Integer Underflow (Wrap or Wraparound)", 
      "parent": "@glitch_in_computation", 
      "description": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result. This can happen in signed and unsigned cases."
    }, 
    "@cwe_115_misinterpretation_of_input": {
      "references": [
        "CWE 115", 
        "https://cwe.mitre.org/data/definitions/115.html"
      ], 
      "name": "Misinterpretation of Input", 
      "parent": "@design", 
      "description": "The software misinterprets an input, whether from an attacker or another product, in a security-relevant fashion."
    }, 
    "@cwe_279_incorrect_execution_assigned_permissions": {
      "references": [
        "CWE 279", 
        "https://cwe.mitre.org/data/definitions/279.html"
      ], 
      "name": "Incorrect Execution-Assigned Permissions", 
      "parent": "@insecure_resource_permissions", 
      "description": "While it is executing, the software sets the permissions of an object in a way that violates the intended permissions that have been specified by the user."
    }, 
    "@incorrect_input_handling": {
      "refs": [
        "993"
      ], 
      "name": "Incorrect Input Handling", 
      "parent": "@tainted_input"
    }, 
    "@cwe_86_improper_neutralization_of_invalid_characters_in_identifiers_in_web_pages": {
      "references": [
        "CWE 86", 
        "https://cwe.mitre.org/data/definitions/86.html"
      ], 
      "name": "Improper Neutralization of Invalid Characters in Identifiers in Web Pages", 
      "parent": "@tainted_input_to_command", 
      "description": "The software does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers. Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the software may attempt to remove a javascript: URI scheme, but a java 00script: URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks."
    }, 
    "@cwe_446_ui_discrepancy_for_security_feature": {
      "references": [
        "CWE 446", 
        "https://cwe.mitre.org/data/definitions/446.html"
      ], 
      "name": "UI Discrepancy for Security Feature", 
      "parent": "@security", 
      "description": "The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state. When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the software does not actually enable the encryption. Alternately, the user might provide a restrict ALL access control rule, but the software only implements restrict SOME ."
    }, 
    "@cwe_195_signed_to_unsigned_conversion_error": {
      "references": [
        "CWE 195", 
        "https://cwe.mitre.org/data/definitions/195.html"
      ], 
      "name": "Signed to Unsigned Conversion Error", 
      "parent": "@glitch_in_computation", 
      "description": "The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive. It is dangerous to rely on implicit casts between signed and unsigned numbers because the result can take on an unexpected value and violate assumptions made by the program..Often, functions will return negative values to indicate a failure. When the result of a function is to be used as a size parameter, using these negative return values can have unexpected results. For example, if negative size values are passed to the standard memory copy or allocation functions they will be implicitly cast to a large unsigned value. This may lead to an exploitable buffer overflow or underflow condition."
    }, 
    "@cwe_652_improper_neutralization_of_data_within_xquery_expressions_xquery_injection": {
      "references": [
        "CWE 652", 
        "https://cwe.mitre.org/data/definitions/652.html"
      ], 
      "name": "Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query. The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks e.g. authentication ."
    }, 
    "@cwe_537_information_exposure_through_java_runtime_error_message": {
      "references": [
        "CWE 537", 
        "https://cwe.mitre.org/data/definitions/537.html"
      ], 
      "name": "Information Exposure Through Java Runtime Error Message", 
      "parent": "@exposed_data", 
      "description": "In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system."
    }, 
    "@cwe_453_insecure_default_variable_initialization": {
      "references": [
        "CWE 453", 
        "https://cwe.mitre.org/data/definitions/453.html"
      ], 
      "name": "Insecure Default Variable Initialization", 
      "parent": "@other_exposures", 
      "description": "The software, by default, initializes an internal variable with an insecure or less secure value than is possible."
    }, 
    "@cwe_425_direct_request_forced_browsing": {
      "references": [
        "CWE 425", 
        "https://cwe.mitre.org/data/definitions/425.html"
      ], 
      "name": "Direct Request ('Forced Browsing')", 
      "parent": "@missing_endpoint_authentication", 
      "description": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files. Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path."
    }, 
    "@cwe_299_improper_check_for_certificate_revocation": {
      "references": [
        "CWE 299", 
        "https://cwe.mitre.org/data/definitions/299.html"
      ], 
      "name": "Improper Check for Certificate Revocation", 
      "parent": "@digital_certificate", 
      "description": "The software does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised. An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync."
    }, 
    "@cwe_430_deployment_of_wrong_handler": {
      "references": [
        "CWE 430", 
        "https://cwe.mitre.org/data/definitions/430.html"
      ], 
      "name": "Deployment of Wrong Handler", 
      "parent": "@design", 
      "description": "The wrong handler is assigned to process an object. An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically determining type of the object even if it is contradictory to an explicitly specified type."
    }, 
    "@cwe_40_path_traversal_uncsharename_windows_unc_share": {
      "references": [
        "CWE 40", 
        "https://cwe.mitre.org/data/definitions/40.html"
      ], 
      "name": "Path Traversal: '\\\\UNC\\share\\name\\' (Windows UNC Share)", 
      "parent": "@path_traversal", 
      "description": "An attacker can inject a Windows UNC share UNC share name into a software system to potentially redirect access to an unintended location or arbitrary file."
    }, 
    "@cwe_686_function_call_with_incorrect_argument_type": {
      "references": [
        "CWE 686", 
        "https://cwe.mitre.org/data/definitions/686.html"
      ], 
      "name": "Function Call With Incorrect Argument Type", 
      "parent": "@glitch_in_computation", 
      "description": "The software calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses. This weakness is most likely to occur in loosely typed languages, or in strongly typed languages in which the types of variable arguments cannot be enforced at compilation time, or where there is implicit casting."
    }, 
    "@cwe_334_small_space_of_random_values": {
      "references": [
        "CWE 334", 
        "https://cwe.mitre.org/data/definitions/334.html"
      ], 
      "name": "Small Space of Random Values", 
      "parent": "@predictability", 
      "description": "The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks."
    }, 
    "@use_of_an_improper_api": {
      "refs": [
        "1001"
      ], 
      "name": "Use of an Improper API", 
      "parent": "@api"
    }, 
    "@cwe_596_incorrect_semantic_object_comparison": {
      "references": [
        "CWE 596", 
        "https://cwe.mitre.org/data/definitions/596.html"
      ], 
      "name": "Incorrect Semantic Object Comparison", 
      "parent": "@design", 
      "description": "The software does not correctly compare two objects based on their conceptual content."
    }, 
    "@cwe_533_information_exposure_through_server_log_files": {
      "references": [
        "CWE 533", 
        "https://cwe.mitre.org/data/definitions/533.html"
      ], 
      "name": "Information Exposure Through Server Log Files", 
      "parent": "@exposed_data", 
      "description": "A server.log file was found. This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords."
    }, 
    "@cwe_237_improper_handling_of_structural_elements": {
      "references": [
        "CWE 237", 
        "https://cwe.mitre.org/data/definitions/237.html"
      ], 
      "name": "Improper Handling of Structural Elements", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not handle or incorrectly handles inputs that are related to complex structures."
    }, 
    "@cwe_198_use_of_incorrect_byte_ordering": {
      "references": [
        "CWE 198", 
        "https://cwe.mitre.org/data/definitions/198.html"
      ], 
      "name": "Use of Incorrect Byte Ordering", 
      "parent": "@incorrect_input_handling", 
      "description": "The software receives input from an upstream component, but it does not account for byte ordering e.g. big-endian and little-endian when processing the input, causing an incorrect number or value to be used."
    }, 
    "@cwe_215_information_exposure_through_debug_information": {
      "references": [
        "CWE 215", 
        "https://cwe.mitre.org/data/definitions/215.html"
      ], 
      "name": "Information Exposure Through Debug Information", 
      "parent": "@exposed_data", 
      "description": "The application contains debugging code that can expose sensitive information to untrusted parties."
    }, 
    "@cwe_470_use_of_externally_controlled_input_to_select_classes_or_code_unsafe_reflection": {
      "references": [
        "CWE 470", 
        "https://cwe.mitre.org/data/definitions/470.html"
      ], 
      "name": "Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", 
      "parent": "@tainted_input_to_environment", 
      "description": "The application uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code. If the application uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the application to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the application s classpath CWE-427 or add new entries to the application s classpath CWE-426 . Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the application."
    }, 
    "@cwe_211_information_exposure_through_externally_generated_error_message": {
      "references": [
        "CWE 211", 
        "https://cwe.mitre.org/data/definitions/211.html"
      ], 
      "name": "Information Exposure Through Externally-generated Error Message", 
      "parent": "@exposed_data", 
      "description": "The software performs an operation that triggers an external diagnostic or error message that is not directly generated by the software, such as an error generated by the programming language interpreter that the software uses. The error can contain sensitive system information."
    }, 
    "@cwe_102_struts_duplicate_validation_forms": {
      "references": [
        "CWE 102", 
        "https://cwe.mitre.org/data/definitions/102.html"
      ], 
      "name": "Struts: Duplicate Validation Forms", 
      "parent": "@tainted_input_to_command", 
      "description": "The application uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect. If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer s expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present."
    }, 
    "@cwe_405_asymmetric_resource_consumption_amplification": {
      "references": [
        "CWE 405", 
        "https://cwe.mitre.org/data/definitions/405.html"
      ], 
      "name": "Asymmetric Resource Consumption (Amplification)", 
      "parent": "@design", 
      "description": "Software that does not appropriately monitor or control resource consumption can lead to adverse system performance. This situation is amplified if the software allows malicious users or attackers to consume more resources than their access level permits. Exploiting such a weakness can lead to asymmetric resource consumption, aiding in amplification attacks against the system or the network."
    }, 
    "@cwe_382_j2ee_bad_practices_use_of_systemexit": {
      "references": [
        "CWE 382", 
        "https://cwe.mitre.org/data/definitions/382.html"
      ], 
      "name": "J2EE Bad Practices: Use of System.exit()", 
      "parent": "@use_of_an_improper_api", 
      "description": "A J2EE application uses System.exit , which also shuts down its container. It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service DoS attacks."
    }, 
    "@cwe_561_dead_code": {
      "references": [
        "CWE 561", 
        "https://cwe.mitre.org/data/definitions/561.html"
      ], 
      "name": "Dead Code", 
      "parent": "@unused_entities", 
      "description": "The software contains dead code, which can never be executed. Dead code is source code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed."
    }, 
    "@cwe_210_information_exposure_through_self_generated_error_message": {
      "references": [
        "CWE 210", 
        "https://cwe.mitre.org/data/definitions/210.html"
      ], 
      "name": "Information Exposure Through Self-generated Error Message", 
      "parent": "@exposed_data", 
      "description": "The software identifies an error condition and creates its own diagnostic or error messages that contain sensitive information."
    }, 
    "@cwe_204_response_discrepancy_information_exposure": {
      "references": [
        "CWE 204", 
        "https://cwe.mitre.org/data/definitions/204.html"
      ], 
      "name": "Response Discrepancy Information Exposure", 
      "parent": "@state_disclosure", 
      "description": "The software provides different responses to incoming requests in a way that allows an actor to determine system state information that is outside of that actor s control sphere. This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent bug or intentional design ."
    }, 
    "@cwe_42_path_equivalence_filename_trailing_dot": {
      "references": [
        "CWE 42", 
        "https://cwe.mitre.org/data/definitions/42.html"
      ], 
      "name": "Path Equivalence: 'filename.' (Trailing Dot)", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of trailing dot filedir. without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_300_channel_accessible_by_non_endpoint_man_in_the_middle": {
      "references": [
        "CWE 300", 
        "https://cwe.mitre.org/data/definitions/300.html"
      ], 
      "name": "Channel Accessible by Non-Endpoint ('Man-in-the-Middle')", 
      "parent": "@channel_attack", 
      "description": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint. In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities."
    }, 
    "@cwe_34_path_traversal_": {
      "references": [
        "CWE 34", 
        "https://cwe.mitre.org/data/definitions/34.html"
      ], 
      "name": "Path Traversal: '....//'", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize .... doubled dot dot slash sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory..The .... manipulation is useful for bypassing some path traversal protection schemes. If .. is filtered in a sequential fashion, as done by some regular expression engines, then .... can collapse into the .. unsafe value CWE-182 . It could also be useful when .. is removed, if the operating system treats and as equivalent."
    }, 
    "@cwe_667_improper_locking": {
      "references": [
        "CWE 667", 
        "https://cwe.mitre.org/data/definitions/667.html"
      ], 
      "name": "Improper Locking", 
      "parent": "@missing_lock", 
      "description": "The software does not properly acquire a lock on a resource, or it does not properly release a lock on a resource, leading to unexpected resource state changes and behaviors."
    }, 
    "@cwe_395_use_of_nullpointerexception_catch_to_detect_null_pointer_dereference": {
      "references": [
        "CWE 395", 
        "https://cwe.mitre.org/data/definitions/395.html"
      ], 
      "name": "Use of NullPointerException Catch to Detect NULL Pointer Dereference", 
      "parent": "@unchecked_status_condition", 
      "description": "Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer. Programmers typically catch NullPointerException under three circumstances:.Of these three circumstances, only the last is acceptable."
    }, 
    "@cwe_539_information_exposure_through_persistent_cookies": {
      "references": [
        "CWE 539", 
        "https://cwe.mitre.org/data/definitions/539.html"
      ], 
      "name": "Information Exposure Through Persistent Cookies", 
      "parent": "@exposed_data", 
      "description": "Persistent cookies are cookies that are stored on the browser s hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed. Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session Identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser s memory, and are not stored anywhere, but persistent cookies are stored on the browser s hard drive."
    }, 
    "@cwe_648_incorrect_use_of_privileged_apis": {
      "references": [
        "CWE 648", 
        "https://cwe.mitre.org/data/definitions/648.html"
      ], 
      "name": "Incorrect Use of Privileged APIs", 
      "parent": "@design", 
      "description": "The application does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly. When an application contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to:.If the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data..For instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited."
    }, 
    "@cwe_114_process_control": {
      "references": [
        "CWE 114", 
        "https://cwe.mitre.org/data/definitions/114.html"
      ], 
      "name": "Process Control", 
      "parent": "@tainted_input_to_environment", 
      "description": "Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands and payloads on behalf of an attacker. Process control vulnerabilities take two forms: 1. An attacker can change the command that the program executes: the attacker explicitly controls what the command is. 2. An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have."
    }, 
    "@cwe_250_execution_with_unnecessary_privileges": {
      "references": [
        "CWE 250", 
        "https://cwe.mitre.org/data/definitions/250.html"
      ], 
      "name": "Execution with Unnecessary Privileges", 
      "parent": "@privilege", 
      "description": "The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses. New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges..Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges."
    }, 
    "@cwe_332_insufficient_entropy_in_prng": {
      "references": [
        "CWE 332", 
        "https://cwe.mitre.org/data/definitions/332.html"
      ], 
      "name": "Insufficient Entropy in PRNG", 
      "parent": "@predictability", 
      "description": "The lack of entropy available for, or used by, a Pseudo-Random Number Generator PRNG can be a stability and security threat."
    }, 
    "@cwe_428_unquoted_search_path_or_element": {
      "references": [
        "CWE 428", 
        "https://cwe.mitre.org/data/definitions/428.html"
      ], 
      "name": "Unquoted Search Path or Element", 
      "parent": "@path_traversal", 
      "description": "The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path. If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as C: Program.exe to be run by a privileged program making use of WinExec."
    }, 
    "@cwe_673_external_influence_of_sphere_definition": {
      "references": [
        "CWE 673", 
        "https://cwe.mitre.org/data/definitions/673.html"
      ], 
      "name": "External Influence of Sphere Definition", 
      "parent": "@tainted_input_to_environment", 
      "description": "The product does not prevent the definition of control spheres from external actors. Typically, a product defines its control sphere within the code itself, or through configuration by the product s administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness."
    }, 
    "@ui": {
      "refs": [
        "906"
      ], 
      "name": "UI", 
      "parent": "@sfp"
    }, 
    "@cwe_221_information_loss_or_omission": {
      "references": [
        "CWE 221", 
        "https://cwe.mitre.org/data/definitions/221.html"
      ], 
      "name": "Information Loss or Omission", 
      "parent": "@information_loss", 
      "description": "The software does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis. This can be resultant, e.g. a buffer overflow might trigger a crash before the product can log the event."
    }, 
    "@cwe_595_comparison_of_object_references_instead_of_object_contents": {
      "references": [
        "CWE 595", 
        "https://cwe.mitre.org/data/definitions/595.html"
      ], 
      "name": "Comparison of Object References Instead of Object Contents", 
      "parent": "@design", 
      "description": "The program compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects."
    }, 
    "@cwe_374_passing_mutable_objects_to_an_untrusted_method": {
      "references": [
        "CWE 374", 
        "https://cwe.mitre.org/data/definitions/374.html"
      ], 
      "name": "Passing Mutable Objects to an Untrusted Method", 
      "parent": "@exposed_data", 
      "description": "The program sends non-cloned mutable data as an argument to a method or function. The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution."
    }, 
    "@cwe_422_unprotected_windows_messaging_channel_shatter": {
      "references": [
        "CWE 422", 
        "https://cwe.mitre.org/data/definitions/422.html"
      ], 
      "name": "Unprotected Windows Messaging Channel ('Shatter')", 
      "parent": "@missing_endpoint_authentication", 
      "description": "The software does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product."
    }, 
    "@cwe_360_trust_of_system_event_data": {
      "references": [
        "CWE 360", 
        "https://cwe.mitre.org/data/definitions/360.html"
      ], 
      "name": "Trust of System Event Data", 
      "parent": "@faulty_endpoint_authentication", 
      "description": "Security based on event locations are insecure and can be spoofed. Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages."
    }, 
    "@cwe_566_authorization_bypass_through_user_controlled_sql_primary_key": {
      "references": [
        "CWE 566", 
        "https://cwe.mitre.org/data/definitions/566.html"
      ], 
      "name": "Authorization Bypass Through User-Controlled SQL Primary Key", 
      "parent": "@tainted_input_to_variable", 
      "description": "The software uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor. When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records..Database access control errors occur when:"
    }, 
    "@cwe_599_missing_validation_of_openssl_certificate": {
      "references": [
        "CWE 599", 
        "https://cwe.mitre.org/data/definitions/599.html"
      ], 
      "name": "Missing Validation of OpenSSL Certificate", 
      "parent": "@digital_certificate", 
      "description": "The software uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result function to ensure that the certificate satisfies all necessary security requirements. This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated."
    }, 
    "@cwe_296_improper_following_of_a_certificates_chain_of_trust": {
      "references": [
        "CWE 296", 
        "https://cwe.mitre.org/data/definitions/296.html"
      ], 
      "name": "Improper Following of a Certificate's Chain of Trust", 
      "parent": "@digital_certificate", 
      "description": "The software does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate. If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate..In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate..There are several ways in which the chain of trust might be broken, including but not limited to:"
    }, 
    "@cwe_565_reliance_on_cookies_without_validation_and_integrity_checking": {
      "references": [
        "CWE 565", 
        "https://cwe.mitre.org/data/definitions/565.html"
      ], 
      "name": "Reliance on Cookies without Validation and Integrity Checking", 
      "parent": "@faulty_endpoint_authentication", 
      "description": "The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user. Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways."
    }, 
    "@failure_to_release_resource": {
      "refs": [
        "982"
      ], 
      "name": "Failure to Release Resource", 
      "parent": "@resource_management"
    }, 
    "@link_in_resource_name_resolution": {
      "refs": [
        "980"
      ], 
      "name": "Link in Resource Name Resolution", 
      "parent": "@path_resolution"
    }, 
    "@cwe_638_not_using_complete_mediation": {
      "references": [
        "CWE 638", 
        "https://cwe.mitre.org/data/definitions/638.html"
      ], 
      "name": "Not Using Complete Mediation", 
      "parent": "@race_condition_window", 
      "description": "The software does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity s rights or privileges change over time."
    }, 
    "@cwe_594_j2ee_framework_saving_unserializable_objects_to_disk": {
      "references": [
        "CWE 594", 
        "https://cwe.mitre.org/data/definitions/594.html"
      ], 
      "name": "J2EE Framework: Saving Unserializable Objects to Disk", 
      "parent": "@glitch_in_computation", 
      "description": "When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully. In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk."
    }, 
    "@cwe_674_uncontrolled_recursion": {
      "references": [
        "CWE 674", 
        "https://cwe.mitre.org/data/definitions/674.html"
      ], 
      "name": "Uncontrolled Recursion", 
      "parent": "@unrestricted_consumption", 
      "description": "The product does not properly control the amount of recursion that takes place, which consumes excessive resources, such as allocated memory or the program stack."
    }, 
    "@cwe_397_declaration_of_throws_for_generic_exception": {
      "references": [
        "CWE 397", 
        "https://cwe.mitre.org/data/definitions/397.html"
      ], 
      "name": "Declaration of Throws for Generic Exception", 
      "parent": "@ambiguous_exception_type", 
      "description": "Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities. Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java s exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system."
    }, 
    "@cwe_62_unix_hard_link": {
      "references": [
        "CWE 62", 
        "https://cwe.mitre.org/data/definitions/62.html"
      ], 
      "name": "UNIX Hard Link", 
      "parent": "@link_in_resource_name_resolution", 
      "description": "The software, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files. Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file e.g. etc passwd . When the process opens the file, the attacker can assume the privileges of that process."
    }, 
    "@cwe_351_insufficient_type_distinction": {
      "references": [
        "CWE 351", 
        "https://cwe.mitre.org/data/definitions/351.html"
      ], 
      "name": "Insufficient Type Distinction", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not properly distinguish between different types of elements in a way that leads to insecure behavior."
    }, 
    "@cwe_127_buffer_under_read": {
      "references": [
        "CWE 127", 
        "https://cwe.mitre.org/data/definitions/127.html"
      ], 
      "name": "Buffer Under-read", 
      "parent": "@faulty_buffer_access", 
      "description": "The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer. This typically occurs when the pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. This may result in exposure of sensitive information or possibly a crash."
    }, 
    "@cwe_230_improper_handling_of_missing_values": {
      "references": [
        "CWE 230", 
        "https://cwe.mitre.org/data/definitions/230.html"
      ], 
      "name": "Improper Handling of Missing Values", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null."
    }, 
    "@cwe_514_covert_channel": {
      "references": [
        "CWE 514", 
        "https://cwe.mitre.org/data/definitions/514.html"
      ], 
      "name": "Covert Channel", 
      "parent": "@covert_channel", 
      "description": "A covert channel is a path that can be used to transfer information in a way not intended by the system s designers. Typically the system has not given authorization for the transmission and has no knowledge of its occurrence."
    }, 
    "@cwe_122_heap_based_buffer_overflow": {
      "references": [
        "CWE 122", 
        "https://cwe.mitre.org/data/definitions/122.html"
      ], 
      "name": "Heap-based Buffer Overflow", 
      "parent": "@faulty_buffer_access", 
      "description": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc ."
    }, 
    "@cwe_110_struts_validator_without_form_field": {
      "references": [
        "CWE 110", 
        "https://cwe.mitre.org/data/definitions/110.html"
      ], 
      "name": "Struts: Validator Without Form Field", 
      "parent": "@tainted_input_to_command", 
      "description": "Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date. It is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form..Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack."
    }, 
    "@cwe_297_improper_validation_of_certificate_with_host_mismatch": {
      "references": [
        "CWE 297", 
        "https://cwe.mitre.org/data/definitions/297.html"
      ], 
      "name": "Improper Validation of Certificate with Host Mismatch", 
      "parent": "@digital_certificate", 
      "description": "The software communicates with a host that provides a certificate, but the software does not properly ensure that the certificate is actually associated with that host. Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the software is interacting with. If the certificate s host-specific data is not properly checked - such as the Common Name CN in the Subject or the Subject Alternative Name SAN extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed..Even if the software attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name."
    }, 
    "@cwe_541_information_exposure_through_include_source_code": {
      "references": [
        "CWE 541", 
        "https://cwe.mitre.org/data/definitions/541.html"
      ], 
      "name": "Information Exposure Through Include Source Code", 
      "parent": "@exposed_data", 
      "description": "If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system."
    }, 
    "@cwe_476_null_pointer_dereference": {
      "references": [
        "CWE 476", 
        "https://cwe.mitre.org/data/definitions/476.html"
      ], 
      "name": "NULL Pointer Dereference", 
      "parent": "@faulty_pointer_use", 
      "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit. NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions."
    }, 
    "@cwe_124_buffer_underwrite_buffer_underflow": {
      "references": [
        "CWE 124", 
        "https://cwe.mitre.org/data/definitions/124.html"
      ], 
      "name": "Buffer Underwrite ('Buffer Underflow')", 
      "parent": "@faulty_buffer_access", 
      "description": "The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer. This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used."
    }, 
    "@cwe_180_incorrect_behavior_order_validate_before_canonicalize": {
      "references": [
        "CWE 180", 
        "https://cwe.mitre.org/data/definitions/180.html"
      ], 
      "name": "Incorrect Behavior Order: Validate Before Canonicalize", 
      "parent": "@faulty_input_transformation", 
      "description": "The software validates input before it is canonicalized, which prevents the software from detecting data that becomes invalid after the canonicalization step. This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection."
    }, 
    "@access_control": {
      "refs": [
        "899"
      ], 
      "name": "Access Control", 
      "parent": "@sfp"
    }, 
    "@cwe_647_use_of_non_canonical_url_paths_for_authorization_decisions": {
      "references": [
        "CWE 647", 
        "https://cwe.mitre.org/data/definitions/647.html"
      ], 
      "name": "Use of Non-Canonical URL Paths for Authorization Decisions", 
      "parent": "@faulty_endpoint_authentication", 
      "description": "The software defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization. If an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http: www.example.com mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as:.Therefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected which can be accomplished by a default deny rule ."
    }, 
    "@cwe_703_improper_check_or_handling_of_exceptional_conditions": {
      "references": [
        "CWE 703", 
        "https://cwe.mitre.org/data/definitions/703.html"
      ], 
      "name": "Improper Check or Handling of Exceptional Conditions", 
      "parent": "@incorrect_exception_behavior", 
      "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software."
    }, 
    "@cwe_229_improper_handling_of_values": {
      "references": [
        "CWE 229", 
        "https://cwe.mitre.org/data/definitions/229.html"
      ], 
      "name": "Improper Handling of Values", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined."
    }, 
    "@cwe_704_incorrect_type_conversion_or_cast": {
      "references": [
        "CWE 704", 
        "https://cwe.mitre.org/data/definitions/704.html"
      ], 
      "name": "Incorrect Type Conversion or Cast", 
      "parent": "@glitch_in_computation", 
      "description": "The software does not correctly convert an object, resource or structure from one type to a different type."
    }, 
    "@cwe_224_obscured_security_relevant_information_by_alternate_name": {
      "references": [
        "CWE 224", 
        "https://cwe.mitre.org/data/definitions/224.html"
      ], 
      "name": "Obscured Security-relevant Information by Alternate Name", 
      "parent": "@information_loss", 
      "description": "The software records security-relevant information according to an alternate name of the affected entity, instead of the canonical name."
    }, 
    "@cwe_392_missing_report_of_error_condition": {
      "references": [
        "CWE 392", 
        "https://cwe.mitre.org/data/definitions/392.html"
      ], 
      "name": "Missing Report of Error Condition", 
      "parent": "@incorrect_exception_behavior", 
      "description": "The software encounters an error but does not provide a status code or return value to indicate that an error has occurred."
    }, 
    "@cwe_335_prng_seed_error": {
      "references": [
        "CWE 335", 
        "https://cwe.mitre.org/data/definitions/335.html"
      ], 
      "name": "PRNG Seed Error", 
      "parent": "@predictability", 
      "description": "A Pseudo-Random Number Generator PRNG uses seeds incorrectly."
    }, 
    "@cwe_173_improper_handling_of_alternate_encoding": {
      "references": [
        "CWE 173", 
        "https://cwe.mitre.org/data/definitions/173.html"
      ], 
      "name": "Improper Handling of Alternate Encoding", 
      "parent": "@faulty_input_transformation", 
      "description": "The software does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent."
    }, 
    "@cwe_268_privilege_chaining": {
      "references": [
        "CWE 268", 
        "https://cwe.mitre.org/data/definitions/268.html"
      ], 
      "name": "Privilege Chaining", 
      "parent": "@privilege", 
      "description": "Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination."
    }, 
    "@cwe_336_same_seed_in_prng": {
      "references": [
        "CWE 336", 
        "https://cwe.mitre.org/data/definitions/336.html"
      ], 
      "name": "Same Seed in PRNG", 
      "parent": "@predictability", 
      "description": "A PRNG uses the same seed each time the product is initialized. If an attacker can guess or knows the seed, then he she may be able to determine the random number produced from the PRNG."
    }, 
    "@cwe_581_object_model_violation_just_one_of_equals_and_hashcode_defined": {
      "references": [
        "CWE 581", 
        "https://cwe.mitre.org/data/definitions/581.html"
      ], 
      "name": "Object Model Violation: Just One of Equals and Hashcode Defined", 
      "parent": "@design", 
      "description": "The software does not maintain equal hashcodes for equal objects. Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals b true then a.hashCode b.hashCode ."
    }, 
    "@cwe_45_path_equivalence_filename_multiple_internal_dot": {
      "references": [
        "CWE 45", 
        "https://cwe.mitre.org/data/definitions/45.html"
      ], 
      "name": "Path Equivalence: 'file...name' (Multiple Internal Dot)", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of multiple internal dot file...dir without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_276_incorrect_default_permissions": {
      "references": [
        "CWE 276", 
        "https://cwe.mitre.org/data/definitions/276.html"
      ], 
      "name": "Incorrect Default Permissions", 
      "parent": "@insecure_resource_permissions", 
      "description": "The software, upon installation, sets incorrect permissions for an object that exposes it to an unintended actor."
    }, 
    "@unchecked_status_condition": {
      "refs": [
        "962"
      ], 
      "name": "Unchecked Status Condition", 
      "parent": "@exception_management"
    }, 
    "@cwe_757_selection_of_less_secure_algorithm_during_negotiation_algorithm_downgrade": {
      "references": [
        "CWE 757", 
        "https://cwe.mitre.org/data/definitions/757.html"
      ], 
      "name": "Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')", 
      "parent": "@protocol_error", 
      "description": "A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties. When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the software by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques."
    }, 
    "@cwe_170_improper_null_termination": {
      "references": [
        "CWE 170", 
        "https://cwe.mitre.org/data/definitions/170.html"
      ], 
      "name": "Improper Null Termination", 
      "parent": "@improper_null_termination", 
      "description": "The software does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator. Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible."
    }, 
    "@cwe_223_omission_of_security_relevant_information": {
      "references": [
        "CWE 223", 
        "https://cwe.mitre.org/data/definitions/223.html"
      ], 
      "name": "Omission of Security-relevant Information", 
      "parent": "@information_loss", 
      "description": "The application does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe."
    }, 
    "@cwe_520_net_misconfiguration_use_of_impersonation": {
      "references": [
        "CWE 520", 
        "https://cwe.mitre.org/data/definitions/520.html"
      ], 
      "name": ".NET Misconfiguration: Use of Impersonation", 
      "parent": "@privilege", 
      "description": "Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks. .NET server applications can optionally execute using the identity of the user authenticated to the client. The intention of this functionality is to bypass authentication and access control checks within the .NET application code. Authentication is done by the underlying web server Microsoft Internet Information Service IIS , which passes the authenticated token, or unauthenticated anonymous token, to the .NET application. Using the token to impersonate the client, the application then relies on the settings within the NTFS directories and files to control access. Impersonation enables the application, on the server running the .NET application, to both execute code and access resources in the context of the authenticated and authorized user."
    }, 
    "@cwe_54_path_equivalence_filedir_trailing_backslash": {
      "references": [
        "CWE 54", 
        "https://cwe.mitre.org/data/definitions/54.html"
      ], 
      "name": "Path Equivalence: 'filedir\\' (Trailing Backslash)", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of trailing backslash filedir without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_248_uncaught_exception": {
      "references": [
        "CWE 248", 
        "https://cwe.mitre.org/data/definitions/248.html"
      ], 
      "name": "Uncaught Exception", 
      "parent": "@unchecked_status_condition", 
      "description": "An exception is thrown from a function, but it is not caught. When an exception is not caught, it may cause the program to crash or expose sensitive information."
    }, 
    "@cwe_232_improper_handling_of_undefined_values": {
      "references": [
        "CWE 232", 
        "https://cwe.mitre.org/data/definitions/232.html"
      ], 
      "name": "Improper Handling of Undefined Values", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name."
    }, 
    "@cwe_578_ejb_bad_practices_use_of_class_loader": {
      "references": [
        "CWE 578", 
        "https://cwe.mitre.org/data/definitions/578.html"
      ], 
      "name": "EJB Bad Practices: Use of Class Loader", 
      "parent": "@use_of_an_improper_api", 
      "description": "The program violates the Enterprise JavaBeans EJB specification by using the class loader. The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams. The specification justifies this requirement in the following way: These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container s ability to properly manage the runtime environment. "
    }, 
    "@cwe_427_uncontrolled_search_path_element": {
      "references": [
        "CWE 427", 
        "https://cwe.mitre.org/data/definitions/427.html"
      ], 
      "name": "Uncontrolled Search Path Element", 
      "parent": "@tainted_input_to_environment", 
      "description": "The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors. Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as tmp or the current working directory..In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:.In some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used..In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element."
    }, 
    "@faulty_buffer_access": {
      "refs": [
        "970"
      ], 
      "name": "Faulty Buffer Access", 
      "parent": "@memory_access"
    }, 
    "@cwe_53_path_equivalence_multipleinternalbackslash": {
      "references": [
        "CWE 53", 
        "https://cwe.mitre.org/data/definitions/53.html"
      ], 
      "name": "Path Equivalence: '\\multiple\\\\internal\\backslash'", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of multiple internal backslash multiple trailing slash without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_472_external_control_of_assumed_immutable_web_parameter": {
      "references": [
        "CWE 472", 
        "https://cwe.mitre.org/data/definitions/472.html"
      ], 
      "name": "External Control of Assumed-Immutable Web Parameter", 
      "parent": "@tainted_input_to_environment", 
      "description": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields. If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input..For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application."
    }, 
    "@cwe_259_use_of_hard_coded_password": {
      "references": [
        "CWE 259", 
        "https://cwe.mitre.org/data/definitions/259.html"
      ], 
      "name": "Use of Hard-coded Password", 
      "parent": "@hardcoded_sensitive_data", 
      "description": "The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components. A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:.In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published a common occurrence on the Internet , then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place..The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple."
    }, 
    "@cwe_95_improper_neutralization_of_directives_in_dynamically_evaluated_code_eval_injection": {
      "references": [
        "CWE 95", 
        "https://cwe.mitre.org/data/definitions/95.html"
      ], 
      "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call e.g. eval . This may allow an attacker to execute arbitrary code, or at least modify what code can be executed."
    }, 
    "@feature": {
      "refs": [
        "995"
      ], 
      "name": "Feature", 
      "parent": "@ui"
    }, 
    "@cwe_274_improper_handling_of_insufficient_privileges": {
      "references": [
        "CWE 274", 
        "https://cwe.mitre.org/data/definitions/274.html"
      ], 
      "name": "Improper Handling of Insufficient Privileges", 
      "parent": "@privilege", 
      "description": "The software does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses."
    }, 
    "@cwe_573_improper_following_of_specification_by_caller": {
      "references": [
        "CWE 573", 
        "https://cwe.mitre.org/data/definitions/573.html"
      ], 
      "name": "Improper Following of Specification by Caller", 
      "parent": "@use_of_an_improper_api", 
      "description": "The software does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform. When leveraging external functionality, such as an API, it is important that the caller does so in accordance with the requirements of the external functionality or else unintended behaviors may result, possibly leaving the system vulnerable to any number of exploits."
    }, 
    "@insecure_resource_access": {
      "refs": [
        "945"
      ], 
      "name": "Insecure Resource Access", 
      "parent": "@access_control"
    }, 
    "@cwe_145_improper_neutralization_of_section_delimiters": {
      "references": [
        "CWE 145", 
        "https://cwe.mitre.org/data/definitions/145.html"
      ], 
      "name": "Improper Neutralization of Section Delimiters", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component. As data is parsed, an injected absent malformed delimiter may cause the process to take unexpected actions..One example of a section delimiter is the boundary string in a multipart MIME message. In many cases, doubled line delimiters can serve as a section delimiter."
    }, 
    "@cwe_364_signal_handler_race_condition": {
      "references": [
        "CWE 364", 
        "https://cwe.mitre.org/data/definitions/364.html"
      ], 
      "name": "Signal Handler Race Condition", 
      "parent": "@missing_lock", 
      "description": "The software uses a signal handler that introduces a race condition. Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the software state to be corrupted, possibly leading to a denial of service or even code execution..These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the regular code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered..There are several known behaviors related to signal handlers that have received the label of signal handler race condition :.Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code:"
    }, 
    "@cwe_331_insufficient_entropy": {
      "references": [
        "CWE 331", 
        "https://cwe.mitre.org/data/definitions/331.html"
      ], 
      "name": "Insufficient Entropy", 
      "parent": "@predictability", 
      "description": "The software uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others."
    }, 
    "@cwe_572_call_to_thread_run_instead_of_start": {
      "references": [
        "CWE 572", 
        "https://cwe.mitre.org/data/definitions/572.html"
      ], 
      "name": "Call to Thread run() instead of start()", 
      "parent": "@use_of_an_improper_api", 
      "description": "The program calls a thread s run method instead of calling start , which causes the code to run in the thread of the caller instead of the callee. In most cases a direct call to a Thread object s run method is a bug. The programmer intended to begin a new thread of control, but accidentally called run instead of start , so the run method will execute in the caller s thread of control."
    }, 
    "@cwe_665_improper_initialization": {
      "references": [
        "CWE 665", 
        "https://cwe.mitre.org/data/definitions/665.html"
      ], 
      "name": "Improper Initialization", 
      "parent": "@unchecked_status_condition", 
      "description": "The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used. This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not."
    }, 
    "@cwe_178_improper_handling_of_case_sensitivity": {
      "references": [
        "CWE 178", 
        "https://cwe.mitre.org/data/definitions/178.html"
      ], 
      "name": "Improper Handling of Case Sensitivity", 
      "parent": "@faulty_input_transformation", 
      "description": "The software does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results. Improperly handled case sensitive data can lead to several possible consequences, including:"
    }, 
    "@cwe_176_improper_handling_of_unicode_encoding": {
      "references": [
        "CWE 176", 
        "https://cwe.mitre.org/data/definitions/176.html"
      ], 
      "name": "Improper Handling of Unicode Encoding", 
      "parent": "@faulty_input_transformation", 
      "description": "The software does not properly handle when an input contains Unicode encoding."
    }, 
    "@cryptography": {
      "refs": [
        "903"
      ], 
      "name": "Cryptography", 
      "parent": "@sfp"
    }, 
    "@exposure_temporary_file": {
      "refs": [
        "964"
      ], 
      "name": "Exposure Temporary File", 
      "parent": "@information_leak"
    }, 
    "@cwe_656_reliance_on_security_through_obscurity": {
      "references": [
        "CWE 656", 
        "https://cwe.mitre.org/data/definitions/656.html"
      ], 
      "name": "Reliance on Security Through Obscurity", 
      "parent": "@architecture", 
      "description": "The software uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism. This reliance on security through obscurity can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection."
    }, 
    "@cwe_696_incorrect_behavior_order": {
      "references": [
        "CWE 696", 
        "https://cwe.mitre.org/data/definitions/696.html"
      ], 
      "name": "Incorrect Behavior Order", 
      "parent": "@design", 
      "description": "The software performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses."
    }, 
    "@cwe_583_finalize_method_declared_public": {
      "references": [
        "CWE 583", 
        "https://cwe.mitre.org/data/definitions/583.html"
      ], 
      "name": "finalize() Method Declared Public", 
      "parent": "@unexpected_entry_points", 
      "description": "The program violates secure coding principles for mobile code by declaring a finalize method public. A program should never call finalize explicitly, except to call super.finalize inside an implementation of finalize . In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke one of your finalize methods because it is declared with public access."
    }, 
    "@cwe_768_incorrect_short_circuit_evaluation": {
      "references": [
        "CWE 768", 
        "https://cwe.mitre.org/data/definitions/768.html"
      ], 
      "name": "Incorrect Short Circuit Evaluation", 
      "parent": "@glitch_in_computation", 
      "description": "The software contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring. Usage of short circuit evaluation, though well-defined in the C standard, may alter control flow in a way that introduces logic errors that are difficult to detect, possibly causing errors later during the software s execution. If an attacker can discover such an inconsistency, it may be exploitable to gain arbitrary control over a system..If the first condition of an or statement is assumed to be true under normal circumstances, or if the first condition of an and statement is assumed to be false, then any subsequent conditional may contain its own logic errors that are not detected during code review or testing..Finally, the usage of short circuit evaluation may decrease the maintainability of the code."
    }, 
    "@cwe_216_containment_errors_container_errors": {
      "references": [
        "CWE 216", 
        "https://cwe.mitre.org/data/definitions/216.html"
      ], 
      "name": "Containment Errors (Container Errors)", 
      "parent": "@implementation", 
      "description": "This tries to cover various problems in which improper data are included within a container. "
    }, 
    "@cwe_415_double_free": {
      "references": [
        "CWE 415", 
        "https://cwe.mitre.org/data/definitions/415.html"
      ], 
      "name": "Double Free", 
      "parent": "@faulty_memory_release", 
      "description": "The product calls free twice on the same memory address, potentially leading to modification of unexpected memory locations. When a program calls free twice with the same argument, the program s memory management data structures become corrupted. This corruption can cause the program to crash or, in some circumstances, cause two later calls to malloc to return the same pointer. If malloc returns the same value twice and the program later gives the attacker control over the data that is written into this doubly-allocated memory, the program becomes vulnerable to a buffer overflow attack."
    }, 
    "@cwe_560_use_of_umask_with_chmod_style_argument": {
      "references": [
        "CWE 560", 
        "https://cwe.mitre.org/data/definitions/560.html"
      ], 
      "name": "Use of umask() with chmod-style Argument", 
      "parent": "@insecure_resource_permissions", 
      "description": "The product calls umask with an incorrect argument that is specified as if it is an argument to chmod ."
    }, 
    "@cwe_639_authorization_bypass_through_user_controlled_key": {
      "references": [
        "CWE 639", 
        "https://cwe.mitre.org/data/definitions/639.html"
      ], 
      "name": "Authorization Bypass Through User-Controlled Key", 
      "parent": "@insecure_resource_access", 
      "description": "The system s authorization functionality does not prevent one user from gaining access to another user s data or record by modifying the key value identifying the data. Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system. One manifestation of this weakness would be if a system used sequential or otherwise easily guessable session ids that would allow one user to easily switch to another user s session and read modify their data."
    }, 
    "@cwe_311_missing_encryption_of_sensitive_data": {
      "references": [
        "CWE 311", 
        "https://cwe.mitre.org/data/definitions/311.html"
      ], 
      "name": "Missing Encryption of Sensitive Data", 
      "parent": "@exposed_data", 
      "description": "The software does not encrypt sensitive or critical information before storage or transmission. The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys."
    }, 
    "@predictability": {
      "refs": [
        "905"
      ], 
      "name": "Predictability", 
      "parent": "@sfp"
    }, 
    "@cwe_280_improper_handling_of_insufficient_permissions_or_privileges_": {
      "references": [
        "CWE 280", 
        "https://cwe.mitre.org/data/definitions/280.html"
      ], 
      "name": "Improper Handling of Insufficient Permissions or Privileges ", 
      "parent": "@unchecked_status_condition", 
      "description": "The application does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the application in an invalid state."
    }, 
    "@cwe_408_incorrect_behavior_order_early_amplification": {
      "references": [
        "CWE 408", 
        "https://cwe.mitre.org/data/definitions/408.html"
      ], 
      "name": "Incorrect Behavior Order: Early Amplification", 
      "parent": "@design", 
      "description": "The software allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place."
    }, 
    "@insecure_authentication_policy": {
      "refs": [
        "951"
      ], 
      "name": "Insecure Authentication Policy", 
      "parent": "@authentication"
    }, 
    "@cwe_385_covert_timing_channel": {
      "references": [
        "CWE 385", 
        "https://cwe.mitre.org/data/definitions/385.html"
      ], 
      "name": "Covert Timing Channel", 
      "parent": "@covert_channel", 
      "description": "Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information. In some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state..Covert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system s paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus."
    }, 
    "@cwe_341_predictable_from_observable_state": {
      "references": [
        "CWE 341", 
        "https://cwe.mitre.org/data/definitions/341.html"
      ], 
      "name": "Predictable from Observable State", 
      "parent": "@predictability", 
      "description": "A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc."
    }, 
    "@cwe_403_exposure_of_file_descriptor_to_unintended_control_sphere_file_descriptor_leak": {
      "references": [
        "CWE 403", 
        "https://cwe.mitre.org/data/definitions/403.html"
      ], 
      "name": "Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')", 
      "parent": "@exposed_data", 
      "description": "A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I O operations using those descriptors. When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file."
    }, 
    "@cwe_196_unsigned_to_signed_conversion_error": {
      "references": [
        "CWE 196", 
        "https://cwe.mitre.org/data/definitions/196.html"
      ], 
      "name": "Unsigned to Signed Conversion Error", 
      "parent": "@glitch_in_computation", 
      "description": "The software uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive. Although less frequent an issue than signed-to-unsigned conversion, unsigned-to-signed conversion can be the perfect precursor to dangerous buffer underwrite conditions that allow attackers to move down the stack where they otherwise might not have access in a normal buffer overflow condition. Buffer underwrites occur frequently when large unsigned values are cast to signed values, and then used as indexes into a buffer or for pointer arithmetic."
    }, 
    "@cwe_266_incorrect_privilege_assignment": {
      "references": [
        "CWE 266", 
        "https://cwe.mitre.org/data/definitions/266.html"
      ], 
      "name": "Incorrect Privilege Assignment", 
      "parent": "@privilege", 
      "description": "A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor."
    }, 
    "@cwe_258_empty_password_in_configuration_file": {
      "references": [
        "CWE 258", 
        "https://cwe.mitre.org/data/definitions/258.html"
      ], 
      "name": "Empty Password in Configuration File", 
      "parent": "@hardcoded_sensitive_data", 
      "description": "Using an empty string as a password is insecure."
    }, 
    "@cwe_644_improper_neutralization_of_http_headers_for_scripting_syntax": {
      "references": [
        "CWE 644", 
        "https://cwe.mitre.org/data/definitions/644.html"
      ], 
      "name": "Improper Neutralization of HTTP Headers for Scripting Syntax", 
      "parent": "@tainted_input_to_command", 
      "description": "The application does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash. An attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled..If an application does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client s browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account."
    }, 
    "@cwe_47_path_equivalence__filename_leading_space": {
      "references": [
        "CWE 47", 
        "https://cwe.mitre.org/data/definitions/47.html"
      ], 
      "name": "Path Equivalence: ' filename' (Leading Space)", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of leading space filedir without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_543_use_of_singleton_pattern_without_synchronization_in_a_multithreaded_context": {
      "references": [
        "CWE 543", 
        "https://cwe.mitre.org/data/definitions/543.html"
      ], 
      "name": "Use of Singleton Pattern Without Synchronization in a Multithreaded Context", 
      "parent": "@missing_lock", 
      "description": "The software uses the singleton pattern when creating a resource within a multithreaded environment. The use of a singleton pattern may not be thread-safe."
    }, 
    "@cwe_157_failure_to_sanitize_paired_delimiters": {
      "references": [
        "CWE 157", 
        "https://cwe.mitre.org/data/definitions/157.html"
      ], 
      "name": "Failure to Sanitize Paired Delimiters", 
      "parent": "@tainted_input_to_command", 
      "description": "The software does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces. Paired delimiters might include:"
    }, 
    "@cwe_207_information_exposure_through_an_external_behavioral_inconsistency": {
      "references": [
        "CWE 207", 
        "https://cwe.mitre.org/data/definitions/207.html"
      ], 
      "name": "Information Exposure Through an External Behavioral Inconsistency", 
      "parent": "@state_disclosure", 
      "description": "The product behaves differently than other products like it, in a way that is observable to an attacker and exposes security-relevant information about which product is being used."
    }, 
    "@cwe_494_download_of_code_without_integrity_check": {
      "references": [
        "CWE 494", 
        "https://cwe.mitre.org/data/definitions/494.html"
      ], 
      "name": "Download of Code Without Integrity Check", 
      "parent": "@tainted_input_to_environment", 
      "description": "The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code. An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit."
    }, 
    "@cwe_386_symbolic_name_not_mapping_to_correct_object": {
      "references": [
        "CWE 386", 
        "https://cwe.mitre.org/data/definitions/386.html"
      ], 
      "name": "Symbolic Name not Mapping to Correct Object", 
      "parent": "@link_in_resource_name_resolution", 
      "description": "A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time."
    }, 
    "@cwe_766_critical_variable_declared_public": {
      "references": [
        "CWE 766", 
        "https://cwe.mitre.org/data/definitions/766.html"
      ], 
      "name": "Critical Variable Declared Public", 
      "parent": "@unexpected_entry_points", 
      "description": "The software declares a critical variable or field to be public when intended security policy requires it to be private."
    }, 
    "@cwe_617_reachable_assertion": {
      "references": [
        "CWE 617", 
        "https://cwe.mitre.org/data/definitions/617.html"
      ], 
      "name": "Reachable Assertion", 
      "parent": "@use_of_an_improper_api", 
      "description": "The product contains an assert or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary. While assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service..For example, if a server handles multiple simultaneous connections, and an assert occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service."
    }, 
    "@tainted_input_to_command": {
      "refs": [
        "990"
      ], 
      "name": "Tainted Input to Command", 
      "parent": "@tainted_input"
    }, 
    "@cwe_576_ejb_bad_practices_use_of_java_io": {
      "references": [
        "CWE 576", 
        "https://cwe.mitre.org/data/definitions/576.html"
      ], 
      "name": "EJB Bad Practices: Use of Java I/O", 
      "parent": "@use_of_an_improper_api", 
      "description": "The program violates the Enterprise JavaBeans EJB specification by using the java.io package. The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: An enterprise bean must not use the java.io package to attempt to access files and directories in the file system. The specification justifies this requirement in the following way: The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data. "
    }, 
    "@cwe_486_comparison_of_classes_by_name": {
      "references": [
        "CWE 486", 
        "https://cwe.mitre.org/data/definitions/486.html"
      ], 
      "name": "Comparison of Classes by Name", 
      "parent": "@glitch_in_computation", 
      "description": "The program compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name. If the decision to trust the methods and data of an object is based on the name of a class, it is possible for malicious users to send objects of the same name as trusted classes and thereby gain the trust afforded to known classes and types."
    }, 
    "@cwe_74_improper_neutralization_of_special_elements_in_output_used_by_a_downstream_component_injection": {
      "references": [
        "CWE 74", 
        "https://cwe.mitre.org/data/definitions/74.html"
      ], 
      "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component. Software has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities."
    }, 
    "@cwe_367_time_of_check_time_of_use_toctou_race_condition": {
      "references": [
        "CWE 367", 
        "https://cwe.mitre.org/data/definitions/367.html"
      ], 
      "name": "Time-of-check Time-of-use (TOCTOU) Race Condition", 
      "parent": "@race_condition_window", 
      "description": "The software checks the state of a resource before using that resource, but the resource s state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state. This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs."
    }, 
    "@cwe_585_empty_synchronized_block": {
      "references": [
        "CWE 585", 
        "https://cwe.mitre.org/data/definitions/585.html"
      ], 
      "name": "Empty Synchronized Block", 
      "parent": "@multiple_locksunlocks", 
      "description": "The software contains an empty synchronized block. An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block."
    }, 
    "@cwe_468_incorrect_pointer_scaling": {
      "references": [
        "CWE 468", 
        "https://cwe.mitre.org/data/definitions/468.html"
      ], 
      "name": "Incorrect Pointer Scaling", 
      "parent": "@glitch_in_computation", 
      "description": "In C and C , one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled."
    }, 
    "@cwe_278_insecure_preserved_inherited_permissions": {
      "references": [
        "CWE 278", 
        "https://cwe.mitre.org/data/definitions/278.html"
      ], 
      "name": "Insecure Preserved Inherited Permissions", 
      "parent": "@insecure_resource_permissions", 
      "description": "A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement."
    }, 
    "@cwe_509_replicating_malicious_code_virus_or_worm": {
      "references": [
        "CWE 509", 
        "https://cwe.mitre.org/data/definitions/509.html"
      ], 
      "name": "Replicating Malicious Code (Virus or Worm)", 
      "parent": "@malware", 
      "description": "Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or software."
    }, 
    "@other": {
      "refs": [
        "907"
      ], 
      "name": "Other", 
      "parent": "@sfp"
    }, 
    "@cwe_454_external_initialization_of_trusted_variables_or_data_stores": {
      "references": [
        "CWE 454", 
        "https://cwe.mitre.org/data/definitions/454.html"
      ], 
      "name": "External Initialization of Trusted Variables or Data Stores", 
      "parent": "@tainted_input_to_variable", 
      "description": "The software initializes critical internal variables or data stores using inputs that can be modified by untrusted actors. A software system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. They may have been initialized incorrectly. If an attacker can initialize the variable, then he she can influence what the vulnerable system will do."
    }, 
    "@cwe_117_improper_output_neutralization_for_logs": {
      "references": [
        "CWE 117", 
        "https://cwe.mitre.org/data/definitions/117.html"
      ], 
      "name": "Improper Output Neutralization for Logs", 
      "parent": "@exposed_data", 
      "description": "The software does not neutralize or incorrectly neutralizes output that is written to logs. This can allow an attacker to forge log entries or inject malicious content into logs..Log forging vulnerabilities occur when:"
    }, 
    "@cwe_161_improper_neutralization_of_multiple_leading_special_elements": {
      "references": [
        "CWE 161", 
        "https://cwe.mitre.org/data/definitions/161.html"
      ], 
      "name": "Improper Neutralization of Multiple Leading Special Elements", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component. As data is parsed, improperly handled multiple leading special elements may cause the process to take unexpected actions that result in an attack."
    }, 
    "@cwe_637_unnecessary_complexity_in_protection_mechanism_not_using_economy_of_mechanism": {
      "references": [
        "CWE 637", 
        "https://cwe.mitre.org/data/definitions/637.html"
      ], 
      "name": "Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism')", 
      "parent": "@architecture", 
      "description": "The software uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used. Security mechanisms should be as simple as possible. Complex security mechanisms may engender partial implementations and compatibility problems, with resulting mismatches in assumptions and implemented security. A corollary of this principle is that data specifications should be as simple as possible, because complex data specifications result in complex validation code. Complex tasks and systems may also need to be guarded by complex security checks, so simple systems should be preferred."
    }, 
    "@cwe_404_improper_resource_shutdown_or_release": {
      "references": [
        "CWE 404", 
        "https://cwe.mitre.org/data/definitions/404.html"
      ], 
      "name": "Improper Resource Shutdown or Release", 
      "parent": "@failure_to_release_resource", 
      "description": "The program does not release or incorrectly releases a resource before it is made available for re-use. When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as accounting for all potential paths of expiration or invalidation, such as a set period of time or revocation."
    }, 
    "@cwe_194_unexpected_sign_extension": {
      "references": [
        "CWE 194", 
        "https://cwe.mitre.org/data/definitions/194.html"
      ], 
      "name": "Unexpected Sign Extension", 
      "parent": "@glitch_in_computation", 
      "description": "The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses."
    }, 
    "@cwe_535_information_exposure_through_shell_error_message": {
      "references": [
        "CWE 535", 
        "https://cwe.mitre.org/data/definitions/535.html"
      ], 
      "name": "Information Exposure Through Shell Error Message", 
      "parent": "@exposed_data", 
      "description": "A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system."
    }, 
    "@faulty_string_expansion": {
      "refs": [
        "972"
      ], 
      "name": "Faulty String Expansion", 
      "parent": "@memory_access"
    }, 
    "@cwe_436_interpretation_conflict": {
      "references": [
        "CWE 436", 
        "https://cwe.mitre.org/data/definitions/436.html"
      ], 
      "name": "Interpretation Conflict", 
      "parent": "@protocol_error", 
      "description": "Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B s state. This is generally found in proxies, firewalls, anti-virus software, and other intermediary devices that monitor, allow, deny, or modify traffic based on how the client or server is expected to behave."
    }, 
    "@hardcoded_sensitive_data": {
      "refs": [
        "950"
      ], 
      "name": "Hardcoded Sensitive Data", 
      "parent": "@authentication"
    }, 
    "@cwe_345_insufficient_verification_of_data_authenticity": {
      "references": [
        "CWE 345", 
        "https://cwe.mitre.org/data/definitions/345.html"
      ], 
      "name": "Insufficient Verification of Data Authenticity", 
      "parent": "@faulty_endpoint_authentication", 
      "description": "The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data."
    }, 
    "@cwe_643_improper_neutralization_of_data_within_xpath_expressions_xpath_injection": {
      "references": [
        "CWE 643", 
        "https://cwe.mitre.org/data/definitions/643.html"
      ], 
      "name": "Improper Neutralization of Data within XPath Expressions ('XPath Injection')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query. The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks e.g. authentication ."
    }, 
    "@cwe_129_improper_validation_of_array_index": {
      "references": [
        "CWE 129", 
        "https://cwe.mitre.org/data/definitions/129.html"
      ], 
      "name": "Improper Validation of Array Index", 
      "parent": "@faulty_buffer_access", 
      "description": "The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array."
    }, 
    "@cwe_372_incomplete_internal_state_distinction": {
      "references": [
        "CWE 372", 
        "https://cwe.mitre.org/data/definitions/372.html"
      ], 
      "name": "Incomplete Internal State Distinction", 
      "parent": "@unchecked_status_condition", 
      "description": "The software does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner."
    }, 
    "@cwe_466_return_of_pointer_value_outside_of_expected_range": {
      "references": [
        "CWE 466", 
        "https://cwe.mitre.org/data/definitions/466.html"
      ], 
      "name": "Return of Pointer Value Outside of Expected Range", 
      "parent": "@glitch_in_computation", 
      "description": "A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference."
    }, 
    "@cwe_187_partial_comparison": {
      "references": [
        "CWE 187", 
        "https://cwe.mitre.org/data/definitions/187.html"
      ], 
      "name": "Partial Comparison", 
      "parent": "@design", 
      "description": "The software performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses. For example, an attacker might succeed in authentication by providing a small password that matches the associated portion of the larger, correct password."
    }, 
    "@cwe_208_information_exposure_through_timing_discrepancy": {
      "references": [
        "CWE 208", 
        "https://cwe.mitre.org/data/definitions/208.html"
      ], 
      "name": "Information Exposure Through Timing Discrepancy", 
      "parent": "@state_disclosure", 
      "description": "Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not."
    }, 
    "@cwe_655_insufficient_psychological_acceptability": {
      "references": [
        "CWE 655", 
        "https://cwe.mitre.org/data/definitions/655.html"
      ], 
      "name": "Insufficient Psychological Acceptability", 
      "parent": "@feature", 
      "description": "The software has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose."
    }, 
    "@cwe_354_improper_validation_of_integrity_check_value": {
      "references": [
        "CWE 354", 
        "https://cwe.mitre.org/data/definitions/354.html"
      ], 
      "name": "Improper Validation of Integrity Check Value", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission. Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences."
    }, 
    "@cwe_113_improper_neutralization_of_crlf_sequences_in_http_headers_http_response_splitting": {
      "references": [
        "CWE 113", 
        "https://cwe.mitre.org/data/definitions/113.html"
      ], 
      "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives data from an upstream component, but does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers. Including unvalidated data in an HTTP header allows an attacker to specify the entirety of the HTTP response rendered by the browser. When an HTTP request contains unexpected CR carriage return, also given by 0d or r and LF line feed, also given by 0a or n characters the server may respond with an output stream that is interpreted as two different HTTP responses instead of one . An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks..HTTP response splitting weaknesses may be present when:"
    }, 
    "@cwe_151_improper_neutralization_of_comment_delimiters": {
      "references": [
        "CWE 151", 
        "https://cwe.mitre.org/data/definitions/151.html"
      ], 
      "name": "Improper Neutralization of Comment Delimiters", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component."
    }, 
    "@cwe_524_information_exposure_through_caching": {
      "references": [
        "CWE 524", 
        "https://cwe.mitre.org/data/definitions/524.html"
      ], 
      "name": "Information Exposure Through Caching", 
      "parent": "@insecure_session_management", 
      "description": "The application uses a cache to maintain a pool of objects, threads, connections, pages, or passwords to minimize the time it takes to access them or the resources to which they connect. If implemented improperly, these caches can allow access to unauthorized information or cause a denial of service vulnerability."
    }, 
    "@cwe_284_improper_access_control": {
      "references": [
        "CWE 284", 
        "https://cwe.mitre.org/data/definitions/284.html"
      ], 
      "name": "Improper Access Control", 
      "parent": "@access_management", 
      "description": "The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor. Access control involves the use of several protection mechanisms such as authentication proving the identity of an actor authorization ensuring that a given actor can access a resource , and accountability tracking of activities that were performed . When any mechanism is not applied or otherwise fails, attackers can compromise the security of the software by gaining privileges, reading sensitive information, executing commands, evading detection, etc..There are two distinct behaviors that can introduce access control weaknesses:"
    }, 
    "@cwe_43_path_equivalence_filename_multiple_trailing_dot": {
      "references": [
        "CWE 43", 
        "https://cwe.mitre.org/data/definitions/43.html"
      ], 
      "name": "Path Equivalence: 'filename....' (Multiple Trailing Dot)", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of multiple trailing dot filedir.... without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_489_leftover_debug_code": {
      "references": [
        "CWE 489", 
        "https://cwe.mitre.org/data/definitions/489.html"
      ], 
      "name": "Leftover Debug Code", 
      "parent": "@unexpected_entry_points", 
      "description": "The application can be deployed with active debugging code that can create unintended entry points. A common development practice is to add back door code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the application. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the application."
    }, 
    "@cwe_104_struts_form_bean_does_not_extend_validation_class": {
      "references": [
        "CWE 104", 
        "https://cwe.mitre.org/data/definitions/104.html"
      ], 
      "name": "Struts: Form Bean Does Not Extend Validation Class", 
      "parent": "@tainted_input_to_command", 
      "description": "If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation."
    }, 
    "@cwe_484_omitted_break_statement_in_switch": {
      "references": [
        "CWE 484", 
        "https://cwe.mitre.org/data/definitions/484.html"
      ], 
      "name": "Omitted Break Statement in Switch", 
      "parent": "@unchecked_status_condition", 
      "description": "The program omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition. This can lead to critical code executing in situations where it should not."
    }, 
    "@cwe_316_cleartext_storage_of_sensitive_information_in_memory": {
      "references": [
        "CWE 316", 
        "https://cwe.mitre.org/data/definitions/316.html"
      ], 
      "name": "Cleartext Storage of Sensitive Information in Memory", 
      "parent": "@exposed_data", 
      "description": "The application stores sensitive information in cleartext in memory. The sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the application crashes, or if the programmer does not properly clear the memory before freeing it..It could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness."
    }, 
    "@cwe_272_least_privilege_violation": {
      "references": [
        "CWE 272", 
        "https://cwe.mitre.org/data/definitions/272.html"
      ], 
      "name": "Least Privilege Violation", 
      "parent": "@privilege", 
      "description": "The elevated privilege level required to perform operations such as chroot should be dropped immediately after the operation is performed."
    }, 
    "@cwe_324_use_of_a_key_past_its_expiration_date": {
      "references": [
        "CWE 324", 
        "https://cwe.mitre.org/data/definitions/324.html"
      ], 
      "name": "Use of a Key Past its Expiration Date", 
      "parent": "@weak_cryptography", 
      "description": "The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key. While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength."
    }, 
    "@cwe_213_intentional_information_exposure": {
      "references": [
        "CWE 213", 
        "https://cwe.mitre.org/data/definitions/213.html"
      ], 
      "name": "Intentional Information Exposure", 
      "parent": "@exposed_data", 
      "description": "A product s design or configuration explicitly requires the publication of information that could be regarded as sensitive by an administrator."
    }, 
    "@cwe_671_lack_of_administrator_control_over_security": {
      "references": [
        "CWE 671", 
        "https://cwe.mitre.org/data/definitions/671.html"
      ], 
      "name": "Lack of Administrator Control over Security", 
      "parent": "@architecture", 
      "description": "The product uses security features in a way that prevents the product s administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator. If the product s administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product s developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent."
    }, 
    "@cwe_134_use_of_externally_controlled_format_string": {
      "references": [
        "CWE 134", 
        "https://cwe.mitre.org/data/definitions/134.html"
      ], 
      "name": "Use of Externally-Controlled Format String", 
      "parent": "@tainted_input_to_command", 
      "description": "The software uses a function that accepts a format string as an argument, but the format string originates from an external source. When an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems..It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted e.g. only contained in library files that are only modifiable by the system administrator , then the external control might not itself pose a vulnerability."
    }, 
    "@cwe_57_path_equivalence_fakedirrealdirfilename": {
      "references": [
        "CWE 57", 
        "https://cwe.mitre.org/data/definitions/57.html"
      ], 
      "name": "Path Equivalence: 'fakedir/../realdir/filename'", 
      "parent": "@path_traversal", 
      "description": "The software contains protection mechanisms to restrict access to realdir filename , but it constructs pathnames using external input in the form of fakedir .. realdir filename that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file."
    }, 
    "@cwe_542_information_exposure_through_cleanup_log_files": {
      "references": [
        "CWE 542", 
        "https://cwe.mitre.org/data/definitions/542.html"
      ], 
      "name": "Information Exposure Through Cleanup Log Files", 
      "parent": "@exposed_data", 
      "description": "The application does not properly protect or delete a log file related to cleanup."
    }, 
    "@memory_management": {
      "refs": [
        "891"
      ], 
      "name": "Memory Management", 
      "parent": "@sfp"
    }, 
    "@cwe_414_missing_lock_check": {
      "references": [
        "CWE 414", 
        "https://cwe.mitre.org/data/definitions/414.html"
      ], 
      "name": "Missing Lock Check", 
      "parent": "@missing_lock", 
      "description": "A product does not check to see if a lock is present before performing sensitive operations on a resource."
    }, 
    "@cwe_477_use_of_obsolete_functions": {
      "references": [
        "CWE 477", 
        "https://cwe.mitre.org/data/definitions/477.html"
      ], 
      "name": "Use of Obsolete Functions", 
      "parent": "@use_of_an_improper_api", 
      "description": "The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained. As programming languages evolve, functions occasionally become obsolete due to:.Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way."
    }, 
    "@faulty_resource_use": {
      "refs": [
        "983"
      ], 
      "name": "Faulty Resource Use", 
      "parent": "@resource_management"
    }, 
    "@cwe_683_function_call_with_incorrect_order_of_arguments": {
      "references": [
        "CWE 683", 
        "https://cwe.mitre.org/data/definitions/683.html"
      ], 
      "name": "Function Call With Incorrect Order of Arguments", 
      "parent": "@glitch_in_computation", 
      "description": "The software calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses. While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers or types of arguments, such as format strings in C. It also can occur in languages or environments that do not enforce strong typing."
    }, 
    "@cwe_522_insufficiently_protected_credentials": {
      "references": [
        "CWE 522", 
        "https://cwe.mitre.org/data/definitions/522.html"
      ], 
      "name": "Insufficiently Protected Credentials", 
      "parent": "@exposed_data", 
      "description": "This weakness occurs when the application transmits or stores authentication credentials and uses an insecure method that is susceptible to unauthorized interception and or retrieval."
    }, 
    "@cwe_589_call_to_non_ubiquitous_api": {
      "references": [
        "CWE 589", 
        "https://cwe.mitre.org/data/definitions/589.html"
      ], 
      "name": "Call to Non-ubiquitous API", 
      "parent": "@use_of_an_improper_api", 
      "description": "The software uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences. Some functions that offer security features supported by the OS are not available on all versions of the OS in common use. Likewise, functions are often deprecated or made obsolete for security reasons and should not be used."
    }, 
    "@cwe_303_incorrect_implementation_of_authentication_algorithm": {
      "references": [
        "CWE 303", 
        "https://cwe.mitre.org/data/definitions/303.html"
      ], 
      "name": "Incorrect Implementation of Authentication Algorithm", 
      "parent": "@authentication_bypass", 
      "description": "The requirements for the software dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect. This incorrect implementation may allow authentication to be bypassed."
    }, 
    "@cwe_396_declaration_of_catch_for_generic_exception": {
      "references": [
        "CWE 396", 
        "https://cwe.mitre.org/data/definitions/396.html"
      ], 
      "name": "Declaration of Catch for Generic Exception", 
      "parent": "@ambiguous_exception_type", 
      "description": "Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities. Multiple catch blocks can get ugly and repetitive, but condensing catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of Java s typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention."
    }, 
    "@cwe_333_improper_handling_of_insufficient_entropy_in_trng": {
      "references": [
        "CWE 333", 
        "https://cwe.mitre.org/data/definitions/333.html"
      ], 
      "name": "Improper Handling of Insufficient Entropy in TRNG", 
      "parent": "@predictability", 
      "description": "True random number generators TRNG generally have a limited source of entropy and therefore can fail or block. The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security."
    }, 
    "@cwe_80_improper_neutralization_of_script_related_html_tags_in_a_web_page_basic_xss": {
      "references": [
        "CWE 80", 
        "https://cwe.mitre.org/data/definitions/80.html"
      ], 
      "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as , , and that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages. This may allow such characters to be treated as control characters, which are executed client-side in the context of the user s session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user."
    }, 
    "@cwe_6_j2ee_misconfiguration_insufficient_session_id_length": {
      "references": [
        "CWE 6", 
        "https://cwe.mitre.org/data/definitions/6.html"
      ], 
      "name": "J2EE Misconfiguration: Insufficient Session-ID Length", 
      "parent": "@insecure_session_management", 
      "description": "The J2EE application is configured to use an insufficient session ID length. If an attacker can guess or steal a session ID, then he she may be able to take over the user s session called session hijacking . The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID."
    }, 
    "@cwe_636_not_failing_securely_failing_open": {
      "references": [
        "CWE 636", 
        "https://cwe.mitre.org/data/definitions/636.html"
      ], 
      "name": "Not Failing Securely ('Failing Open')", 
      "parent": "@incorrect_exception_behavior", 
      "description": "When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions. By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to fail functional to minimize administration and support costs, instead of failing safe. "
    }, 
    "@cwe_621_variable_extraction_error": {
      "references": [
        "CWE 621", 
        "https://cwe.mitre.org/data/definitions/621.html"
      ], 
      "name": "Variable Extraction Error", 
      "parent": "@tainted_input_to_command", 
      "description": "The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables. For example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract or import_request_variables without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals..Similar functionality is possible in other interpreted languages, including custom languages."
    }, 
    "@cwe_26_path_traversal_dirfilename": {
      "references": [
        "CWE 26", 
        "https://cwe.mitre.org/data/definitions/26.html"
      ], 
      "name": "Path Traversal: '/dir/../filename'", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize dir .. filename sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory..The dir .. filename manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for .. at the beginning of the input, so a .. can bypass that check."
    }, 
    "@cwe_654_reliance_on_a_single_factor_in_a_security_decision": {
      "references": [
        "CWE 654", 
        "https://cwe.mitre.org/data/definitions/654.html"
      ], 
      "name": "Reliance on a Single Factor in a Security Decision", 
      "parent": "@architecture", 
      "description": "A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality."
    }, 
    "@cwe_556_aspnet_misconfiguration_use_of_identity_impersonation": {
      "references": [
        "CWE 556", 
        "https://cwe.mitre.org/data/definitions/556.html"
      ], 
      "name": "ASP.NET Misconfiguration: Use of Identity Impersonation", 
      "parent": "@insecure_authentication_policy", 
      "description": "Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges. The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration."
    }, 
    "@cwe_527_exposure_of_cvs_repository_to_an_unauthorized_control_sphere": {
      "references": [
        "CWE 527", 
        "https://cwe.mitre.org/data/definitions/527.html"
      ], 
      "name": "Exposure of CVS Repository to an Unauthorized Control Sphere", 
      "parent": "@exposed_data", 
      "description": "The product stores a CVS repository in a directory or other container that is accessible to actors outside of the intended control sphere. Information contained within a CVS subdirectory on a web server or other server could be recovered by an attacker and used for malicious purposes. This information may include usernames, filenames, path root, and IP addresses."
    }, 
    "@cwe_243_creation_of_chroot_jail_without_changing_working_directory": {
      "references": [
        "CWE 243", 
        "https://cwe.mitre.org/data/definitions/243.html"
      ], 
      "name": "Creation of chroot Jail Without Changing Working Directory", 
      "parent": "@failed_chroot_jail", 
      "description": "The program uses the chroot system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail. Improper use of chroot may allow attackers to escape from the chroot jail. The chroot function call does not change the process s current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot has been called."
    }, 
    "@cwe_73_external_control_of_file_name_or_path": {
      "references": [
        "CWE 73", 
        "https://cwe.mitre.org/data/definitions/73.html"
      ], 
      "name": "External Control of File Name or Path", 
      "parent": "@path_traversal", 
      "description": "The software allows user input to control or influence paths or file names that are used in filesystem operations. This could allow an attacker to access or modify system files or other files that are critical to the application..Path manipulation errors occur when the following two conditions are met:.For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker."
    }, 
    "@cwe_349_acceptance_of_extraneous_untrusted_data_with_trusted_data": {
      "references": [
        "CWE 349", 
        "https://cwe.mitre.org/data/definitions/349.html"
      ], 
      "name": "Acceptance of Extraneous Untrusted Data With Trusted Data", 
      "parent": "@design", 
      "description": "The software, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted."
    }, 
    "@cwe_312_cleartext_storage_of_sensitive_information": {
      "references": [
        "CWE 312", 
        "https://cwe.mitre.org/data/definitions/312.html"
      ], 
      "name": "Cleartext Storage of Sensitive Information", 
      "parent": "@exposed_data", 
      "description": "The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere. Because the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."
    }, 
    "@cwe_257_storing_passwords_in_a_recoverable_format": {
      "references": [
        "CWE 257", 
        "https://cwe.mitre.org/data/definitions/257.html"
      ], 
      "name": "Storing Passwords in a Recoverable Format", 
      "parent": "@exposed_data", 
      "description": "The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts."
    }, 
    "@cwe_687_function_call_with_incorrectly_specified_argument_value": {
      "references": [
        "CWE 687", 
        "https://cwe.mitre.org/data/definitions/687.html"
      ], 
      "name": "Function Call With Incorrectly Specified Argument Value", 
      "parent": "@glitch_in_computation", 
      "description": "The software calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses."
    }, 
    "@cwe_545_use_of_dynamic_class_loading": {
      "references": [
        "CWE 545", 
        "https://cwe.mitre.org/data/definitions/545.html"
      ], 
      "name": "Use of Dynamic Class Loading", 
      "parent": "@tainted_input_to_environment", 
      "description": "Dynamically loaded code has the potential to be malicious."
    }, 
    "@cwe_550_information_exposure_through_server_error_message": {
      "references": [
        "CWE 550", 
        "https://cwe.mitre.org/data/definitions/550.html"
      ], 
      "name": "Information Exposure Through Server Error Message", 
      "parent": "@exposed_data", 
      "description": "Certain conditions, such as network failure, will cause a server error message to be displayed. While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems."
    }, 
    "@cwe_651_information_exposure_through_wsdl_file": {
      "references": [
        "CWE 651", 
        "https://cwe.mitre.org/data/definitions/651.html"
      ], 
      "name": "Information Exposure Through WSDL File", 
      "parent": "@other_exposures", 
      "description": "The Web services architecture may require exposing a WSDL file that contains information on the publicly accessible services and how callers of these services should interact with them e.g. what parameters they expect and what types they return . An information exposure may occur if any of the following apply:"
    }, 
    "@cwe_71_apple_ds_store": {
      "references": [
        "CWE 71", 
        "https://cwe.mitre.org/data/definitions/71.html"
      ], 
      "name": "Apple '.DS_Store'", 
      "parent": "@link_in_resource_name_resolution", 
      "description": "Software operating in a MAC OS environment, where .DS_Store is in effect, must carefully manage hard links, otherwise an attacker may be able to leverage a hard link from .DS_Store to overwrite arbitrary files and gain privileges."
    }, 
    "@cwe_409_improper_handling_of_highly_compressed_data_data_amplification": {
      "references": [
        "CWE 409", 
        "https://cwe.mitre.org/data/definitions/409.html"
      ], 
      "name": "Improper Handling of Highly Compressed Data (Data Amplification)", 
      "parent": "@design", 
      "description": "The software does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output. An example of data amplification is a decompression bomb, a small ZIP file that can produce a large amount of data when it is decompressed."
    }, 
    "@cwe_130_improper_handling_of_length_parameter_inconsistency_": {
      "references": [
        "CWE 130", 
        "https://cwe.mitre.org/data/definitions/130.html"
      ], 
      "name": "Improper Handling of Length Parameter Inconsistency ", 
      "parent": "@tainted_input_to_command", 
      "description": "The software parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data. If an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code."
    }, 
    "@cwe_51_path_equivalence_multipleinternalslash": {
      "references": [
        "CWE 51", 
        "https://cwe.mitre.org/data/definitions/51.html"
      ], 
      "name": "Path Equivalence: '/multiple//internal/slash'", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of multiple internal slash multiple internal slash without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_138_improper_neutralization_of_special_elements": {
      "references": [
        "CWE 138", 
        "https://cwe.mitre.org/data/definitions/138.html"
      ], 
      "name": "Improper Neutralization of Special Elements", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component. Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If software does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol less than as meaning read input from a file ."
    }, 
    "@cwe_82_improper_neutralization_of_script_in_attributes_of_img_tags_in_a_web_page": {
      "references": [
        "CWE 82", 
        "https://cwe.mitre.org/data/definitions/82.html"
      ], 
      "name": "Improper Neutralization of Script in Attributes of IMG Tags in a Web Page", 
      "parent": "@tainted_input_to_command", 
      "description": "The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute. Attackers can embed XSS exploits into the values for IMG attributes e.g. SRC that is streamed and then executed in a victim s browser. Note that when the page is loaded into a user s browsers, the exploit will automatically execute."
    }, 
    "@cwe_756_missing_custom_error_page": {
      "references": [
        "CWE 756", 
        "https://cwe.mitre.org/data/definitions/756.html"
      ], 
      "name": "Missing Custom Error Page", 
      "parent": "@exposed_data", 
      "description": "The software does not return custom error pages to the user, possibly exposing sensitive information."
    }, 
    "@cwe_558_use_of_getlogin_in_multithreaded_application": {
      "references": [
        "CWE 558", 
        "https://cwe.mitre.org/data/definitions/558.html"
      ], 
      "name": "Use of getlogin() in Multithreaded Application", 
      "parent": "@use_of_an_improper_api", 
      "description": "The application uses the getlogin function in a multithreaded context, potentially causing it to return incorrect values. The getlogin function returns a pointer to a string that contains the name of the user associated with the calling process. The function is not reentrant, meaning that if it is called from another process, the contents are not locked out and the value of the string can be changed by another process. This makes it very risky to use because the username can be changed by other processes, so the results of the function cannot be trusted."
    }, 
    "@cwe_140_improper_neutralization_of_delimiters": {
      "references": [
        "CWE 140", 
        "https://cwe.mitre.org/data/definitions/140.html"
      ], 
      "name": "Improper Neutralization of Delimiters", 
      "parent": "@tainted_input_to_command", 
      "description": "The software does not neutralize or incorrectly neutralizes delimiters."
    }, 
    "@cwe_342_predictable_exact_value_from_previous_values": {
      "references": [
        "CWE 342", 
        "https://cwe.mitre.org/data/definitions/342.html"
      ], 
      "name": "Predictable Exact Value from Previous Values", 
      "parent": "@predictability", 
      "description": "An exact value or random number can be precisely predicted by observing previous values."
    }, 
    "@cwe_236_improper_handling_of_undefined_parameters": {
      "references": [
        "CWE 236", 
        "https://cwe.mitre.org/data/definitions/236.html"
      ], 
      "name": "Improper Handling of Undefined Parameters", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product."
    }, 
    "@cwe_111_direct_use_of_unsafe_jni": {
      "references": [
        "CWE 111", 
        "https://cwe.mitre.org/data/definitions/111.html"
      ], 
      "name": "Direct Use of Unsafe JNI", 
      "parent": "@use_of_an_improper_api", 
      "description": "When a Java application uses the Java Native Interface JNI to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java. Many safety features that programmers may take for granted simply do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking."
    }, 
    "@cwe_231_improper_handling_of_extra_values": {
      "references": [
        "CWE 231", 
        "https://cwe.mitre.org/data/definitions/231.html"
      ], 
      "name": "Improper Handling of Extra Values", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not handle or incorrectly handles when more values are provided than expected."
    }, 
    "@malware": {
      "refs": [
        "904"
      ], 
      "name": "Malware", 
      "parent": "@sfp"
    }, 
    "@cwe_506_embedded_malicious_code": {
      "references": [
        "CWE 506", 
        "https://cwe.mitre.org/data/definitions/506.html"
      ], 
      "name": "Embedded Malicious Code", 
      "parent": "@malware", 
      "description": "The application contains code that appears to be malicious in nature. Malicious flaws have acquired colorful names, including Trojan horse, trapdoor, timebomb, and logic-bomb. A developer might insert malicious code with the intent to subvert the security of an application or its host system at some time in the future. It generally refers to a program that performs a useful service but exploits rights of the program s user in a way the user does not intend."
    }, 
    "@cwe_214_information_exposure_through_process_environment": {
      "references": [
        "CWE 214", 
        "https://cwe.mitre.org/data/definitions/214.html"
      ], 
      "name": "Information Exposure Through Process Environment", 
      "parent": "@exposed_data", 
      "description": "A process is invoked with sensitive arguments, environment variables, or other elements that can be seen by other processes on the operating system. Many operating systems allow a user to list information about processes that are owned by other users. This information could include command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the software or related resources."
    }, 
    "@cwe_641_improper_restriction_of_names_for_files_and_other_resources": {
      "references": [
        "CWE 641", 
        "https://cwe.mitre.org/data/definitions/641.html"
      ], 
      "name": "Improper Restriction of Names for Files and Other Resources", 
      "parent": "@tainted_input_to_command", 
      "description": "The application constructs the name of a file or other resource using input from an upstream component, but does not restrict or incorrectly restricts the resulting name. This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client s browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible."
    }, 
    "@memory_access": {
      "refs": [
        "890"
      ], 
      "name": "Memory Access", 
      "parent": "@sfp"
    }, 
    "@cwe_462_duplicate_key_in_associative_list_alist": {
      "references": [
        "CWE 462", 
        "https://cwe.mitre.org/data/definitions/462.html"
      ], 
      "name": "Duplicate Key in Associative List (Alist)", 
      "parent": "@design", 
      "description": "Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error. A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed."
    }, 
    "@cwe_105_struts_form_field_without_validator": {
      "references": [
        "CWE 105", 
        "https://cwe.mitre.org/data/definitions/105.html"
      ], 
      "name": "Struts: Form Field Without Validator", 
      "parent": "@tainted_input_to_command", 
      "description": "The application has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation. Omitting validation for even a single input field may give attackers the leeway they need to compromise the application. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack."
    }, 
    "@cwe_582_array_declared_public_final_and_static": {
      "references": [
        "CWE 582", 
        "https://cwe.mitre.org/data/definitions/582.html"
      ], 
      "name": "Array Declared Public, Final, and Static", 
      "parent": "@unexpected_entry_points", 
      "description": "The program declares an array public, final, and static, which is not sufficient to prevent the array s contents from being modified. Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug."
    }, 
    "@privilege": {
      "refs": [
        "901"
      ], 
      "name": "Privilege", 
      "parent": "@sfp"
    }, 
    "@cwe_11_aspnet_misconfiguration_creating_debug_binary": {
      "references": [
        "CWE 11", 
        "https://cwe.mitre.org/data/definitions/11.html"
      ], 
      "name": "ASP.NET Misconfiguration: Creating Debug Binary", 
      "parent": "@exposed_data", 
      "description": "Debugging messages help attackers learn about the system and plan a form of attack. ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production."
    }, 
    "@unused_entities": {
      "refs": [
        "886"
      ], 
      "name": "Unused entities", 
      "parent": "@sfp"
    }, 
    "@cwe_89_improper_neutralization_of_special_elements_used_in_an_sql_command_sql_injection": {
      "references": [
        "CWE 89", 
        "https://cwe.mitre.org/data/definitions/89.html"
      ], 
      "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands..SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes."
    }, 
    "@cwe_407_algorithmic_complexity": {
      "references": [
        "CWE 407", 
        "https://cwe.mitre.org/data/definitions/407.html"
      ], 
      "name": "Algorithmic Complexity", 
      "parent": "@design", 
      "description": "An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached."
    }, 
    "@cwe_160_improper_neutralization_of_leading_special_elements": {
      "references": [
        "CWE 160", 
        "https://cwe.mitre.org/data/definitions/160.html"
      ], 
      "name": "Improper Neutralization of Leading Special Elements", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component. As data is parsed, improperly handled leading special elements may cause the process to take unexpected actions that result in an attack."
    }, 
    "@exposed_data": {
      "refs": [
        "963"
      ], 
      "name": "Exposed Data", 
      "parent": "@information_leak"
    }, 
    "@cwe_15_external_control_of_system_or_configuration_setting": {
      "references": [
        "CWE 15", 
        "https://cwe.mitre.org/data/definitions/15.html"
      ], 
      "name": "External Control of System or Configuration Setting", 
      "parent": "@tainted_input_to_variable", 
      "description": "One or more system settings or configuration elements can be externally controlled by a user. Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways."
    }, 
    "@cwe_650_trusting_http_permission_methods_on_the_server_side": {
      "references": [
        "CWE 650", 
        "https://cwe.mitre.org/data/definitions/650.html"
      ], 
      "name": "Trusting HTTP Permission Methods on the Server Side", 
      "parent": "@insecure_resource_access", 
      "description": "The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state. An application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation, believing that it will be enough to prevent unintended resource alterations. Even though the HTTP GET specification requires that GET requests should not have side effects, there is nothing in the HTTP protocol itself that prevents the HTTP GET method from performing more than just query of the data. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. Whenever that happens however, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, and POST methods have the power to alter the representation of the resource being accessed in the request."
    }, 
    "@cwe_165_improper_neutralization_of_multiple_internal_special_elements": {
      "references": [
        "CWE 165", 
        "https://cwe.mitre.org/data/definitions/165.html"
      ], 
      "name": "Improper Neutralization of Multiple Internal Special Elements", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component. As data is parsed, improperly handled multiple internal special elements may cause the process to take unexpected actions that result in an attack."
    }, 
    "@cwe_610_externally_controlled_reference_to_a_resource_in_another_sphere": {
      "references": [
        "CWE 610", 
        "https://cwe.mitre.org/data/definitions/610.html"
      ], 
      "name": "Externally Controlled Reference to a Resource in Another Sphere", 
      "parent": "@link_in_resource_name_resolution", 
      "description": "The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere."
    }, 
    "@cwe_613_insufficient_session_expiration": {
      "references": [
        "CWE 613", 
        "https://cwe.mitre.org/data/definitions/613.html"
      ], 
      "name": "Insufficient Session Expiration", 
      "parent": "@insecure_authentication_policy", 
      "description": "According to WASC, Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization. "
    }, 
    "@channel_attack": {
      "refs": [
        "956"
      ], 
      "name": "Channel Attack", 
      "parent": "@channel"
    }, 
    "@cwe_463_deletion_of_data_structure_sentinel": {
      "references": [
        "CWE 463", 
        "https://cwe.mitre.org/data/definitions/463.html"
      ], 
      "name": "Deletion of Data Structure Sentinel", 
      "parent": "@design", 
      "description": "The accidental deletion of a data-structure sentinel can cause serious programming logic problems. Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety."
    }, 
    "@cwe_107_struts_unused_validation_form": {
      "references": [
        "CWE 107", 
        "https://cwe.mitre.org/data/definitions/107.html"
      ], 
      "name": "Struts: Unused Validation Form", 
      "parent": "@tainted_input_to_command", 
      "description": "An unused validation form indicates that validation logic is not up-to-date. It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form."
    }, 
    "@cwe_125_out_of_bounds_read": {
      "references": [
        "CWE 125", 
        "https://cwe.mitre.org/data/definitions/125.html"
      ], 
      "name": "Out-of-bounds Read", 
      "parent": "@faulty_buffer_access", 
      "description": "The software reads data past the end, or before the beginning, of the intended buffer. This typically occurs when the pointer or its index is incremented or decremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in corruption of sensitive information, a crash, or code execution among other things."
    }, 
    "@cwe_241_improper_handling_of_unexpected_data_type": {
      "references": [
        "CWE 241", 
        "https://cwe.mitre.org/data/definitions/241.html"
      ], 
      "name": "Improper Handling of Unexpected Data Type", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit 0-9 but is provided with a letter A-Z ."
    }, 
    "@cwe_305_authentication_bypass_by_primary_weakness": {
      "references": [
        "CWE 305", 
        "https://cwe.mitre.org/data/definitions/305.html"
      ], 
      "name": "Authentication Bypass by Primary Weakness", 
      "parent": "@authentication_bypass", 
      "description": "The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error."
    }, 
    "@cwe_619_dangling_database_cursor_cursor_injection": {
      "references": [
        "CWE 619", 
        "https://cwe.mitre.org/data/definitions/619.html"
      ], 
      "name": "Dangling Database Cursor ('Cursor Injection')", 
      "parent": "@tainted_input_to_command", 
      "description": "If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor dangling.  For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor s role, but SQL injection attacks are commonly possible."
    }, 
    "@cwe_179_incorrect_behavior_order_early_validation": {
      "references": [
        "CWE 179", 
        "https://cwe.mitre.org/data/definitions/179.html"
      ], 
      "name": "Incorrect Behavior Order: Early Validation", 
      "parent": "@faulty_input_transformation", 
      "description": "The software validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification. Software needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing."
    }, 
    "@cwe_38_path_traversal_absolutepathnamehere": {
      "references": [
        "CWE 38", 
        "https://cwe.mitre.org/data/definitions/38.html"
      ], 
      "name": "Path Traversal: '\\absolute\\pathname\\here'", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts input in the form of a backslash absolute path absolute pathname here without appropriate validation can allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_49_path_equivalence_filename_trailing_slash": {
      "references": [
        "CWE 49", 
        "https://cwe.mitre.org/data/definitions/49.html"
      ], 
      "name": "Path Equivalence: 'filename/' (Trailing Slash)", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of trailing slash filedir without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_755_improper_handling_of_exceptional_conditions": {
      "references": [
        "CWE 755", 
        "https://cwe.mitre.org/data/definitions/755.html"
      ], 
      "name": "Improper Handling of Exceptional Conditions", 
      "parent": "@unchecked_status_condition", 
      "description": "The software does not handle or incorrectly handles an exceptional condition."
    }, 
    "@protocol_error": {
      "refs": [
        "957"
      ], 
      "name": "Protocol Error", 
      "parent": "@channel"
    }, 
    "@cwe_148_improper_neutralization_of_input_leaders": {
      "references": [
        "CWE 148", 
        "https://cwe.mitre.org/data/definitions/148.html"
      ], 
      "name": "Improper Neutralization of Input Leaders", 
      "parent": "@tainted_input_to_command", 
      "description": "The application does not properly handle when a leading character or sequence leader is missing or malformed, or if multiple leaders are used when only one should be allowed."
    }, 
    "@cwe_672_operation_on_a_resource_after_expiration_or_release": {
      "references": [
        "CWE 672", 
        "https://cwe.mitre.org/data/definitions/672.html"
      ], 
      "name": "Operation on a Resource after Expiration or Release", 
      "parent": "@faulty_resource_use", 
      "description": "The software uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked."
    }, 
    "@cwe_649_reliance_on_obfuscation_or_encryption_of_security_relevant_inputs_without_integrity_checking": {
      "references": [
        "CWE 649", 
        "https://cwe.mitre.org/data/definitions/649.html"
      ], 
      "name": "Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking", 
      "parent": "@architecture", 
      "description": "The software uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the software does not use integrity checks to detect if those inputs have been modified. When an application relies on obfuscation or incorrectly applied weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens parameters for integrity, the application is vulnerable to an attack where an adversary blindly traverses the space of possible values of the said token parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate his or her privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service."
    }, 
    "@cwe_343_predictable_value_range_from_previous_values": {
      "references": [
        "CWE 343", 
        "https://cwe.mitre.org/data/definitions/343.html"
      ], 
      "name": "Predictable Value Range from Previous Values", 
      "parent": "@predictability", 
      "description": "The software s random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated. The output of a random number generator should not be predictable based on observations of previous values. In some cases, an attacker cannot predict the exact value that will be produced next, but can narrow down the possibilities significantly. This reduces the amount of effort to perform a brute force attack. For example, suppose the product generates random numbers between 1 and 100, but it always produces a larger value until it reaches 100. If the generator produces an 80, then the attacker knows that the next value will be somewhere between 81 and 100. Instead of 100 possibilities, the attacker only needs to consider 20."
    }, 
    "@cwe_175_improper_handling_of_mixed_encoding": {
      "references": [
        "CWE 175", 
        "https://cwe.mitre.org/data/definitions/175.html"
      ], 
      "name": "Improper Handling of Mixed Encoding", 
      "parent": "@faulty_input_transformation", 
      "description": "The software does not properly handle when the same input uses several different mixed encodings."
    }, 
    "@cwe_318_cleartext_storage_of_sensitive_information_in_executable": {
      "references": [
        "CWE 318", 
        "https://cwe.mitre.org/data/definitions/318.html"
      ], 
      "name": "Cleartext Storage of Sensitive Information in Executable", 
      "parent": "@exposed_data", 
      "description": "The application stores sensitive information in cleartext in an executable. Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."
    }, 
    "@cwe_164_improper_neutralization_of_internal_special_elements": {
      "references": [
        "CWE 164", 
        "https://cwe.mitre.org/data/definitions/164.html"
      ], 
      "name": "Improper Neutralization of Internal Special Elements", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component. As data is parsed, improperly handled internal special elements may cause the process to take unexpected actions that result in an attack."
    }, 
    "@cwe_83_improper_neutralization_of_script_in_attributes_in_a_web_page": {
      "references": [
        "CWE 83", 
        "https://cwe.mitre.org/data/definitions/83.html"
      ], 
      "name": "Improper Neutralization of Script in Attributes in a Web Page", 
      "parent": "@tainted_input_to_command", 
      "description": "The software does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style."
    }, 
    "@cwe_59_improper_link_resolution_before_file_access_link_following": {
      "references": [
        "CWE 59", 
        "https://cwe.mitre.org/data/definitions/59.html"
      ], 
      "name": "Improper Link Resolution Before File Access ('Link Following')", 
      "parent": "@link_in_resource_name_resolution", 
      "description": "The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource."
    }, 
    "@cwe_529_exposure_of_access_control_list_files_to_an_unauthorized_control_sphere": {
      "references": [
        "CWE 529", 
        "https://cwe.mitre.org/data/definitions/529.html"
      ], 
      "name": "Exposure of Access Control List Files to an Unauthorized Control Sphere", 
      "parent": "@exposed_data", 
      "description": "The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere. Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched."
    }, 
    "@cwe_147_improper_neutralization_of_input_terminators": {
      "references": [
        "CWE 147", 
        "https://cwe.mitre.org/data/definitions/147.html"
      ], 
      "name": "Improper Neutralization of Input Terminators", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component. For example, a . in SMTP signifies the end of mail message data, whereas a null character can be used for the end of a string."
    }, 
    "@implementation": {
      "refs": [
        "978"
      ], 
      "name": "Implementation", 
      "parent": "@other"
    }, 
    "@cwe_30_path_traversal_dirfilename": {
      "references": [
        "CWE 30", 
        "https://cwe.mitre.org/data/definitions/30.html"
      ], 
      "name": "Path Traversal: '\\dir\\..\\filename'", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize dir .. filename leading backslash dot dot sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory..This is similar to CWE-26, except using instead of . The dir .. filename manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for .. at the beginning of the input, so a .. can bypass that check."
    }, 
    "@race_condition_window": {
      "refs": [
        "988"
      ], 
      "name": "Race Condition Window", 
      "parent": "@synchronization"
    }, 
    "@cwe_567_unsynchronized_access_to_shared_data_in_a_multithreaded_context": {
      "references": [
        "CWE 567", 
        "https://cwe.mitre.org/data/definitions/567.html"
      ], 
      "name": "Unsynchronized Access to Shared Data in a Multithreaded Context", 
      "parent": "@missing_lock", 
      "description": "The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes. Within servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable..Note that this weakness is not unique to servlets."
    }, 
    "@cwe_44_path_equivalence_filename_internal_dot": {
      "references": [
        "CWE 44", 
        "https://cwe.mitre.org/data/definitions/44.html"
      ], 
      "name": "Path Equivalence: 'file.name' (Internal Dot)", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of internal dot file.ordir without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@path_resolution": {
      "refs": [
        "893"
      ], 
      "name": "Path Resolution", 
      "parent": "@sfp"
    }, 
    "@cwe_298_improper_validation_of_certificate_expiration": {
      "references": [
        "CWE 298", 
        "https://cwe.mitre.org/data/definitions/298.html"
      ], 
      "name": "Improper Validation of Certificate Expiration", 
      "parent": "@digital_certificate", 
      "description": "A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age. When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost."
    }, 
    "@cwe_261_weak_cryptography_for_passwords": {
      "references": [
        "CWE 261", 
        "https://cwe.mitre.org/data/definitions/261.html"
      ], 
      "name": "Weak Cryptography for Passwords", 
      "parent": "@weak_cryptography", 
      "description": "Obscuring a password with a trivial encoding does not protect the password."
    }, 
    "@cwe_93_improper_neutralization_of_crlf_sequences_crlf_injection": {
      "references": [
        "CWE 93", 
        "https://cwe.mitre.org/data/definitions/93.html"
      ], 
      "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software uses CRLF carriage return line feeds as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs."
    }, 
    "@cwe_368_context_switching_race_condition": {
      "references": [
        "CWE 368", 
        "https://cwe.mitre.org/data/definitions/368.html"
      ], 
      "name": "Context Switching Race Condition", 
      "parent": "@missing_lock", 
      "description": "A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product s behavior during the switch. This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain."
    }, 
    "@cwe_584_return_inside_finally_block": {
      "references": [
        "CWE 584", 
        "https://cwe.mitre.org/data/definitions/584.html"
      ], 
      "name": "Return Inside Finally Block", 
      "parent": "@incorrect_exception_behavior", 
      "description": "The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded."
    }, 
    "@cwe_681_incorrect_conversion_between_numeric_types": {
      "references": [
        "CWE 681", 
        "https://cwe.mitre.org/data/definitions/681.html"
      ], 
      "name": "Incorrect Conversion between Numeric Types", 
      "parent": "@glitch_in_computation", 
      "description": "When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur."
    }, 
    "@cwe_260_password_in_configuration_file": {
      "references": [
        "CWE 260", 
        "https://cwe.mitre.org/data/definitions/260.html"
      ], 
      "name": "Password in Configuration File", 
      "parent": "@exposed_data", 
      "description": "The software stores a password in a configuration file that might be accessible to actors who do not know the password. This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing."
    }, 
    "@cwe_570_expression_is_always_false": {
      "references": [
        "CWE 570", 
        "https://cwe.mitre.org/data/definitions/570.html"
      ], 
      "name": "Expression is Always False", 
      "parent": "@glitch_in_computation", 
      "description": "The software contains an expression that will always evaluate to false."
    }, 
    "@risky_values": {
      "refs": [
        "885"
      ], 
      "name": "Risky Values", 
      "parent": "@sfp"
    }, 
    "@cwe_416_use_after_free": {
      "references": [
        "CWE 416", 
        "https://cwe.mitre.org/data/definitions/416.html"
      ], 
      "name": "Use After Free", 
      "parent": "@faulty_resource_use", 
      "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code. The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system s reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes:.In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process..If the newly allocated data chances to hold a class, in C for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved."
    }, 
    "@cwe_281_improper_preservation_of_permissions": {
      "references": [
        "CWE 281", 
        "https://cwe.mitre.org/data/definitions/281.html"
      ], 
      "name": "Improper Preservation of Permissions", 
      "parent": "@insecure_resource_permissions", 
      "description": "The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended."
    }, 
    "@cwe_362_concurrent_execution_using_shared_resource_with_improper_synchronization_race_condition": {
      "references": [
        "CWE 362", 
        "https://cwe.mitre.org/data/definitions/362.html"
      ], 
      "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')", 
      "parent": "@race_condition_window", 
      "description": "The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently. This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider..A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc..A race condition violates these properties, which are closely related:.A race condition exists when an interfering code sequence can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single x statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read the original value of x , followed by a computation x 1 , followed by a write save the result to x ..The interfering code sequence could be trusted or untrusted. A trusted interfering code sequence occurs within the program; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable program."
    }, 
    "@cwe_366_race_condition_within_a_thread": {
      "references": [
        "CWE 366", 
        "https://cwe.mitre.org/data/definitions/366.html"
      ], 
      "name": "Race Condition within a Thread", 
      "parent": "@missing_lock", 
      "description": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined."
    }, 
    "@cwe_590_free_of_memory_not_on_the_heap": {
      "references": [
        "CWE 590", 
        "https://cwe.mitre.org/data/definitions/590.html"
      ], 
      "name": "Free of Memory not on the Heap", 
      "parent": "@faulty_memory_release", 
      "description": "The application calls free on a pointer to memory that was not allocated using associated heap allocation functions such as malloc , calloc , or realloc . When free is called on an invalid pointer, the program s memory management data structures may become corrupted. This corruption can cause the program to crash or, in some circumstances, an attacker may be able to cause free to operate on controllable memory locations to modify critical program variables or execute code."
    }, 
    "@incorrect_exception_behavior": {
      "refs": [
        "961"
      ], 
      "name": "Incorrect Exception Behavior", 
      "parent": "@exception_management"
    }, 
    "@cwe_7_j2ee_misconfiguration_missing_custom_error_page": {
      "references": [
        "CWE 7", 
        "https://cwe.mitre.org/data/definitions/7.html"
      ], 
      "name": "J2EE Misconfiguration: Missing Custom Error Page", 
      "parent": "@exposed_data", 
      "description": "The default error page of a web application should not display sensitive information about the software system. A Web application must define a default error page for 4xx errors e.g. 404 , 5xx e.g. 500 errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container s built-in error response..When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks."
    }, 
    "@cwe_510_trapdoor": {
      "references": [
        "CWE 510", 
        "https://cwe.mitre.org/data/definitions/510.html"
      ], 
      "name": "Trapdoor", 
      "parent": "@malware", 
      "description": "A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism."
    }, 
    "@cwe_188_reliance_on_datamemory_layout": {
      "references": [
        "CWE 188", 
        "https://cwe.mitre.org/data/definitions/188.html"
      ], 
      "name": "Reliance on Data/Memory Layout", 
      "parent": "@design", 
      "description": "The software makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior. When changing platforms or protocol versions, data may move in unintended ways. For example, some architectures may place local variables A and B right next to each other with A on top; some may place them next to each other with B on top; and others may add some padding to each. The padding size may vary to ensure that each variable is aligned to a proper word size..In protocol implementations, it is common to calculate an offset relative to another field to pick out a specific piece of data. Exceptional conditions, often involving new protocol versions, may add corner cases that change the data layout in an unusual way. The result can be that an implementation accesses an unintended field in the packet, treating data of one type as data of another type."
    }, 
    "@cwe_270_privilege_context_switching_error": {
      "references": [
        "CWE 270", 
        "https://cwe.mitre.org/data/definitions/270.html"
      ], 
      "name": "Privilege Context Switching Error", 
      "parent": "@privilege", 
      "description": "The software does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control."
    }, 
    "@cwe_523_unprotected_transport_of_credentials": {
      "references": [
        "CWE 523", 
        "https://cwe.mitre.org/data/definitions/523.html"
      ], 
      "name": "Unprotected Transport of Credentials", 
      "parent": "@exposed_data", 
      "description": "Login pages not using adequate measures to protect the user name and password while they are in transit from the client to the server."
    }, 
    "@cwe_457_use_of_uninitialized_variable": {
      "references": [
        "CWE 457", 
        "https://cwe.mitre.org/data/definitions/457.html"
      ], 
      "name": "Use of Uninitialized Variable", 
      "parent": "@glitch_in_computation", 
      "description": "The code uses a variable that has not been initialized, leading to unpredictable or unintended results. In some languages such as C and C , stack variables are not initialized by default. They generally contain junk data with the contents of stack memory before the function was invoked. An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code."
    }, 
    "@cwe_39_path_traversal_cdirname": {
      "references": [
        "CWE 39", 
        "https://cwe.mitre.org/data/definitions/39.html"
      ], 
      "name": "Path Traversal: 'C:dirname'", 
      "parent": "@path_traversal", 
      "description": "An attacker can inject a drive letter or Windows volume letter C:dirname into a software system to potentially redirect access to an unintended location or arbitrary file."
    }, 
    "@cwe_586_explicit_call_to_finalize": {
      "references": [
        "CWE 586", 
        "https://cwe.mitre.org/data/definitions/586.html"
      ], 
      "name": "Explicit Call to Finalize()", 
      "parent": "@use_of_an_improper_api", 
      "description": "The software makes an explicit call to the finalize method from outside the finalizer. While the Java Language Specification allows an object s finalize method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize explicitly means that finalize will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected."
    }, 
    "@cwe_227_improper_fulfillment_of_api_contract_api_abuse": {
      "references": [
        "CWE 227", 
        "https://cwe.mitre.org/data/definitions/227.html"
      ], 
      "name": "Improper Fulfillment of API Contract ('API Abuse')", 
      "parent": "@use_of_an_improper_api", 
      "description": "The software uses an API in a manner contrary to its intended use. An API is a contract between a caller and a callee. The most common forms of API misuse occurs when the caller does not honor its end of this contract. For example, if a program does not call chdir after calling chroot , it violates the contract that specifies how to change the active root directory in a secure fashion. Another good example of library abuse is expecting the callee to return trustworthy DNS information to the caller. In this case, the caller misuses the callee API by making certain assumptions about its behavior that the return value can be used for authentication purposes . One can also violate the caller-callee contract from the other side. For example, if a coder subclasses SecureRandom and returns a non-random value, the contract is violated."
    }, 
    "@cwe_393_return_of_wrong_status_code": {
      "references": [
        "CWE 393", 
        "https://cwe.mitre.org/data/definitions/393.html"
      ], 
      "name": "Return of Wrong Status Code", 
      "parent": "@incorrect_exception_behavior", 
      "description": "A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result. This can lead to unpredictable behavior. If the function is used to make security-critical decisions or provide security-critical information, then the wrong status code can cause the software to assume that an action is safe, even when it is not."
    }, 
    "@architecture": {
      "refs": [
        "975"
      ], 
      "name": "Architecture", 
      "parent": "@other"
    }, 
    "@cwe_346_origin_validation_error": {
      "references": [
        "CWE 346", 
        "https://cwe.mitre.org/data/definitions/346.html"
      ], 
      "name": "Origin Validation Error", 
      "parent": "@faulty_endpoint_authentication", 
      "description": "The software does not properly verify that the source of data or communication is valid."
    }, 
    "@cwe_323_reusing_a_nonce_key_pair_in_encryption": {
      "references": [
        "CWE 323", 
        "https://cwe.mitre.org/data/definitions/323.html"
      ], 
      "name": "Reusing a Nonce, Key Pair in Encryption", 
      "parent": "@weak_cryptography", 
      "description": "Nonces should be used for the present occasion and only once."
    }, 
    "@insecure_session_management": {
      "refs": [
        "965"
      ], 
      "name": "Insecure Session Management", 
      "parent": "@information_leak"
    }, 
    "@cwe_697_insufficient_comparison": {
      "references": [
        "CWE 697", 
        "https://cwe.mitre.org/data/definitions/697.html"
      ], 
      "name": "Insufficient Comparison", 
      "parent": "@design", 
      "description": "The software compares two entities in a security-relevant context, but the comparison is insufficient, which may lead to resultant weaknesses. This weakness class covers several possibilities:"
    }, 
    "@cwe_121_stack_based_buffer_overflow": {
      "references": [
        "CWE 121", 
        "https://cwe.mitre.org/data/definitions/121.html"
      ], 
      "name": "Stack-based Buffer Overflow", 
      "parent": "@faulty_buffer_access", 
      "description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack i.e., is a local variable or, rarely, a parameter to a function ."
    }, 
    "@missing_authentication": {
      "refs": [
        "952"
      ], 
      "name": "Missing Authentication", 
      "parent": "@authentication"
    }, 
    "@cwe_487_reliance_on_package_level_scope": {
      "references": [
        "CWE 487", 
        "https://cwe.mitre.org/data/definitions/487.html"
      ], 
      "name": "Reliance on Package-level Scope", 
      "parent": "@other_exposures", 
      "description": "Java packages are not inherently closed; therefore, relying on them for code security is not a good practice. The purpose of package scope is to prevent accidental access by other parts of a program. This is an ease-of-software-development feature but not a security feature."
    }, 
    "@cwe_65_windows_hard_link": {
      "references": [
        "CWE 65", 
        "https://cwe.mitre.org/data/definitions/65.html"
      ], 
      "name": "Windows Hard Link", 
      "parent": "@link_in_resource_name_resolution", 
      "description": "The software, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files. Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file e.g. AUTOEXEC.BAT . When the process opens the file, the attacker can assume the privileges of that process, or prevent the program from accurately processing data."
    }, 
    "@cwe_767_access_to_critical_private_variable_via_public_method": {
      "references": [
        "CWE 767", 
        "https://cwe.mitre.org/data/definitions/767.html"
      ], 
      "name": "Access to Critical Private Variable via Public Method", 
      "parent": "@exposed_data", 
      "description": "The software defines a public method that reads or modifies a private variable. If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks."
    }, 
    "@cwe_498_cloneable_class_containing_sensitive_information": {
      "references": [
        "CWE 498", 
        "https://cwe.mitre.org/data/definitions/498.html"
      ], 
      "name": "Cloneable Class Containing Sensitive Information", 
      "parent": "@exposed_data", 
      "description": "The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class. Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor."
    }, 
    "@other_exposures": {
      "refs": [
        "966"
      ], 
      "name": "Other Exposures", 
      "parent": "@information_leak"
    }, 
    "@cwe_347_improper_verification_of_cryptographic_signature": {
      "references": [
        "CWE 347", 
        "https://cwe.mitre.org/data/definitions/347.html"
      ], 
      "name": "Improper Verification of Cryptographic Signature", 
      "parent": "@weak_cryptography", 
      "description": "The software does not verify, or incorrectly verifies, the cryptographic signature for data."
    }, 
    "@cwe_670_always_incorrect_control_flow_implementation": {
      "references": [
        "CWE 670", 
        "https://cwe.mitre.org/data/definitions/670.html"
      ], 
      "name": "Always-Incorrect Control Flow Implementation", 
      "parent": "@design", 
      "description": "The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated. This weakness captures cases in which a particular code segment is always incorrect with respect to the algorithm that it is implementing. For example, if a C programmer intends to include multiple statements in a single block but does not include the enclosing braces CWE-483 , then the logic is always incorrect. This issue is in contrast to most weaknesses in which the code usually behaves correctly, except when it is externally manipulated in malicious ways."
    }, 
    "@cwe_141_improper_neutralization_of_parameterargument_delimiters": {
      "references": [
        "CWE 141", 
        "https://cwe.mitre.org/data/definitions/141.html"
      ], 
      "name": "Improper Neutralization of Parameter/Argument Delimiters", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component. As data is parsed, an injected absent malformed delimiter may cause the process to take unexpected actions."
    }, 
    "@cwe_455_non_exit_on_failed_initialization": {
      "references": [
        "CWE 455", 
        "https://cwe.mitre.org/data/definitions/455.html"
      ], 
      "name": "Non-exit on Failed Initialization", 
      "parent": "@incorrect_exception_behavior", 
      "description": "The software does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error, which can cause the software to execute in a less secure fashion than intended by the administrator."
    }, 
    "@cwe_357_insufficient_ui_warning_of_dangerous_operations": {
      "references": [
        "CWE 357", 
        "https://cwe.mitre.org/data/definitions/357.html"
      ], 
      "name": "Insufficient UI Warning of Dangerous Operations", 
      "parent": "@security", 
      "description": "The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention."
    }, 
    "@failed_chroot_jail": {
      "refs": [
        "979"
      ], 
      "name": "Failed Chroot Jail", 
      "parent": "@path_resolution"
    }, 
    "@cwe_256_plaintext_storage_of_a_password": {
      "references": [
        "CWE 256", 
        "https://cwe.mitre.org/data/definitions/256.html"
      ], 
      "name": "Plaintext Storage of a Password", 
      "parent": "@exposed_data", 
      "description": "Storing a password in plaintext may result in a system compromise. Password management issues occur when a password is stored in plaintext in an application s properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource."
    }, 
    "@authentication": {
      "refs": [
        "898"
      ], 
      "name": "Authentication", 
      "parent": "@sfp"
    }, 
    "@cwe_611_improper_restriction_of_xml_external_entity_reference_xxe": {
      "references": [
        "CWE 611", 
        "https://cwe.mitre.org/data/definitions/611.html"
      ], 
      "name": "Improper Restriction of XML External Entity Reference ('XXE')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output. XML documents optionally contain a Document Type Definition DTD , which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing..By submitting an XML file that defines an external entity with a file: URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as file: c: winnt win.ini designates in Windows the file C: Winnt win.ini, or file: etc passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http: , the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning..Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data e.g. in an error message , thereby exposing the file contents."
    }, 
    "@cwe_500_public_static_field_not_marked_final": {
      "references": [
        "CWE 500", 
        "https://cwe.mitre.org/data/definitions/500.html"
      ], 
      "name": "Public Static Field Not Marked Final", 
      "parent": "@unexpected_entry_points", 
      "description": "An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways. Public static variables can be read without an accessor and changed without a mutator by any classes in the application."
    }, 
    "@cwe_531_information_exposure_through_test_code": {
      "references": [
        "CWE 531", 
        "https://cwe.mitre.org/data/definitions/531.html"
      ], 
      "name": "Information Exposure Through Test Code", 
      "parent": "@unexpected_entry_points", 
      "description": "Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions."
    }, 
    "@cwe_515_covert_storage_channel": {
      "references": [
        "CWE 515", 
        "https://cwe.mitre.org/data/definitions/515.html"
      ], 
      "name": "Covert Storage Channel", 
      "parent": "@covert_channel", 
      "description": "A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information. Covert storage channels occur when out-of-band data is stored in messages for the purpose of memory reuse. Covert channels are frequently classified as either storage or timing channels. Examples would include using a file intended to hold only audit information to convey user passwords--using the name of a file or perhaps status bits associated with it that can be read by all users to signal the contents of the file. Steganography, concealing information in such a manner that no one but the intended recipient knows of the existence of the message, is a good example of a covert storage channel."
    }, 
    "@cwe_511_logictime_bomb": {
      "references": [
        "CWE 511", 
        "https://cwe.mitre.org/data/definitions/511.html"
      ], 
      "name": "Logic/Time Bomb", 
      "parent": "@malware", 
      "description": "The software contains code that is designed to disrupt the legitimate operation of the software or its environment when a certain time passes, or when a certain logical condition is met. When the time bomb or logic bomb is detonated, it may perform a denial of service such as crashing the system, deleting critical data, or degrading system response time. This bomb might be placed within either a replicating or non-replicating Trojan horse."
    }, 
    "@information_loss": {
      "refs": [
        "997"
      ], 
      "name": "Information Loss", 
      "parent": "@ui"
    }, 
    "@cwe_480_use_of_incorrect_operator": {
      "references": [
        "CWE 480", 
        "https://cwe.mitre.org/data/definitions/480.html"
      ], 
      "name": "Use of Incorrect Operator", 
      "parent": "@design", 
      "description": "The programmer accidentally uses the wrong operator, which changes the application logic in security-relevant ways. These types of errors are generally the result of a typo."
    }, 
    "@cwe_705_incorrect_control_flow_scoping": {
      "references": [
        "CWE 705", 
        "https://cwe.mitre.org/data/definitions/705.html"
      ], 
      "name": "Incorrect Control Flow Scoping", 
      "parent": "@design", 
      "description": "The software does not properly return control flow to the proper location after it has completed a task or detected an unusual condition."
    }, 
    "@cwe_118_improper_access_of_indexable_resource_range_error": {
      "references": [
        "CWE 118", 
        "https://cwe.mitre.org/data/definitions/118.html"
      ], 
      "name": "Improper Access of Indexable Resource ('Range Error')", 
      "parent": "@faulty_buffer_access", 
      "description": "The software does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files."
    }, 
    "@cwe_662_improper_synchronization": {
      "references": [
        "CWE 662", 
        "https://cwe.mitre.org/data/definitions/662.html"
      ], 
      "name": "Improper Synchronization", 
      "parent": "@missing_lock", 
      "description": "The software attempts to use a shared resource in an exclusive manner, but does not prevent or incorrectly prevents use of the resource by another thread or process."
    }, 
    "@cwe_185_incorrect_regular_expression": {
      "references": [
        "CWE 185", 
        "https://cwe.mitre.org/data/definitions/185.html"
      ], 
      "name": "Incorrect Regular Expression", 
      "parent": "@tainted_input_to_command", 
      "description": "The software specifies a regular expression in a way that causes data to be improperly matched or compared. When the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data."
    }, 
    "@cwe_688_function_call_with_incorrect_variable_or_reference_as_argument": {
      "references": [
        "CWE 688", 
        "https://cwe.mitre.org/data/definitions/688.html"
      ], 
      "name": "Function Call With Incorrect Variable or Reference as Argument", 
      "parent": "@glitch_in_computation", 
      "description": "The software calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses."
    }, 
    "@cwe_579_j2ee_bad_practices_non_serializable_object_stored_in_session": {
      "references": [
        "CWE 579", 
        "https://cwe.mitre.org/data/definitions/579.html"
      ], 
      "name": "J2EE Bad Practices: Non-serializable Object Stored in Session", 
      "parent": "@glitch_in_computation", 
      "description": "The application stores a non-serializable object as an HttpSession attribute, which can hurt reliability. A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs."
    }, 
    "@cwe_580_clone_method_without_superclone": {
      "references": [
        "CWE 580", 
        "https://cwe.mitre.org/data/definitions/580.html"
      ], 
      "name": "clone() Method Without super.clone()", 
      "parent": "@unexpected_entry_points", 
      "description": "The software contains a clone method that does not call super.clone to obtain the new object. All implementations of clone should obtain the new object by calling super.clone . If a class does not follow this convention, a subclass s clone method will return an object of the wrong type."
    }, 
    "@cwe_377_insecure_temporary_file": {
      "references": [
        "CWE 377", 
        "https://cwe.mitre.org/data/definitions/377.html"
      ], 
      "name": "Insecure Temporary File", 
      "parent": "@exposure_temporary_file", 
      "description": "Creating and using insecure temporary files can leave application and system data vulnerable to attack."
    }, 
    "@cwe_761_free_of_pointer_not_at_start_of_buffer": {
      "references": [
        "CWE 761", 
        "https://cwe.mitre.org/data/definitions/761.html"
      ], 
      "name": "Free of Pointer not at Start of Buffer", 
      "parent": "@faulty_memory_release", 
      "description": "The application calls free on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer. This can cause the application to crash, or in some cases, modify critical program variables or execute code..This weakness often occurs when the memory is allocated explicitly on the heap with one of the malloc family functions and free is called, but pointer arithmetic has caused the pointer to be in the interior or end of the buffer."
    }, 
    "@cwe_64_windows_shortcut_following_lnk": {
      "references": [
        "CWE 64", 
        "https://cwe.mitre.org/data/definitions/64.html"
      ], 
      "name": "Windows Shortcut Following (.LNK)", 
      "parent": "@link_in_resource_name_resolution", 
      "description": "The software, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut .LNK whose target is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files. The shortcut file with the .lnk extension can permit an attacker to read write a file that they originally did not have permissions to access."
    }, 
    "@cwe_219_sensitive_data_under_web_root": {
      "references": [
        "CWE 219", 
        "https://cwe.mitre.org/data/definitions/219.html"
      ], 
      "name": "Sensitive Data Under Web Root", 
      "parent": "@exposed_data", 
      "description": "The application stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties."
    }, 
    "@cwe_406_insufficient_control_of_network_message_volume_network_amplification": {
      "references": [
        "CWE 406", 
        "https://cwe.mitre.org/data/definitions/406.html"
      ], 
      "name": "Insufficient Control of Network Message Volume (Network Amplification)", 
      "parent": "@design", 
      "description": "The software does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the software to transmit more traffic than should be allowed for that actor. In the absence of a policy to restrict asymmetric resource consumption, the application or system cannot distinguish between legitimate transmissions and traffic intended to serve as an amplifying attack on target systems. Systems can often be configured to restrict the amount of traffic sent out on behalf of a client, based on the client s origin or access level. This is usually defined in a resource allocation policy. In the absence of a mechanism to keep track of transmissions, the system or application can be easily abused to transmit asymmetrically greater traffic than the request or client should be permitted to."
    }, 
    "@cwe_615_information_exposure_through_comments": {
      "references": [
        "CWE 615", 
        "https://cwe.mitre.org/data/definitions/615.html"
      ], 
      "name": "Information Exposure Through Comments", 
      "parent": "@exposed_data", 
      "description": "While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc. An attacker who finds these comments can map the application s structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site."
    }, 
    "@missing_lock": {
      "refs": [
        "986"
      ], 
      "name": "Missing Lock", 
      "parent": "@synchronization"
    }, 
    "@cwe_597_use_of_wrong_operator_in_string_comparison": {
      "references": [
        "CWE 597", 
        "https://cwe.mitre.org/data/definitions/597.html"
      ], 
      "name": "Use of Wrong Operator in String Comparison", 
      "parent": "@glitch_in_computation", 
      "description": "The product uses the wrong operator when comparing a string, such as using when the equals method should be used instead. In Java, using or to compare two strings for equality actually compares two objects for equality, not their values. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, it could be leveraged to affect program security."
    }, 
    "@cwe_666_operation_on_resource_in_wrong_phase_of_lifetime": {
      "references": [
        "CWE 666", 
        "https://cwe.mitre.org/data/definitions/666.html"
      ], 
      "name": "Operation on Resource in Wrong Phase of Lifetime", 
      "parent": "@life_cycle", 
      "description": "The software performs an operation on a resource at the wrong phase of the resource s lifecycle, which can lead to unexpected behaviors. When a developer wants to initialize, use or release a resource, it is important to follow the specifications outlined for how to operate on that resource and to ensure that the resource is in the expected state. In this case, the software wants to perform a normally valid operation, initialization, use or release, on a resource when it is in the incorrect phase of its lifetime."
    }, 
    "@cwe_353_missing_support_for_integrity_check": {
      "references": [
        "CWE 353", 
        "https://cwe.mitre.org/data/definitions/353.html"
      ], 
      "name": "Missing Support for Integrity Check", 
      "parent": "@protocol_error", 
      "description": "The software uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum. If integrity check values or checksums are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol s checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets."
    }, 
    "@cwe_88_argument_injection_or_modification": {
      "references": [
        "CWE 88", 
        "https://cwe.mitre.org/data/definitions/88.html"
      ], 
      "name": "Argument Injection or Modification", 
      "parent": "@tainted_input_to_command", 
      "description": "The software does not sufficiently delimit the arguments being passed to a component in another control sphere, allowing alternate arguments to be provided, leading to potentially security-relevant changes."
    }, 
    "@cwe_410_insufficient_resource_pool": {
      "references": [
        "CWE 410", 
        "https://cwe.mitre.org/data/definitions/410.html"
      ], 
      "name": "Insufficient Resource Pool", 
      "parent": "@design", 
      "description": "The software s resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a relatively large number of requests for resources. Frequently the consequence is a flood of connection or sessions."
    }, 
    "@cwe_749_exposed_dangerous_method_or_function": {
      "references": [
        "CWE 749", 
        "https://cwe.mitre.org/data/definitions/749.html"
      ], 
      "name": "Exposed Dangerous Method or Function", 
      "parent": "@architecture", 
      "description": "The software provides an Applications Programming Interface API or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted. This weakness can lead to a wide variety of resultant weaknesses, depending on the behavior of the exposed method. It can apply to any number of technologies and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on..The exposure can occur in a few different ways:"
    }, 
    "@cwe_321_use_of_hard_coded_cryptographic_key": {
      "references": [
        "CWE 321", 
        "https://cwe.mitre.org/data/definitions/321.html"
      ], 
      "name": "Use of Hard-coded Cryptographic Key", 
      "parent": "@hardcoded_sensitive_data", 
      "description": "The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered."
    }, 
    "@cwe_640_weak_password_recovery_mechanism_for_forgotten_password": {
      "references": [
        "CWE 640", 
        "https://cwe.mitre.org/data/definitions/640.html"
      ], 
      "name": "Weak Password Recovery Mechanism for Forgotten Password", 
      "parent": "@weak_cryptography", 
      "description": "The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak. It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user s account..This weakness may be that the security question is too easy to guess or find an answer to e.g. because it is too common . Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system s weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system. Weak password recovery schemes completely undermine a strong password authentication scheme."
    }, 
    "@cwe_205_information_exposure_through_behavioral_discrepancy": {
      "references": [
        "CWE 205", 
        "https://cwe.mitre.org/data/definitions/205.html"
      ], 
      "name": "Information Exposure Through Behavioral Discrepancy", 
      "parent": "@state_disclosure", 
      "description": "The product s actions indicate important differences based on 1 the internal state of the product or 2 differences from other products in the same class. For example, attacks such as OS fingerprinting rely heavily on both behavioral and response discrepancies."
    }, 
    "@cwe_9_j2ee_misconfiguration_weak_access_permissions_for_ejb_methods": {
      "references": [
        "CWE 9", 
        "https://cwe.mitre.org/data/definitions/9.html"
      ], 
      "name": "J2EE Misconfiguration: Weak Access Permissions for EJB Methods", 
      "parent": "@privilege", 
      "description": "If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the software system. If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible."
    }, 
    "@broken_cryptography": {
      "refs": [
        "958"
      ], 
      "name": "Broken Cryptography", 
      "parent": "@cryptography"
    }, 
    "@cwe_24_path_traversal_filedir": {
      "references": [
        "CWE 24", 
        "https://cwe.mitre.org/data/definitions/24.html"
      ], 
      "name": "Path Traversal: '../filedir'", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize .. sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory..The .. manipulation is the canonical manipulation for operating systems that use as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which is supported but not the primary separator, such as Windows, which uses but can also accept ."
    }, 
    "@cwe_228_improper_handling_of_syntactically_invalid_structure": {
      "references": [
        "CWE 228", 
        "https://cwe.mitre.org/data/definitions/228.html"
      ], 
      "name": "Improper Handling of Syntactically Invalid Structure", 
      "parent": "@incorrect_input_handling", 
      "description": "The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification."
    }, 
    "@cwe_226_sensitive_information_uncleared_before_release": {
      "references": [
        "CWE 226", 
        "https://cwe.mitre.org/data/definitions/226.html"
      ], 
      "name": "Sensitive Information Uncleared Before Release", 
      "parent": "@exposed_data", 
      "description": "The software does not fully clear previously used information in a data structure, file, or other resource, before making that resource available to a party in another control sphere. This typically results from new data that is not as long as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, it may allow unintended actors to read the data when the memory is reallocated."
    }, 
    "@digital_certificate": {
      "refs": [
        "948"
      ], 
      "name": "Digital Certificate", 
      "parent": "@authentication"
    }, 
    "@cwe_293_using_referer_field_for_authentication": {
      "references": [
        "CWE 293", 
        "https://cwe.mitre.org/data/definitions/293.html"
      ], 
      "name": "Using Referer Field for Authentication", 
      "parent": "@faulty_endpoint_authentication", 
      "description": "The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking."
    }, 
    "@cwe_177_improper_handling_of_url_encoding_hex_encoding": {
      "references": [
        "CWE 177", 
        "https://cwe.mitre.org/data/definitions/177.html"
      ], 
      "name": "Improper Handling of URL Encoding (Hex Encoding)", 
      "parent": "@faulty_input_transformation", 
      "description": "The software does not properly handle when all or part of an input has been URL encoded."
    }, 
    "@cwe_642_external_control_of_critical_state_data": {
      "references": [
        "CWE 642", 
        "https://cwe.mitre.org/data/definitions/642.html"
      ], 
      "name": "External Control of Critical State Data", 
      "parent": "@exposed_data", 
      "description": "The software stores security-critical state information about its users, or the software itself, in a location that is accessible to unauthorized actors. If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed..State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an authenticated true cookie. An attacker may simply create this cookie in order to bypass the authentication."
    }, 
    "@authentication_bypass": {
      "refs": [
        "947"
      ], 
      "name": "Authentication Bypass", 
      "parent": "@authentication"
    }, 
    "@cwe_467_use_of_sizeof_on_a_pointer_type": {
      "references": [
        "CWE 467", 
        "https://cwe.mitre.org/data/definitions/467.html"
      ], 
      "name": "Use of sizeof() on a Pointer Type", 
      "parent": "@incorrect_buffer_length_computation", 
      "description": "The code calls sizeof on a malloced pointer type, which always returns the wordsize 8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated. The use of sizeof on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof pointer indicates a bug."
    }, 
    "@cwe_245_j2ee_bad_practices_direct_management_of_connections": {
      "references": [
        "CWE 245", 
        "https://cwe.mitre.org/data/definitions/245.html"
      ], 
      "name": "J2EE Bad Practices: Direct Management of Connections", 
      "parent": "@use_of_an_improper_api", 
      "description": "The J2EE application directly manages connections, instead of using the container s connection management facilities. The J2EE standard forbids the direct management of connections. It requires that applications use the container s resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."
    }, 
    "@faulty_endpoint_authentication": {
      "refs": [
        "949"
      ], 
      "name": "Faulty Endpoint Authentication", 
      "parent": "@authentication"
    }, 
    "@cwe_22_improper_limitation_of_a_pathname_to_a_restricted_directory_path_traversal": {
      "references": [
        "CWE 22", 
        "https://cwe.mitre.org/data/definitions/22.html"
      ], 
      "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory. Many file operations are intended to take place within a restricted directory. By using special elements such as .. and separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the .. sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as usr local bin , which may also be useful in accessing unexpected files. This is referred to as absolute path traversal..In many programming languages, the injection of a null byte the 0 or NUL may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add .txt to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction."
    }, 
    "@cwe_235_improper_handling_of_extra_parameters": {
      "references": [
        "CWE 235", 
        "https://cwe.mitre.org/data/definitions/235.html"
      ], 
      "name": "Improper Handling of Extra Parameters", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount."
    }, 
    "@cwe_627_dynamic_variable_evaluation": {
      "references": [
        "CWE 627", 
        "https://cwe.mitre.org/data/definitions/627.html"
      ], 
      "name": "Dynamic Variable Evaluation", 
      "parent": "@tainted_input_to_command", 
      "description": "In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions. The resultant vulnerabilities depend on the behavior of the application, both at the crossover point and in any control data flow that is reachable by the related variables or functions."
    }, 
    "@cwe_81_improper_neutralization_of_script_in_an_error_message_web_page": {
      "references": [
        "CWE 81", 
        "https://cwe.mitre.org/data/definitions/81.html"
      ], 
      "name": "Improper Neutralization of Script in an Error Message Web Page", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page. Error pages may include customized 403 Forbidden or 404 Not Found pages..When an attacker can trigger an error that contains unneutralized input, then cross-site scripting attacks may be possible."
    }, 
    "@cwe_675_duplicate_operations_on_resource": {
      "references": [
        "CWE 675", 
        "https://cwe.mitre.org/data/definitions/675.html"
      ], 
      "name": "Duplicate Operations on Resource", 
      "parent": "@life_cycle", 
      "description": "The product performs the same operation on a resource two or more times, when the operation should only be applied once."
    }, 
    "@cwe_605_multiple_binds_to_the_same_port": {
      "references": [
        "CWE 605", 
        "https://cwe.mitre.org/data/definitions/605.html"
      ], 
      "name": "Multiple Binds to the Same Port", 
      "parent": "@multiple_binds_to_the_same_port", 
      "description": "When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed."
    }, 
    "@cwe_609_double_checked_locking": {
      "references": [
        "CWE 609", 
        "https://cwe.mitre.org/data/definitions/609.html"
      ], 
      "name": "Double-Checked Locking", 
      "parent": "@missing_lock", 
      "description": "The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient. Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block."
    }, 
    "@cwe_289_authentication_bypass_by_alternate_name": {
      "references": [
        "CWE 289", 
        "https://cwe.mitre.org/data/definitions/289.html"
      ], 
      "name": "Authentication Bypass by Alternate Name", 
      "parent": "@authentication_bypass", 
      "description": "The software performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor."
    }, 
    "@cwe_553_command_shell_in_externally_accessible_directory": {
      "references": [
        "CWE 553", 
        "https://cwe.mitre.org/data/definitions/553.html"
      ], 
      "name": "Command Shell in Externally Accessible Directory", 
      "parent": "@tainted_input_to_command", 
      "description": "A possible shell file exists in cgi-bin or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server."
    }, 
    "@cwe_758_reliance_on_undefined_unspecified_or_implementation_defined_behavior": {
      "references": [
        "CWE 758", 
        "https://cwe.mitre.org/data/definitions/758.html"
      ], 
      "name": "Reliance on Undefined, Unspecified, or Implementation-Defined Behavior", 
      "parent": "@use_of_an_improper_api", 
      "description": "The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity. This can lead to resultant weaknesses when the required properties change, such as when the software is ported to a different platform or if an interaction error CWE-435 occurs."
    }, 
    "@multiple_locksunlocks": {
      "refs": [
        "987"
      ], 
      "name": "Multiple Locks/Unlocks", 
      "parent": "@synchronization"
    }, 
    "@cwe_131_incorrect_calculation_of_buffer_size": {
      "references": [
        "CWE 131", 
        "https://cwe.mitre.org/data/definitions/131.html"
      ], 
      "name": "Incorrect Calculation of Buffer Size", 
      "parent": "@incorrect_buffer_length_computation", 
      "description": "The software does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow."
    }, 
    "@cwe_31_path_traversal_dirfilename": {
      "references": [
        "CWE 31", 
        "https://cwe.mitre.org/data/definitions/31.html"
      ], 
      "name": "Path Traversal: 'dir\\..\\..\\filename'", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize dir .. .. filename multiple internal backslash dot dot sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory..The dir .. .. filename manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one .. sequence, so multiple .. can bypass that check. Alternately, this manipulation could be used to bypass a check for .. at the beginning of the pathname, moving up more than one directory level."
    }, 
    "@cwe_773_missing_reference_to_active_file_descriptor_or_handle": {
      "references": [
        "CWE 773", 
        "https://cwe.mitre.org/data/definitions/773.html"
      ], 
      "name": "Missing Reference to Active File Descriptor or Handle", 
      "parent": "@failure_to_release_resource", 
      "description": "The software does not properly maintain references to a file descriptor or handle, which prevents that file descriptor handle from being reclaimed. This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations."
    }, 
    "@cwe_109_struts_validator_turned_off": {
      "references": [
        "CWE 109", 
        "https://cwe.mitre.org/data/definitions/109.html"
      ], 
      "name": "Struts: Validator Turned Off", 
      "parent": "@tainted_input_to_command", 
      "description": "Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation."
    }, 
    "@cwe_770_allocation_of_resources_without_limits_or_throttling": {
      "references": [
        "CWE 770", 
        "https://cwe.mitre.org/data/definitions/770.html"
      ], 
      "name": "Allocation of Resources Without Limits or Throttling", 
      "parent": "@unrestricted_consumption", 
      "description": "The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on how many resources can be allocated, in violation of the intended security policy for that actor."
    }, 
    "@cwe_317_cleartext_storage_of_sensitive_information_in_gui": {
      "references": [
        "CWE 317", 
        "https://cwe.mitre.org/data/definitions/317.html"
      ], 
      "name": "Cleartext Storage of Sensitive Information in GUI", 
      "parent": "@exposed_data", 
      "description": "The application stores sensitive information in cleartext within the GUI. An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."
    }, 
    "@cwe_314_cleartext_storage_in_the_registry": {
      "references": [
        "CWE 314", 
        "https://cwe.mitre.org/data/definitions/314.html"
      ], 
      "name": "Cleartext Storage in the Registry", 
      "parent": "@exposed_data", 
      "description": "The application stores sensitive information in cleartext in the registry. Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."
    }, 
    "@cwe_685_function_call_with_incorrect_number_of_arguments": {
      "references": [
        "CWE 685", 
        "https://cwe.mitre.org/data/definitions/685.html"
      ], 
      "name": "Function Call With Incorrect Number of Arguments", 
      "parent": "@glitch_in_computation", 
      "description": "The software calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses."
    }, 
    "@cwe_432_dangerous_signal_handler_not_disabled_during_sensitive_operations": {
      "references": [
        "CWE 432", 
        "https://cwe.mitre.org/data/definitions/432.html"
      ], 
      "name": "Dangerous Signal Handler not Disabled During Sensitive Operations", 
      "parent": "@use_of_an_improper_api", 
      "description": "The application uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running. During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution."
    }, 
    "@cwe_282_improper_ownership_management": {
      "references": [
        "CWE 282", 
        "https://cwe.mitre.org/data/definitions/282.html"
      ], 
      "name": "Improper Ownership Management", 
      "parent": "@access_management", 
      "description": "The software assigns the wrong ownership, or does not properly verify the ownership, of an object or resource."
    }, 
    "@cwe_653_insufficient_compartmentalization": {
      "references": [
        "CWE 653", 
        "https://cwe.mitre.org/data/definitions/653.html"
      ], 
      "name": "Insufficient Compartmentalization", 
      "parent": "@privilege", 
      "description": "The product does not sufficiently compartmentalize functionality or processes that require different privilege levels, rights, or permissions. When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users."
    }, 
    "@covert_channel": {
      "refs": [
        "968"
      ], 
      "name": "Covert Channel", 
      "parent": "@malware"
    }, 
    "@cwe_440_expected_behavior_violation": {
      "references": [
        "CWE 440", 
        "https://cwe.mitre.org/data/definitions/440.html"
      ], 
      "name": "Expected Behavior Violation", 
      "parent": "@use_of_an_improper_api", 
      "description": "A feature, API, or function being used by a product behaves differently than the product expects."
    }, 
    "@glitch_in_computation": {
      "refs": [
        "998"
      ], 
      "name": "Glitch in Computation", 
      "parent": "@risky_values"
    }, 
    "@cwe_551_incorrect_behavior_order_authorization_before_parsing_and_canonicalization": {
      "references": [
        "CWE 551", 
        "https://cwe.mitre.org/data/definitions/551.html"
      ], 
      "name": "Incorrect Behavior Order: Authorization Before Parsing and Canonicalization", 
      "parent": "@faulty_endpoint_authentication", 
      "description": "If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection. For instance, the character strings . and both mean current directory. If SomeDirectory is a protected directory and an attacker requests . SomeDirectory, the attacker may be able to gain access to the resource if . is not converted to before the authorization check is performed."
    }, 
    "@compiler": {
      "refs": [
        "976"
      ], 
      "name": "Compiler", 
      "parent": "@other"
    }, 
    "@cwe_785_use_of_path_manipulation_function_without_maximum_sized_buffer": {
      "references": [
        "CWE 785", 
        "https://cwe.mitre.org/data/definitions/785.html"
      ], 
      "name": "Use of Path Manipulation Function without Maximum-sized Buffer", 
      "parent": "@faulty_string_expansion", 
      "description": "The software invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX. Passing an inadequately-sized output buffer to a path manipulation function can result in a buffer overflow. Such functions include realpath , readlink , PathAppend , and others."
    }, 
    "@cwe_233_improper_handling_of_parameters": {
      "references": [
        "CWE 233", 
        "https://cwe.mitre.org/data/definitions/233.html"
      ], 
      "name": "Improper Handling of Parameters", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined."
    }, 
    "@cwe_706_use_of_incorrectly_resolved_name_or_reference": {
      "references": [
        "CWE 706", 
        "https://cwe.mitre.org/data/definitions/706.html"
      ], 
      "name": "Use of Incorrectly-Resolved Name or Reference", 
      "parent": "@path_traversal", 
      "description": "The software uses a name or reference to access a resource, but the name reference resolves to a resource that is outside of the intended control sphere."
    }, 
    "@cwe_528_exposure_of_core_dump_file_to_an_unauthorized_control_sphere": {
      "references": [
        "CWE 528", 
        "https://cwe.mitre.org/data/definitions/528.html"
      ], 
      "name": "Exposure of Core Dump File to an Unauthorized Control Sphere", 
      "parent": "@exposed_data", 
      "description": "The product generates a core dump file in a directory that is accessible to actors outside of the intended control sphere."
    }, 
    "@cwe_620_unverified_password_change": {
      "references": [
        "CWE 620", 
        "https://cwe.mitre.org/data/definitions/620.html"
      ], 
      "name": "Unverified Password Change", 
      "parent": "@missing_authentication", 
      "description": "When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication. This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user."
    }, 
    "@cwe_733_compiler_optimization_removal_or_modification_of_security_critical_code": {
      "references": [
        "CWE 733", 
        "https://cwe.mitre.org/data/definitions/733.html"
      ], 
      "name": "Compiler Optimization Removal or Modification of Security-critical Code", 
      "parent": "@compiler", 
      "description": "The developer builds a security-critical protection mechanism into the software but the compiler optimizes the program such that the mechanism is removed or modified."
    }, 
    "@cwe_153_improper_neutralization_of_substitution_characters": {
      "references": [
        "CWE 153", 
        "https://cwe.mitre.org/data/definitions/153.html"
      ], 
      "name": "Improper Neutralization of Substitution Characters", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component."
    }, 
    "@unrestricted_authentication": {
      "refs": [
        "955"
      ], 
      "name": "Unrestricted Authentication", 
      "parent": "@authentication"
    }, 
    "@cwe_762_mismatched_memory_management_routines": {
      "references": [
        "CWE 762", 
        "https://cwe.mitre.org/data/definitions/762.html"
      ], 
      "name": "Mismatched Memory Management Routines", 
      "parent": "@faulty_memory_release", 
      "description": "The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. This weakness can be generally described as mismatching memory management routines, such as:.When the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed."
    }, 
    "@cwe_469_use_of_pointer_subtraction_to_determine_size": {
      "references": [
        "CWE 469", 
        "https://cwe.mitre.org/data/definitions/469.html"
      ], 
      "name": "Use of Pointer Subtraction to Determine Size", 
      "parent": "@faulty_pointer_use", 
      "description": "The application subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk."
    }, 
    "@cwe_502_deserialization_of_untrusted_data": {
      "references": [
        "CWE 502", 
        "https://cwe.mitre.org/data/definitions/502.html"
      ], 
      "name": "Deserialization of Untrusted Data", 
      "parent": "@tainted_input_to_variable", 
      "description": "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid. It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption..Data that is untrusted can not be trusted to be well-formed."
    }, 
    "@insecure_resource_permissions": {
      "refs": [
        "946"
      ], 
      "name": "Insecure Resource Permissions", 
      "parent": "@access_control"
    }, 
    "@cwe_732_incorrect_permission_assignment_for_critical_resource": {
      "references": [
        "CWE 732", 
        "https://cwe.mitre.org/data/definitions/732.html"
      ], 
      "name": "Incorrect Permission Assignment for Critical Resource", 
      "parent": "@insecure_resource_permissions", 
      "description": "The software specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors. When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data."
    }, 
    "@ambiguous_exception_type": {
      "refs": [
        "960"
      ], 
      "name": "Ambiguous Exception Type", 
      "parent": "@exception_management"
    }, 
    "@cwe_707_improper_enforcement_of_message_or_data_structure": {
      "references": [
        "CWE 707", 
        "https://cwe.mitre.org/data/definitions/707.html"
      ], 
      "name": "Improper Enforcement of Message or Data Structure", 
      "parent": "@tainted_input_to_command", 
      "description": "The software does not enforce or incorrectly enforces that structured messages or data are well-formed before being read from an upstream component or sent to a downstream component. If a message is malformed it may cause the message to be incorrectly interpreted..This weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications."
    }, 
    "@incorrect_buffer_length_computation": {
      "refs": [
        "974"
      ], 
      "name": "Incorrect Buffer Length Computation", 
      "parent": "@memory_access"
    }, 
    "@cwe_708_incorrect_ownership_assignment": {
      "references": [
        "CWE 708", 
        "https://cwe.mitre.org/data/definitions/708.html"
      ], 
      "name": "Incorrect Ownership Assignment", 
      "parent": "@access_management", 
      "description": "The software assigns an owner to a resource, but the owner is outside of the intended control sphere. This may allow the resource to be manipulated by actors outside of the intended control sphere."
    }, 
    "@cwe_212_improper_cross_boundary_removal_of_sensitive_data": {
      "references": [
        "CWE 212", 
        "https://cwe.mitre.org/data/definitions/212.html"
      ], 
      "name": "Improper Cross-boundary Removal of Sensitive Data", 
      "parent": "@exposed_data", 
      "description": "The software uses a resource that contains sensitive data, but it does not properly remove that data before it stores, transfers, or shares the resource with actors in another control sphere. Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing..For example, software that is used for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site."
    }, 
    "@cwe_94_improper_control_of_generation_of_code_code_injection": {
      "references": [
        "CWE 94", 
        "https://cwe.mitre.org/data/definitions/94.html"
      ], 
      "name": "Improper Control of Generation of Code ('Code Injection')", 
      "parent": "@tainted_input_to_environment", 
      "description": "The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment. When software allows a user s input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution..Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities."
    }, 
    "@cwe_390_detection_of_error_condition_without_action": {
      "references": [
        "CWE 390", 
        "https://cwe.mitre.org/data/definitions/390.html"
      ], 
      "name": "Detection of Error Condition Without Action", 
      "parent": "@unchecked_status_condition", 
      "description": "The software detects a specific error, but takes no actions to handle the error."
    }, 
    "@cwe_365_race_condition_in_switch": {
      "references": [
        "CWE 365", 
        "https://cwe.mitre.org/data/definitions/365.html"
      ], 
      "name": "Race Condition in Switch", 
      "parent": "@missing_lock", 
      "description": "The code contains a switch statement in which the switched variable can be modified while the switch is still executing, resulting in unexpected behavior. This issue is particularly important in the case of switch statements that involve fall-through style case statements - ie., those which do not end with break. If the variable being tested by the switch changes in the course of execution, this could change the intended logic of the switch so much that it places the process in a contradictory state and in some cases could even result in memory corruption."
    }, 
    "@cwe_459_incomplete_cleanup": {
      "references": [
        "CWE 459", 
        "https://cwe.mitre.org/data/definitions/459.html"
      ], 
      "name": "Incomplete Cleanup", 
      "parent": "@failure_to_release_resource", 
      "description": "The software does not properly clean up and remove temporary or supporting resources after they have been used."
    }, 
    "@cwe_547_use_of_hard_coded_security_relevant_constants": {
      "references": [
        "CWE 547", 
        "https://cwe.mitre.org/data/definitions/547.html"
      ], 
      "name": "Use of Hard-coded, Security-relevant Constants", 
      "parent": "@hardcoded_sensitive_data", 
      "description": "The program uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change. If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed."
    }, 
    "@cwe_400_uncontrolled_resource_consumption_resource_exhaustion": {
      "references": [
        "CWE 400", 
        "https://cwe.mitre.org/data/definitions/400.html"
      ], 
      "name": "Uncontrolled Resource Consumption ('Resource Exhaustion')", 
      "parent": "@unrestricted_consumption", 
      "description": "The software does not properly restrict the size or amount of resources that are requested or influenced by an actor, which can be used to consume more resources than intended. Limited resources include memory, file system storage, database connection pool entries, or CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the software, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system..Resource exhaustion problems have at least two common causes:"
    }, 
    "@cwe_759_use_of_a_one_way_hash_without_a_salt": {
      "references": [
        "CWE 759", 
        "https://cwe.mitre.org/data/definitions/759.html"
      ], 
      "name": "Use of a One-Way Hash without a Salt", 
      "parent": "@broken_cryptography", 
      "description": "The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software does not also use a salt as part of the input. This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables..It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details."
    }, 
    "@exception_management": {
      "refs": [
        "889"
      ], 
      "name": "Exception Management", 
      "parent": "@sfp"
    }, 
    "@cwe_497_exposure_of_system_data_to_an_unauthorized_control_sphere": {
      "references": [
        "CWE 497", 
        "https://cwe.mitre.org/data/definitions/497.html"
      ], 
      "name": "Exposure of System Data to an Unauthorized Control Sphere", 
      "parent": "@exposed_data", 
      "description": "Exposing system data or debugging information helps an adversary learn about the system and form an attack plan. An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. An attacker can also cause errors to occur by submitting unusual requests to the web application. The response to these errors can reveal detailed system information, deny service, cause security mechanisms to fail, and crash the server. An attacker can use error messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. An application may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism."
    }, 
    "@unrestricted_lock": {
      "refs": [
        "989"
      ], 
      "name": "Unrestricted Lock", 
      "parent": "@synchronization"
    }, 
    "@cwe_555_j2ee_misconfiguration_plaintext_password_in_configuration_file": {
      "references": [
        "CWE 555", 
        "https://cwe.mitre.org/data/definitions/555.html"
      ], 
      "name": "J2EE Misconfiguration: Plaintext Password in Configuration File", 
      "parent": "@exposed_data", 
      "description": "The J2EE application stores a plaintext password in a configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers."
    }, 
    "@cwe_563_assignment_to_variable_without_use_unused_variable": {
      "references": [
        "CWE 563", 
        "https://cwe.mitre.org/data/definitions/563.html"
      ], 
      "name": "Assignment to Variable without Use ('Unused Variable')", 
      "parent": "@unused_entities", 
      "description": "The variable s value is assigned but never used, making it a dead store. After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug."
    }, 
    "@cwe_66_improper_handling_of_file_names_that_identify_virtual_resources": {
      "references": [
        "CWE 66", 
        "https://cwe.mitre.org/data/definitions/66.html"
      ], 
      "name": "Improper Handling of File Names that Identify Virtual Resources", 
      "parent": "@path_traversal", 
      "description": "The product does not handle or incorrectly handles a file name that identifies a virtual resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file. Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories."
    }, 
    "@cwe_624_executable_regular_expression_error": {
      "references": [
        "CWE 624", 
        "https://cwe.mitre.org/data/definitions/624.html"
      ], 
      "name": "Executable Regular Expression Error", 
      "parent": "@tainted_input_to_command", 
      "description": "The product uses a regular expression that either 1 contains an executable component with user-controlled inputs, or 2 allows a user to enable execution by inserting pattern modifiers. Case 2 is possible in the PHP preg_replace function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression."
    }, 
    "@cwe_143_improper_neutralization_of_record_delimiters": {
      "references": [
        "CWE 143", 
        "https://cwe.mitre.org/data/definitions/143.html"
      ], 
      "name": "Improper Neutralization of Record Delimiters", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component. As data is parsed, an injected absent malformed delimiter may cause the process to take unexpected actions."
    }, 
    "@cwe_765_multiple_unlocks_of_a_critical_resource": {
      "references": [
        "CWE 765", 
        "https://cwe.mitre.org/data/definitions/765.html"
      ], 
      "name": "Multiple Unlocks of a Critical Resource", 
      "parent": "@multiple_locksunlocks", 
      "description": "The software unlocks a critical resource more times than intended, leading to an unexpected state in the system. When software is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock s implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity."
    }, 
    "@cwe_616_incomplete_identification_of_uploaded_file_variables_php": {
      "references": [
        "CWE 616", 
        "https://cwe.mitre.org/data/definitions/616.html"
      ], 
      "name": "Incomplete Identification of Uploaded File Variables (PHP)", 
      "parent": "@tainted_input_to_variable", 
      "description": "The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file e.g. varname, varname_size, varname_name, varname_type . These variables could be overwritten by attackers, causing the application to process unauthorized files. These global variables could be overwritten by POST requests, cookies, or other methods of populating or overwriting these variables. This could be used to read or process arbitrary files by providing values such as etc passwd ."
    }, 
    "@cwe_554_aspnet_misconfiguration_not_using_input_validation_framework": {
      "references": [
        "CWE 554", 
        "https://cwe.mitre.org/data/definitions/554.html"
      ], 
      "name": "ASP.NET Misconfiguration: Not Using Input Validation Framework", 
      "parent": "@tainted_input_to_command", 
      "description": "The ASP.NET application does not use an input validation framework."
    }, 
    "@cwe_32_path_traversal__triple_dot": {
      "references": [
        "CWE 32", 
        "https://cwe.mitre.org/data/definitions/32.html"
      ], 
      "name": "Path Traversal: '...' (Triple Dot)", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ... triple dot sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory..The ... manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to .. .. and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of . sequences, can ultimately produce valid .. sequences due to a collapse into unsafe value CWE-182 ."
    }, 
    "@cwe_478_missing_default_case_in_switch_statement": {
      "references": [
        "CWE 478", 
        "https://cwe.mitre.org/data/definitions/478.html"
      ], 
      "name": "Missing Default Case in Switch Statement", 
      "parent": "@unchecked_status_condition", 
      "description": "The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses. This flaw represents a common problem in software development, in which not all possible values for a variable are considered or handled by a given process. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system."
    }, 
    "@cwe_577_ejb_bad_practices_use_of_sockets": {
      "references": [
        "CWE 577", 
        "https://cwe.mitre.org/data/definitions/577.html"
      ], 
      "name": "EJB Bad Practices: Use of Sockets", 
      "parent": "@use_of_an_improper_api", 
      "description": "The program violates the Enterprise JavaBeans EJB specification by using sockets. The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast. The specification justifies this requirement in the following way: The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients. "
    }, 
    "@cwe_772_missing_release_of_resource_after_effective_lifetime": {
      "references": [
        "CWE 772", 
        "https://cwe.mitre.org/data/definitions/772.html"
      ], 
      "name": "Missing Release of Resource after Effective Lifetime", 
      "parent": "@failure_to_release_resource", 
      "description": "The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed. When a resource is not released after use, it can allow attackers to cause a denial of service."
    }, 
    "@cwe_339_small_seed_space_in_prng": {
      "references": [
        "CWE 339", 
        "https://cwe.mitre.org/data/definitions/339.html"
      ], 
      "name": "Small Seed Space in PRNG", 
      "parent": "@predictability", 
      "description": "A PRNG uses a relatively small space of seeds."
    }, 
    "@cwe_253_incorrect_check_of_function_return_value": {
      "references": [
        "CWE 253", 
        "https://cwe.mitre.org/data/definitions/253.html"
      ], 
      "name": "Incorrect Check of Function Return Value", 
      "parent": "@unchecked_status_condition", 
      "description": "The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions. Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function."
    }, 
    "@cwe_530_exposure_of_backup_file_to_an_unauthorized_control_sphere": {
      "references": [
        "CWE 530", 
        "https://cwe.mitre.org/data/definitions/530.html"
      ], 
      "name": "Exposure of Backup File to an Unauthorized Control Sphere", 
      "parent": "@exposed_data", 
      "description": "A backup file is stored in a directory that is accessible to actors outside of the intended control sphere. Often, old files are renamed with an extension such as . bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator."
    }, 
    "@cwe_25_path_traversal_filedir": {
      "references": [
        "CWE 25", 
        "https://cwe.mitre.org/data/definitions/25.html"
      ], 
      "name": "Path Traversal: '/../filedir'", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize .. sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory..Sometimes a program checks for .. at the beginning of the input, so a .. can bypass that check."
    }, 
    "@cwe_435_interaction_error": {
      "references": [
        "CWE 435", 
        "https://cwe.mitre.org/data/definitions/435.html"
      ], 
      "name": "Interaction Error", 
      "parent": "@protocol_error", 
      "description": "An interaction error occurs when two entities work correctly when running independently, but they interact in unexpected ways when they are run together. This could apply to products, systems, components, etc."
    }, 
    "@cwe_234_failure_to_handle_missing_parameter": {
      "references": [
        "CWE 234", 
        "https://cwe.mitre.org/data/definitions/234.html"
      ], 
      "name": "Failure to Handle Missing Parameter", 
      "parent": "@incorrect_input_handling", 
      "description": "If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well."
    }, 
    "@cwe_158_improper_neutralization_of_null_byte_or_nul_character": {
      "references": [
        "CWE 158", 
        "https://cwe.mitre.org/data/definitions/158.html"
      ], 
      "name": "Improper Neutralization of Null Byte or NUL Character", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component. As data is parsed, an injected NUL character or null byte may cause the software to believe the input is terminated earlier than it actually is, or otherwise cause the input to be misinterpreted. This could then be used to inject potentially dangerous input that occurs after the null byte or otherwise bypass validation routines and other protection mechanisms."
    }, 
    "@cwe_27_path_traversal_dirfilename": {
      "references": [
        "CWE 27", 
        "https://cwe.mitre.org/data/definitions/27.html"
      ], 
      "name": "Path Traversal: 'dir/../../filename'", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal .. sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory..The directory .. .. filename manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one .. sequence, so multiple .. can bypass that check. Alternately, this manipulation could be used to bypass a check for .. at the beginning of the pathname, moving up more than one directory level."
    }, 
    "@cwe_601_url_redirection_to_untrusted_site_open_redirect": {
      "references": [
        "CWE 601", 
        "https://cwe.mitre.org/data/definitions/601.html"
      ], 
      "name": "URL Redirection to Untrusted Site ('Open Redirect')", 
      "parent": "@tainted_input_to_command", 
      "description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks. An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance."
    }, 
    "@cwe_592_authentication_bypass_issues": {
      "references": [
        "CWE 592", 
        "https://cwe.mitre.org/data/definitions/592.html"
      ], 
      "name": "Authentication Bypass Issues", 
      "parent": "@authentication_bypass", 
      "description": "The software does not properly perform authentication, allowing it to be bypassed through various methods."
    }, 
    "@cwe_96_improper_neutralization_of_directives_in_statically_saved_code_static_code_injection": {
      "references": [
        "CWE 96", 
        "https://cwe.mitre.org/data/definitions/96.html"
      ], 
      "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template."
    }, 
    "@cwe_287_improper_authentication": {
      "references": [
        "CWE 287", 
        "https://cwe.mitre.org/data/definitions/287.html"
      ], 
      "name": "Improper Authentication", 
      "parent": "@authentication_bypass", 
      "description": "When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct."
    }, 
    "@cwe_485_insufficient_encapsulation": {
      "references": [
        "CWE 485", 
        "https://cwe.mitre.org/data/definitions/485.html"
      ], 
      "name": "Insufficient Encapsulation", 
      "parent": "@other_exposures", 
      "description": "The product does not sufficiently encapsulate critical data or functionality. Encapsulation is about drawing strong boundaries. In a web browser that might mean ensuring that your mobile code cannot be abused by other mobile code. On the server it might mean differentiation between validated data and unvalidated data, between one user s data and another s, or between data users are allowed to see and data that they are not."
    }, 
    "@cwe_676_use_of_potentially_dangerous_function": {
      "references": [
        "CWE 676", 
        "https://cwe.mitre.org/data/definitions/676.html"
      ], 
      "name": "Use of Potentially Dangerous Function", 
      "parent": "@use_of_an_improper_api", 
      "description": "The program invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely."
    }, 
    "@cwe_23_relative_path_traversal": {
      "references": [
        "CWE 23", 
        "https://cwe.mitre.org/data/definitions/23.html"
      ], 
      "name": "Relative Path Traversal", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as .. that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory."
    }, 
    "@cwe_322_key_exchange_without_entity_authentication": {
      "references": [
        "CWE 322", 
        "https://cwe.mitre.org/data/definitions/322.html"
      ], 
      "name": "Key Exchange without Entity Authentication", 
      "parent": "@weak_cryptography", 
      "description": "The software performs a key exchange with an actor without verifying the identity of that actor. Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable a set of man-in-the-middle attacks. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim s credentials, sniff traffic between the victim and trusted server, etc."
    }, 
    "@cwe_242_use_of_inherently_dangerous_function": {
      "references": [
        "CWE 242", 
        "https://cwe.mitre.org/data/definitions/242.html"
      ], 
      "name": "Use of Inherently Dangerous Function", 
      "parent": "@use_of_an_improper_api", 
      "description": "The program calls a function that can never be guaranteed to work safely. Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets and overflow the destination buffer. Similarly, the operator is unsafe to use when reading into a statically-allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to the operator and overflow the destination buffer."
    }, 
    "@information_leak": {
      "refs": [
        "895"
      ], 
      "name": "Information Leak", 
      "parent": "@sfp"
    }, 
    "@cwe_78_improper_neutralization_of_special_elements_used_in_an_os_command_os_command_injection": {
      "references": [
        "CWE 78", 
        "https://cwe.mitre.org/data/definitions/78.html"
      ], 
      "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage..There are at least two subtypes of OS command injection:.From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input."
    }, 
    "@cwe_413_improper_resource_locking": {
      "references": [
        "CWE 413", 
        "https://cwe.mitre.org/data/definitions/413.html"
      ], 
      "name": "Improper Resource Locking", 
      "parent": "@missing_lock", 
      "description": "The software does not lock or does not correctly lock a resource when the software must have exclusive access to the resource. When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the software. This might violate the software s assumption that the resource will not change, potentially leading to unexpected behaviors."
    }, 
    "@cwe_431_missing_handler": {
      "references": [
        "CWE 431", 
        "https://cwe.mitre.org/data/definitions/431.html"
      ], 
      "name": "Missing Handler", 
      "parent": "@unchecked_status_condition", 
      "description": "A handler is not available or implemented. When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution."
    }, 
    "@cwe_69_improper_handling_of_windows_data_alternate_data_stream": {
      "references": [
        "CWE 69", 
        "https://cwe.mitre.org/data/definitions/69.html"
      ], 
      "name": "Improper Handling of Windows ::DATA Alternate Data Stream", 
      "parent": "@malware", 
      "description": "The software does not properly prevent access to, or detect usage of, alternate data streams ADS . An attacker can use an ADS to hide information about a file e.g. size, the name of the process from a system or file browser tools such as Windows Explorer and dir at the command line utility. Alternately, the attacker might be able to bypass intended access restrictions for the associated data fork."
    }, 
    "@cwe_441_unintended_proxy_or_intermediary_confused_deputy": {
      "references": [
        "CWE 441", 
        "https://cwe.mitre.org/data/definitions/441.html"
      ], 
      "name": "Unintended Proxy or Intermediary ('Confused Deputy')", 
      "parent": "@channel_attack", 
      "description": "The software receives a request, message, or directive from an upstream component, but the software does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the software s control sphere. This causes the software to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor. If an attacker cannot directly contact a target, but the software has access to the target, then the attacker can send a request to the software and have it be forwarded from the target. The request would appear to be coming from the software s system, not the attacker s system. As a result, the attacker can bypass access controls such as firewalls or hide the source of malicious requests, since the requests would not be coming directly from the attacker..Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when:"
    }, 
    "@cwe_72_improper_handling_of_apple_hfs_alternate_data_stream_path": {
      "references": [
        "CWE 72", 
        "https://cwe.mitre.org/data/definitions/72.html"
      ], 
      "name": "Improper Handling of Apple HFS+ Alternate Data Stream Path", 
      "parent": "@path_traversal", 
      "description": "The software does not properly handle special paths that may identify the data or resource fork of a file on the HFS file system. If the software chooses actions to take based on the file name, then if an attacker provides the data or resource fork, the software may take unexpected actions. Further, if the software intends to restrict access to a file, then an attacker might still be able to bypass intended access restrictions by requesting the data or resource fork for that file."
    }, 
    "@cwe_450_multiple_interpretations_of_ui_input": {
      "references": [
        "CWE 450", 
        "https://cwe.mitre.org/data/definitions/450.html"
      ], 
      "name": "Multiple Interpretations of UI Input", 
      "parent": "@feature", 
      "description": "The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation."
    }, 
    "@cwe_28_path_traversal_filedir": {
      "references": [
        "CWE 28", 
        "https://cwe.mitre.org/data/definitions/28.html"
      ], 
      "name": "Path Traversal: '..\\filedir'", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize .. sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory..The .. manipulation is the canonical manipulation for operating systems that use as directory separators, such as Windows. However, it is also useful for bypassing path traversal protection schemes that only assume that the separator is valid."
    }, 
    "@cwe_338_use_of_cryptographically_weak_pseudo_random_number_generator_prng": {
      "references": [
        "CWE 338", 
        "https://cwe.mitre.org/data/definitions/338.html"
      ], 
      "name": "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)", 
      "parent": "@predictability", 
      "description": "The product uses a Pseudo-Random Number Generator PRNG in a security context, but the PRNG is not cryptographically strong. When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks..Often a pseudo-random number generator PRNG is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms which use random numbers. Weak generators generally take less processing power and or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography."
    }, 
    "@cwe_172_encoding_error": {
      "references": [
        "CWE 172", 
        "https://cwe.mitre.org/data/definitions/172.html"
      ], 
      "name": "Encoding Error", 
      "parent": "@faulty_input_transformation", 
      "description": "The software does not properly encode or decode the data, resulting in unexpected values."
    }, 
    "@cwe_663_use_of_a_non_reentrant_function_in_a_concurrent_context": {
      "references": [
        "CWE 663", 
        "https://cwe.mitre.org/data/definitions/663.html"
      ], 
      "name": "Use of a Non-reentrant Function in a Concurrent Context", 
      "parent": "@missing_lock", 
      "description": "The software calls a non-reentrant function in a concurrent context in which a competing code sequence e.g. thread or signal handler may have an opportunity to call the same function or otherwise influence its state."
    }, 
    "@cwe_608_struts_non_private_field_in_actionform_class": {
      "references": [
        "CWE 608", 
        "https://cwe.mitre.org/data/definitions/608.html"
      ], 
      "name": "Struts: Non-private Field in ActionForm Class", 
      "parent": "@unexpected_entry_points", 
      "description": "An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter."
    }, 
    "@cwe_763_release_of_invalid_pointer_or_reference": {
      "references": [
        "CWE 763", 
        "https://cwe.mitre.org/data/definitions/763.html"
      ], 
      "name": "Release of Invalid Pointer or Reference", 
      "parent": "@faulty_memory_release", 
      "description": "The application attempts to return a memory resource to the system, but calls the wrong release function or calls the appropriate release function incorrectly. This weakness can take several forms, such as:"
    }, 
    "@cwe_277_insecure_inherited_permissions": {
      "references": [
        "CWE 277", 
        "https://cwe.mitre.org/data/definitions/277.html"
      ], 
      "name": "Insecure Inherited Permissions", 
      "parent": "@insecure_resource_permissions", 
      "description": "A product defines a set of insecure permissions that are inherited by objects that are created by the program."
    }, 
    "@cwe_182_collapse_of_data_into_unsafe_value": {
      "references": [
        "CWE 182", 
        "https://cwe.mitre.org/data/definitions/182.html"
      ], 
      "name": "Collapse of Data into Unsafe Value", 
      "parent": "@faulty_input_transformation", 
      "description": "The software filters data in a way that causes it to be reduced or collapsed into an unsafe value that violates an expected security property."
    }, 
    "@cwe_167_improper_handling_of_additional_special_element": {
      "references": [
        "CWE 167", 
        "https://cwe.mitre.org/data/definitions/167.html"
      ], 
      "name": "Improper Handling of Additional Special Element", 
      "parent": "@faulty_input_transformation", 
      "description": "The software receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is missing."
    }, 
    "@cwe_562_return_of_stack_variable_address": {
      "references": [
        "CWE 562", 
        "https://cwe.mitre.org/data/definitions/562.html"
      ], 
      "name": "Return of Stack Variable Address", 
      "parent": "@glitch_in_computation", 
      "description": "A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash. Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function s stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced."
    }, 
    "@tainted_input_to_environment": {
      "refs": [
        "991"
      ], 
      "name": "Tainted Input to Environment", 
      "parent": "@tainted_input"
    }, 
    "@cwe_754_improper_check_for_unusual_or_exceptional_conditions": {
      "references": [
        "CWE 754", 
        "https://cwe.mitre.org/data/definitions/754.html"
      ], 
      "name": "Improper Check for Unusual or Exceptional Conditions", 
      "parent": "@unchecked_status_condition", 
      "description": "The software does not check or improperly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the software. The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer s assumptions, possibly introducing instability, incorrect behavior, or a vulnerability..Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions."
    }, 
    "@cwe_420_unprotected_alternate_channel": {
      "references": [
        "CWE 420", 
        "https://cwe.mitre.org/data/definitions/420.html"
      ], 
      "name": "Unprotected Alternate Channel", 
      "parent": "@channel_attack", 
      "description": "The software protects a primary channel, but it does not use the same level of protection for an alternate channel."
    }, 
    "@cwe_116_improper_encoding_or_escaping_of_output": {
      "references": [
        "CWE 116", 
        "https://cwe.mitre.org/data/definitions/116.html"
      ], 
      "name": "Improper Encoding or Escaping of Output", 
      "parent": "@faulty_input_transformation", 
      "description": "The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved. Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead..Most software follows a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, GET index.html HTTP 1.1 is a structured message containing a command GET with a single argument index.html and metadata about which protocol version is being used HTTP 1.1 ..If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly."
    }, 
    "@cwe_108_struts_unvalidated_action_form": {
      "references": [
        "CWE 108", 
        "https://cwe.mitre.org/data/definitions/108.html"
      ], 
      "name": "Struts: Unvalidated Action Form", 
      "parent": "@tainted_input_to_command", 
      "description": "Every Action Form must have a corresponding validation form. If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator."
    }, 
    "@cwe_433_unparsed_raw_web_content_delivery": {
      "references": [
        "CWE 433", 
        "https://cwe.mitre.org/data/definitions/433.html"
      ], 
      "name": "Unparsed Raw Web Content Delivery", 
      "parent": "@exposed_data", 
      "description": "The software stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server. If code is stored in a file with an extension such as .inc or .pl , and the web server does not have a handler for that extension, then the server will likely send the contents of the file directly to the requester without the pre-processing that was expected. When that file contains sensitive information such as database credentials, this may allow the attacker to compromise the application or associated components."
    }, 
    "@cwe_76_improper_neutralization_of_equivalent_special_elements": {
      "references": [
        "CWE 76", 
        "https://cwe.mitre.org/data/definitions/76.html"
      ], 
      "name": "Improper Neutralization of Equivalent Special Elements", 
      "parent": "@tainted_input_to_command", 
      "description": "The software properly neutralizes certain special elements, but it improperly neutralizes equivalent special elements. The software may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the software may filter out a leading slash to prevent absolute path names, but does not account for a tilde followed by a user name, which on some nix systems could be expanded to an absolute pathname. Alternately, the software might filter a dangerous -e command-line switch when calling an external program, but it might not account for --exec or other switches that have the same semantics."
    }, 
    "@cwe_269_improper_privilege_management": {
      "references": [
        "CWE 269", 
        "https://cwe.mitre.org/data/definitions/269.html"
      ], 
      "name": "Improper Privilege Management", 
      "parent": "@privilege", 
      "description": "The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor."
    }, 
    "@entry_points": {
      "refs": [
        "897"
      ], 
      "name": "Entry Points", 
      "parent": "@sfp"
    }, 
    "@cwe_197_numeric_truncation_error": {
      "references": [
        "CWE 197", 
        "https://cwe.mitre.org/data/definitions/197.html"
      ], 
      "name": "Numeric Truncation Error", 
      "parent": "@glitch_in_computation", 
      "description": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion. When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred."
    }, 
    "@cwe_602_client_side_enforcement_of_server_side_security": {
      "references": [
        "CWE 602", 
        "https://cwe.mitre.org/data/definitions/602.html"
      ], 
      "name": "Client-Side Enforcement of Server-Side Security", 
      "parent": "@architecture", 
      "description": "The software is composed of a server that relies on the client to implement a mechanism that is intended to protect the server. When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect."
    }, 
    "@cwe_112_missing_xml_validation": {
      "references": [
        "CWE 112", 
        "https://cwe.mitre.org/data/definitions/112.html"
      ], 
      "name": "Missing XML Validation", 
      "parent": "@tainted_input_to_command", 
      "description": "The software accepts XML from an untrusted source but does not validate the XML against the proper schema. Most successful attacks begin with a violation of the programmer s assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input."
    }, 
    "@cwe_181_incorrect_behavior_order_validate_before_filter": {
      "references": [
        "CWE 181", 
        "https://cwe.mitre.org/data/definitions/181.html"
      ], 
      "name": "Incorrect Behavior Order: Validate Before Filter", 
      "parent": "@faulty_input_transformation", 
      "description": "The software validates data before it has been filtered, which prevents the software from detecting data that becomes invalid after the filtering step. This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection."
    }, 
    "@cwe_378_creation_of_temporary_file_with_insecure_permissions": {
      "references": [
        "CWE 378", 
        "https://cwe.mitre.org/data/definitions/378.html"
      ], 
      "name": "Creation of Temporary File With Insecure Permissions", 
      "parent": "@exposure_temporary_file", 
      "description": "Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack."
    }, 
    "@cwe_593_authentication_bypass_openssl_ctx_object_modified_after_ssl_objects_are_created": {
      "references": [
        "CWE 593", 
        "https://cwe.mitre.org/data/definitions/593.html"
      ], 
      "name": "Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created", 
      "parent": "@digital_certificate", 
      "description": "The software modifies the SSL context after connection creation has begun. If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change."
    }, 
    "@cwe_568_finalize_method_without_superfinalize": {
      "references": [
        "CWE 568", 
        "https://cwe.mitre.org/data/definitions/568.html"
      ], 
      "name": "finalize() Method Without super.finalize()", 
      "parent": "@unexpected_entry_points", 
      "description": "The software contains a finalize method that does not call super.finalize . The Java Language Specification states that it is a good practice for a finalize method to call super.finalize ."
    }, 
    "@cwe_618_exposed_unsafe_activex_method": {
      "references": [
        "CWE 618", 
        "https://cwe.mitre.org/data/definitions/618.html"
      ], 
      "name": "Exposed Unsafe ActiveX Method", 
      "parent": "@design", 
      "description": "An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser s security model e.g. the zone or domain . ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers."
    }, 
    "@cwe_358_improperly_implemented_security_check_for_standard": {
      "references": [
        "CWE 358", 
        "https://cwe.mitre.org/data/definitions/358.html"
      ], 
      "name": "Improperly Implemented Security Check for Standard", 
      "parent": "@implementation", 
      "description": "The software does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique."
    }, 
    "@cwe_536_information_exposure_through_servlet_runtime_error_message": {
      "references": [
        "CWE 536", 
        "https://cwe.mitre.org/data/definitions/536.html"
      ], 
      "name": "Information Exposure Through Servlet Runtime Error Message", 
      "parent": "@exposed_data", 
      "description": "A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker."
    }, 
    "@cwe_607_public_static_final_field_references_mutable_object": {
      "references": [
        "CWE 607", 
        "https://cwe.mitre.org/data/definitions/607.html"
      ], 
      "name": "Public Static Final Field References Mutable Object", 
      "parent": "@exposed_data", 
      "description": "A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package."
    }, 
    "@cwe_544_missing_standardized_error_handling_mechanism": {
      "references": [
        "CWE 544", 
        "https://cwe.mitre.org/data/definitions/544.html"
      ], 
      "name": "Missing Standardized Error Handling Mechanism", 
      "parent": "@incorrect_exception_behavior", 
      "description": "The software does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses. If the application handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user."
    }, 
    "@cwe_394_unexpected_status_code_or_return_value": {
      "references": [
        "CWE 394", 
        "https://cwe.mitre.org/data/definitions/394.html"
      ], 
      "name": "Unexpected Status Code or Return Value", 
      "parent": "@unchecked_status_condition", 
      "description": "The software does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the software."
    }, 
    "@cwe_13_aspnet_misconfiguration_password_in_configuration_file": {
      "references": [
        "CWE 13", 
        "https://cwe.mitre.org/data/definitions/13.html"
      ], 
      "name": "ASP.NET Misconfiguration: Password in Configuration File", 
      "parent": "@exposed_data", 
      "description": "Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers."
    }, 
    "@cwe_313_cleartext_storage_in_a_file_or_on_disk": {
      "references": [
        "CWE 313", 
        "https://cwe.mitre.org/data/definitions/313.html"
      ], 
      "name": "Cleartext Storage in a File or on Disk", 
      "parent": "@exposed_data", 
      "description": "The application stores sensitive information in cleartext in a file, or on disk. The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."
    }, 
    "@cwe_375_returning_a_mutable_object_to_an_untrusted_caller": {
      "references": [
        "CWE 375", 
        "https://cwe.mitre.org/data/definitions/375.html"
      ], 
      "name": "Returning a Mutable Object to an Untrusted Caller", 
      "parent": "@exposed_data", 
      "description": "Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function. In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state."
    }, 
    "@cwe_75_failure_to_sanitize_special_elements_into_a_different_plane_special_element_injection": {
      "references": [
        "CWE 75", 
        "https://cwe.mitre.org/data/definitions/75.html"
      ], 
      "name": "Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)", 
      "parent": "@tainted_input_to_command", 
      "description": "The software does not adequately filter user-controlled input for special elements with control implications."
    }, 
    "@cwe_244_improper_clearing_of_heap_memory_before_release_heap_inspection": {
      "references": [
        "CWE 244", 
        "https://cwe.mitre.org/data/definitions/244.html"
      ], 
      "name": "Improper Clearing of Heap Memory Before Release ('Heap Inspection')", 
      "parent": "@exposed_data", 
      "description": "Using realloc to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory. When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a heap inspection attack that reads the sensitive data using memory dumps or other methods. The realloc function is commonly used to increase the size of a block of allocated memory. This operation often requires copying the contents of the old memory block into a new and larger block. This operation leaves the contents of the original block intact but inaccessible to the program, preventing the program from being able to scrub sensitive data from memory. If an attacker can later examine the contents of a memory dump, the sensitive data could be exposed."
    }, 
    "@cwe_142_improper_neutralization_of_value_delimiters": {
      "references": [
        "CWE 142", 
        "https://cwe.mitre.org/data/definitions/142.html"
      ], 
      "name": "Improper Neutralization of Value Delimiters", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component. As data is parsed, an injected absent malformed delimiter may cause the process to take unexpected actions."
    }, 
    "@state_disclosure": {
      "refs": [
        "967"
      ], 
      "name": "State Disclosure", 
      "parent": "@information_leak"
    }, 
    "@cwe_774_allocation_of_file_descriptors_or_handles_without_limits_or_throttling": {
      "references": [
        "CWE 774", 
        "https://cwe.mitre.org/data/definitions/774.html"
      ], 
      "name": "Allocation of File Descriptors or Handles Without Limits or Throttling", 
      "parent": "@unrestricted_consumption", 
      "description": "The software allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor. This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations."
    }, 
    "@cwe_41_improper_resolution_of_path_equivalence": {
      "references": [
        "CWE 41", 
        "https://cwe.mitre.org/data/definitions/41.html"
      ], 
      "name": "Improper Resolution of Path Equivalence", 
      "parent": "@path_traversal", 
      "description": "The system or application is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object. Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object."
    }, 
    "@cwe_315_cleartext_storage_of_sensitive_information_in_a_cookie": {
      "references": [
        "CWE 315", 
        "https://cwe.mitre.org/data/definitions/315.html"
      ], 
      "name": "Cleartext Storage of Sensitive Information in a Cookie", 
      "parent": "@exposed_data", 
      "description": "The application stores sensitive information in cleartext in a cookie. Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."
    }, 
    "@cwe_162_improper_neutralization_of_trailing_special_elements": {
      "references": [
        "CWE 162", 
        "https://cwe.mitre.org/data/definitions/162.html"
      ], 
      "name": "Improper Neutralization of Trailing Special Elements", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component. As data is parsed, improperly handled trailing special elements may cause the process to take unexpected actions that result in an attack."
    }, 
    "@channel": {
      "refs": [
        "902"
      ], 
      "name": "Channel", 
      "parent": "@sfp"
    }, 
    "@cwe_90_improper_neutralization_of_special_elements_used_in_an_ldap_query_ldap_injection": {
      "references": [
        "CWE 90", 
        "https://cwe.mitre.org/data/definitions/90.html"
      ], 
      "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component."
    }, 
    "@cwe_359_exposure_of_private_information_privacy_violation": {
      "references": [
        "CWE 359", 
        "https://cwe.mitre.org/data/definitions/359.html"
      ], 
      "name": "Exposure of Private Information ('Privacy Violation')", 
      "parent": "@architecture", 
      "description": "The software does not properly prevent private data such as credit card numbers from being accessed by actors who either 1 are not explicitly authorized to access the data or 2 do not have the implicit consent of the people to which the data is related. Mishandling private information, such as customer passwords or Social Security numbers, can compromise user privacy and is often illegal. An exposure of private information does not necessarily prevent the software from working properly, and in fact it might be intended by the developer, but it can still be undesirable or explicitly prohibited by law for the people who are associated with this private information..Privacy violations may occur when:.Private data can enter a program in a variety of ways:.Some types of private information include:.Some of this information may be characterized as PII Personally Identifiable Information , Protected Health Information PHI , etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry..Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations: - Safe Harbor Privacy Framework R.359.2 - Gramm-Leach Bliley Act GLBA R.359.3 - Health Insurance Portability and Accountability Act HIPAA R.359.4 - California SB-1386 R.359.5 ..Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student s personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private..Security and privacy concerns often seem to compete with each other. From a security perspective, all important operations should be recorded so that any anomalous activity can later be identified. However, when private data is involved, this practice can in fact create risk. Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted."
    }, 
    "@cwe_370_missing_check_for_certificate_revocation_after_initial_check": {
      "references": [
        "CWE 370", 
        "https://cwe.mitre.org/data/definitions/370.html"
      ], 
      "name": "Missing Check for Certificate Revocation after Initial Check", 
      "parent": "@race_condition_window", 
      "description": "The software does not check the revocation status of a certificate after its initial revocation check, which can cause the software to perform privileged actions even after the certificate is revoked at a later time. If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity."
    }, 
    "@cwe_184_incomplete_blacklist": {
      "references": [
        "CWE 184", 
        "https://cwe.mitre.org/data/definitions/184.html"
      ], 
      "name": "Incomplete Blacklist", 
      "parent": "@tainted_input_to_command", 
      "description": "An application uses a blacklist of prohibited values, but the blacklist is incomplete. If an incomplete blacklist is used as a security mechanism, then the software may allow unintended values to pass into the application logic."
    }, 
    "@cwe_598_information_exposure_through_query_strings_in_get_request": {
      "references": [
        "CWE 598", 
        "https://cwe.mitre.org/data/definitions/598.html"
      ], 
      "name": "Information Exposure Through Query Strings in GET Request", 
      "parent": "@exposed_data", 
      "description": "The web application uses the GET method to process requests that contain sensitive information, which can expose that information through the browser s history, Referers, web logs, and other sources."
    }, 
    "@cwe_488_exposure_of_data_element_to_wrong_session": {
      "references": [
        "CWE 488", 
        "https://cwe.mitre.org/data/definitions/488.html"
      ], 
      "name": "Exposure of Data Element to Wrong Session", 
      "parent": "@insecure_session_management", 
      "description": "The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session. Data can bleed from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool..In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user s data. In other words, storing user data in Servlet member fields introduces a data access race condition."
    }, 
    "@cwe_308_use_of_single_factor_authentication": {
      "references": [
        "CWE 308", 
        "https://cwe.mitre.org/data/definitions/308.html"
      ], 
      "name": "Use of Single-factor Authentication", 
      "parent": "@authentication_bypass", 
      "description": "The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme. While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required."
    }, 
    "@cwe_684_incorrect_provision_of_specified_functionality": {
      "references": [
        "CWE 684", 
        "https://cwe.mitre.org/data/definitions/684.html"
      ], 
      "name": "Incorrect Provision of Specified Functionality", 
      "parent": "@use_of_an_improper_api", 
      "description": "The code does not function according to its published specifications, potentially leading to incorrect usage. When providing functionality to an external party, it is important that the software behaves in accordance with the details specified. When requirements of nuances are not documented, the functionality may produce unintended behaviors for the caller, possibly leading to an exploitable state."
    }, 
    "@cwe_444_inconsistent_interpretation_of_http_requests_http_request_smuggling": {
      "references": [
        "CWE 444", 
        "https://cwe.mitre.org/data/definitions/444.html"
      ], 
      "name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')", 
      "parent": "@tainted_input_to_command", 
      "description": "When malformed or abnormal HTTP requests are interpreted by one or more entities in the data flow between the user and the web server, such as a proxy or firewall, they can be interpreted inconsistently, allowing the attacker to smuggle a request to one device without the other device being aware of it."
    }, 
    "@cwe_20_improper_input_validation": {
      "references": [
        "CWE 20", 
        "https://cwe.mitre.org/data/definitions/20.html"
      ], 
      "name": "Improper Input Validation", 
      "parent": "@tainted_input_to_variable", 
      "description": "The product does not validate or incorrectly validates input that can affect the control flow or data flow of a program. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution."
    }, 
    "@cwe_693_protection_mechanism_failure": {
      "references": [
        "CWE 693", 
        "https://cwe.mitre.org/data/definitions/693.html"
      ], 
      "name": "Protection Mechanism Failure", 
      "parent": "@architecture", 
      "description": "The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product. This weakness covers three distinct situations. A missing protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An insufficient protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. Finally, an ignored mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path."
    }, 
    "@cwe_12_aspnet_misconfiguration_missing_custom_error_page": {
      "references": [
        "CWE 12", 
        "https://cwe.mitre.org/data/definitions/12.html"
      ], 
      "name": "ASP.NET Misconfiguration: Missing Custom Error Page", 
      "parent": "@exposed_data", 
      "description": "An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework s built-in responses."
    }, 
    "@cwe_350_reliance_on_reverse_dns_resolution_for_a_security_critical_action": {
      "references": [
        "CWE 350", 
        "https://cwe.mitre.org/data/definitions/350.html"
      ], 
      "name": "Reliance on Reverse DNS Resolution for a Security-Critical Action", 
      "parent": "@faulty_endpoint_authentication", 
      "description": "The software performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname. Since DNS names can be easily spoofed or misreported, and it may be difficult for the software to detect if a trusted DNS server has been compromised, DNS names do not constitute a valid authentication mechanism..When the software performs a reverse DNS resolution for an IP address, if an attacker controls the server for that IP address, then the attacker can cause the server to return an arbitrary hostname. As a result, the attacker may be able to bypass authentication, cause the wrong hostname to be recorded in log files to hide activities, or perform other attacks..Attackers can spoof DNS names by either 1 compromising a DNS server and modifying its records sometimes called DNS cache poisoning , or 2 having legitimate control over a DNS server associated with their IP address."
    }, 
    "@cwe_103_struts_incomplete_validate_method_definition": {
      "references": [
        "CWE 103", 
        "https://cwe.mitre.org/data/definitions/103.html"
      ], 
      "name": "Struts: Incomplete validate() Method Definition", 
      "parent": "@tainted_input_to_command", 
      "description": "The application has a validator form that either does not define a validate method, or defines a validate method but does not call super.validate . If you do not call super.validate , the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form."
    }, 
    "@cwe_546_suspicious_comment": {
      "references": [
        "CWE 546", 
        "https://cwe.mitre.org/data/definitions/546.html"
      ], 
      "name": "Suspicious Comment", 
      "parent": "@exposed_data", 
      "description": "The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses. Many suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO, in the code indicate missing security functionality and checking. Others indicate code problems that programmers should fix, such as hard-coded variables, error handling, not using stored procedures, and performance issues."
    }, 
    "@cwe_646_reliance_on_file_name_or_extension_of_externally_supplied_file": {
      "references": [
        "CWE 646", 
        "https://cwe.mitre.org/data/definitions/646.html"
      ], 
      "name": "Reliance on File Name or Extension of Externally-Supplied File", 
      "parent": "@tainted_input_to_command", 
      "description": "The software allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion. An application might use the file name or extension of of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a .php.gif extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data including application source code , or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself."
    }, 
    "@cwe_695_use_of_low_level_functionality": {
      "references": [
        "CWE 695", 
        "https://cwe.mitre.org/data/definitions/695.html"
      ], 
      "name": "Use of Low-Level Functionality", 
      "parent": "@use_of_an_improper_api", 
      "description": "The software uses low-level functionality that is explicitly prohibited by the framework or specification under which the software is supposed to operate. The use of low-level functionality can violate the specification in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the functionality to attack."
    }, 
    "@cwe_475_undefined_behavior_for_input_to_api": {
      "references": [
        "CWE 475", 
        "https://cwe.mitre.org/data/definitions/475.html"
      ], 
      "name": "Undefined Behavior for Input to API", 
      "parent": "@glitch_in_computation", 
      "description": "The behavior of this function is undefined unless its control parameter is set to a specific value."
    }, 
    "@cwe_285_improper_authorization": {
      "references": [
        "CWE 285", 
        "https://cwe.mitre.org/data/definitions/285.html"
      ], 
      "name": "Improper Authorization", 
      "parent": "@insecure_resource_access", 
      "description": "The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action. Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user s privileges and any permissions or other access-control specifications that apply to the resource..When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution."
    }, 
    "@cwe_267_privilege_defined_with_unsafe_actions": {
      "references": [
        "CWE 267", 
        "https://cwe.mitre.org/data/definitions/267.html"
      ], 
      "name": "Privilege Defined With Unsafe Actions", 
      "parent": "@privilege", 
      "description": "A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity."
    }, 
    "@cwe_163_improper_neutralization_of_multiple_trailing_special_elements": {
      "references": [
        "CWE 163", 
        "https://cwe.mitre.org/data/definitions/163.html"
      ], 
      "name": "Improper Neutralization of Multiple Trailing Special Elements", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component. As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack."
    }, 
    "@tainted_input": {
      "refs": [
        "896"
      ], 
      "name": "Tainted Input", 
      "parent": "@sfp"
    }, 
    "@cwe_238_improper_handling_of_incomplete_structural_elements": {
      "references": [
        "CWE 238", 
        "https://cwe.mitre.org/data/definitions/238.html"
      ], 
      "name": "Improper Handling of Incomplete Structural Elements", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not handle or incorrectly handles when a particular structural element is not completely specified."
    }, 
    "@cwe_481_assigning_instead_of_comparing": {
      "references": [
        "CWE 481", 
        "https://cwe.mitre.org/data/definitions/481.html"
      ], 
      "name": "Assigning instead of Comparing", 
      "parent": "@glitch_in_computation", 
      "description": "The code uses an operator for assignment when the intention was to perform a comparison. In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate."
    }, 
    "@cwe_521_weak_password_requirements": {
      "references": [
        "CWE 521", 
        "https://cwe.mitre.org/data/definitions/521.html"
      ], 
      "name": "Weak Password Requirements", 
      "parent": "@insecure_authentication_policy", 
      "description": "The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts. An authentication mechanism is only as strong as its credentials. For this reason, it is important to require users to have strong passwords. Lack of password complexity significantly reduces the search space when trying to guess user s passwords, making brute-force attacks easier."
    }, 
    "@cwe_200_information_exposure": {
      "references": [
        "CWE 200", 
        "https://cwe.mitre.org/data/definitions/200.html"
      ], 
      "name": "Information Exposure", 
      "parent": "@exposed_data", 
      "description": "An information exposure is the intentional or unintentional disclosure of information to an actor that is not explicitly authorized to have access to that information. The information either.Many information exposures are resultant e.g. PHP script error revealing the full path of the program , but they can also be primary e.g. timing discrepancies in cryptography . There are many different types of problems that involve information exposures. Their severity can range widely depending on the type of information that is revealed."
    }, 
    "@cwe_340_predictability_problems": {
      "references": [
        "CWE 340", 
        "https://cwe.mitre.org/data/definitions/340.html"
      ], 
      "name": "Predictability Problems", 
      "parent": "@predictability", 
      "description": "Weaknesses in this category are related to schemes that generate numbers or identifiers that are more predictable than required by the application."
    }, 
    "@cwe_575_ejb_bad_practices_use_of_awt_swing": {
      "references": [
        "CWE 575", 
        "https://cwe.mitre.org/data/definitions/575.html"
      ], 
      "name": "EJB Bad Practices: Use of AWT Swing", 
      "parent": "@use_of_an_improper_api", 
      "description": "The program violates the Enterprise JavaBeans EJB specification by using AWT Swing. The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard. The specification justifies this requirement in the following way: Most servers do not allow direct interaction between an application program and a keyboard display attached to the server system. "
    }, 
    "@cwe_657_violation_of_secure_design_principles": {
      "references": [
        "CWE 657", 
        "https://cwe.mitre.org/data/definitions/657.html"
      ], 
      "name": "Violation of Secure Design Principles", 
      "parent": "@architecture", 
      "description": "The product violates well-established principles for secure design. This can introduce resultant weaknesses or make it easier for developers to introduce related weaknesses during implementation. Because code is centered around design, it can be resource-intensive to fix design problems."
    }, 
    "@cwe_168_improper_handling_of_inconsistent_special_elements": {
      "references": [
        "CWE 168", 
        "https://cwe.mitre.org/data/definitions/168.html"
      ], 
      "name": "Improper Handling of Inconsistent Special Elements", 
      "parent": "@faulty_input_transformation", 
      "description": "The software does not handle when an inconsistency exists between two or more special characters or reserved words. An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested."
    }, 
    "@cwe_79_improper_neutralization_of_input_during_web_page_generation_cross_site_scripting": {
      "references": [
        "CWE 79", 
        "https://cwe.mitre.org/data/definitions/79.html"
      ], 
      "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", 
      "parent": "@tainted_input_to_command", 
      "description": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. Cross-site scripting XSS vulnerabilities occur when:.There are three main kinds of XSS:.Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim s machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim s account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim s machine, sometimes referred to as drive-by hacking. .In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious."
    }, 
    "@improper_null_termination": {
      "refs": [
        "973"
      ], 
      "name": "Improper NULL Termination", 
      "parent": "@memory_access"
    }, 
    "@cwe_150_improper_neutralization_of_escape_meta_or_control_sequences": {
      "references": [
        "CWE 150", 
        "https://cwe.mitre.org/data/definitions/150.html"
      ], 
      "name": "Improper Neutralization of Escape, Meta, or Control Sequences", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component. As data is parsed, an injected absent malformed delimiter may cause the process to take unexpected actions."
    }, 
    "@cwe_326_inadequate_encryption_strength": {
      "references": [
        "CWE 326", 
        "https://cwe.mitre.org/data/definitions/326.html"
      ], 
      "name": "Inadequate Encryption Strength", 
      "parent": "@weak_cryptography", 
      "description": "The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required. A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources."
    }, 
    "@cwe_126_buffer_over_read": {
      "references": [
        "CWE 126", 
        "https://cwe.mitre.org/data/definitions/126.html"
      ], 
      "name": "Buffer Over-read", 
      "parent": "@faulty_buffer_access", 
      "description": "The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer. This typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash."
    }, 
    "@cwe_286_incorrect_user_management": {
      "references": [
        "CWE 286", 
        "https://cwe.mitre.org/data/definitions/286.html"
      ], 
      "name": "Incorrect User Management", 
      "parent": "@access_management", 
      "description": "The software does not properly manage a user within its environment. Users can be assigned to the wrong group class of permissions resulting in unintended access rights to sensitive objects."
    }, 
    "@cwe_135_incorrect_calculation_of_multi_byte_string_length": {
      "references": [
        "CWE 135", 
        "https://cwe.mitre.org/data/definitions/135.html"
      ], 
      "name": "Incorrect Calculation of Multi-Byte String Length", 
      "parent": "@incorrect_buffer_length_computation", 
      "description": "The software does not correctly calculate the length of strings that can contain wide or multi-byte characters."
    }, 
    "@cwe_294_authentication_bypass_by_capture_replay": {
      "references": [
        "CWE 294", 
        "https://cwe.mitre.org/data/definitions/294.html"
      ], 
      "name": "Authentication Bypass by Capture-replay", 
      "parent": "@channel_attack", 
      "description": "A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message or with minor changes . Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server."
    }, 
    "@cwe_564_sql_injection_hibernate": {
      "references": [
        "CWE 564", 
        "https://cwe.mitre.org/data/definitions/564.html"
      ], 
      "name": "SQL Injection: Hibernate", 
      "parent": "@tainted_input_to_command", 
      "description": "Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement s meaning or to execute arbitrary SQL commands."
    }, 
    "@cwe_52_path_equivalence_multipletrailingslash": {
      "references": [
        "CWE 52", 
        "https://cwe.mitre.org/data/definitions/52.html"
      ], 
      "name": "Path Equivalence: '/multiple/trailing/slash//'", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of multiple trailing slash multiple trailing slash without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@missing_endpoint_authentication": {
      "refs": [
        "953"
      ], 
      "name": "Missing Endpoint Authentication", 
      "parent": "@authentication"
    }, 
    "@cwe_337_predictable_seed_in_prng": {
      "references": [
        "CWE 337", 
        "https://cwe.mitre.org/data/definitions/337.html"
      ], 
      "name": "Predictable Seed in PRNG", 
      "parent": "@predictability", 
      "description": "A PRNG is initialized from a predictable seed, e.g. using process ID or system time."
    }, 
    "@cwe_682_incorrect_calculation": {
      "references": [
        "CWE 682", 
        "https://cwe.mitre.org/data/definitions/682.html"
      ], 
      "name": "Incorrect Calculation", 
      "parent": "@design", 
      "description": "The software performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management. When software performs a security-critical calculation incorrectly, it might lead to incorrect resource allocations, incorrect privilege assignments, or failed comparisons among other things. Many of the direct results of an incorrect calculation can lead to even larger problems such as failed protection mechanisms or even arbitrary code execution."
    }, 
    "@cwe_532_information_exposure_through_log_files": {
      "references": [
        "CWE 532", 
        "https://cwe.mitre.org/data/definitions/532.html"
      ], 
      "name": "Information Exposure Through Log Files", 
      "parent": "@exposed_data", 
      "description": "Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information. While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers."
    }, 
    "@cwe_600_uncaught_exception_in_servlet_": {
      "references": [
        "CWE 600", 
        "https://cwe.mitre.org/data/definitions/600.html"
      ], 
      "name": "Uncaught Exception in Servlet ", 
      "parent": "@unchecked_status_condition", 
      "description": "The Servlet does not catch all exceptions, which may reveal sensitive debugging information. When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components."
    }, 
    "@cwe_571_expression_is_always_true": {
      "references": [
        "CWE 571", 
        "https://cwe.mitre.org/data/definitions/571.html"
      ], 
      "name": "Expression is Always True", 
      "parent": "@glitch_in_computation", 
      "description": "The software contains an expression that will always evaluate to true."
    }, 
    "@synchronization": {
      "refs": [
        "894"
      ], 
      "name": "Synchronization", 
      "parent": "@sfp"
    }, 
    "@cwe_37_path_traversal_absolutepathnamehere": {
      "references": [
        "CWE 37", 
        "https://cwe.mitre.org/data/definitions/37.html"
      ], 
      "name": "Path Traversal: '/absolute/pathname/here'", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts input in the form of a slash absolute path absolute pathname here without appropriate validation can allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_33_path_traversal__multiple_dot": {
      "references": [
        "CWE 33", 
        "https://cwe.mitre.org/data/definitions/33.html"
      ], 
      "name": "Path Traversal: '....' (Multiple Dot)", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize .... multiple dot sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory..The .... manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to .. .. .. and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of . sequences, can ultimately produce valid .. sequences due to a collapse into unsafe value CWE-182 ."
    }, 
    "@cwe_152_improper_neutralization_of_macro_symbols": {
      "references": [
        "CWE 152", 
        "https://cwe.mitre.org/data/definitions/152.html"
      ], 
      "name": "Improper Neutralization of Macro Symbols", 
      "parent": "@tainted_input_to_command", 
      "description": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component."
    }, 
    "@cwe_369_divide_by_zero": {
      "references": [
        "CWE 369", 
        "https://cwe.mitre.org/data/definitions/369.html"
      ], 
      "name": "Divide By Zero", 
      "parent": "@glitch_in_computation", 
      "description": "The product divides a value by zero. This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height."
    }, 
    "@cwe_460_improper_cleanup_on_thrown_exception": {
      "references": [
        "CWE 460", 
        "https://cwe.mitre.org/data/definitions/460.html"
      ], 
      "name": "Improper Cleanup on Thrown Exception", 
      "parent": "@incorrect_exception_behavior", 
      "description": "The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow. Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening."
    }, 
    "@cwe_325_missing_required_cryptographic_step": {
      "references": [
        "CWE 325", 
        "https://cwe.mitre.org/data/definitions/325.html"
      ], 
      "name": "Missing Required Cryptographic Step", 
      "parent": "@broken_cryptography", 
      "description": "The software does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by that algorithm. Cryptographic implementations should follow the algorithms that define them exactly, otherwise encryption can be weaker than expected."
    }, 
    "@cwe_591_sensitive_data_storage_in_improperly_locked_memory": {
      "references": [
        "CWE 591", 
        "https://cwe.mitre.org/data/definitions/591.html"
      ], 
      "name": "Sensitive Data Storage in Improperly Locked Memory", 
      "parent": "@exposed_data", 
      "description": "The application stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors. On Windows systems the VirtualLock function can lock a page of memory to ensure that it will remain present in memory and not be swapped to disk. However, on older versions of Windows, such as 95, 98, or Me, the VirtualLock function is only a stub and provides no protection. On POSIX systems the mlock call ensures that a page will stay resident in memory but does not guarantee that the page will not appear in the swap. Therefore, it is unsuitable for use as a protection mechanism for sensitive data. Some platforms, in particular Linux, do make the guarantee that the page will not be swapped, but this is non-standard and is not portable. Calls to mlock also require supervisor privilege. Return values for both of these calls must be checked to ensure that the lock operation was actually successful."
    }, 
    "@cwe_626_null_byte_interaction_error_poison_null_byte": {
      "references": [
        "CWE 626", 
        "https://cwe.mitre.org/data/definitions/626.html"
      ], 
      "name": "Null Byte Interaction Error (Poison Null Byte)", 
      "parent": "@tainted_input_to_command", 
      "description": "The product does not properly handle null bytes or NUL characters when passing data between different representations or components. A null byte NUL character can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected..The poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP."
    }, 
    "@cwe_419_unprotected_primary_channel": {
      "references": [
        "CWE 419", 
        "https://cwe.mitre.org/data/definitions/419.html"
      ], 
      "name": "Unprotected Primary Channel", 
      "parent": "@channel_attack", 
      "description": "The software uses a primary channel for administration or restricted functionality, but it does not properly protect the channel."
    }, 
    "@cwe_290_authentication_bypass_by_spoofing": {
      "references": [
        "CWE 290", 
        "https://cwe.mitre.org/data/definitions/290.html"
      ], 
      "name": "Authentication Bypass by Spoofing", 
      "parent": "@channel_attack", 
      "description": "This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks."
    }, 
    "@cwe_401_improper_release_of_memory_before_removing_last_reference_memory_leak": {
      "references": [
        "CWE 401", 
        "https://cwe.mitre.org/data/definitions/401.html"
      ], 
      "name": "Improper Release of Memory Before Removing Last Reference ('Memory Leak')", 
      "parent": "@failure_to_release_resource", 
      "description": "The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory. This is often triggered by improper handling of malformed data or unexpectedly interrupted sessions."
    }, 
    "@security": {
      "refs": [
        "996"
      ], 
      "name": "Security", 
      "parent": "@ui"
    }, 
    "@cwe_534_information_exposure_through_debug_log_files": {
      "references": [
        "CWE 534", 
        "https://cwe.mitre.org/data/definitions/534.html"
      ], 
      "name": "Information Exposure Through Debug Log Files", 
      "parent": "@exposed_data", 
      "description": "The application does not sufficiently restrict access to a log file that is used for debugging."
    }, 
    "@cwe_304_missing_critical_step_in_authentication": {
      "references": [
        "CWE 304", 
        "https://cwe.mitre.org/data/definitions/304.html"
      ], 
      "name": "Missing Critical Step in Authentication", 
      "parent": "@authentication_bypass", 
      "description": "The software implements an authentication technique, but it skips a step that weakens the technique. Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks."
    }, 
    "@unexpected_entry_points": {
      "refs": [
        "1002"
      ], 
      "name": "Unexpected Entry Points", 
      "parent": "@entry_points"
    }, 
    "@cwe_203_information_exposure_through_discrepancy": {
      "references": [
        "CWE 203", 
        "https://cwe.mitre.org/data/definitions/203.html"
      ], 
      "name": "Information Exposure Through Discrepancy", 
      "parent": "@state_disclosure", 
      "description": "The product behaves differently or sends different responses in a way that exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not."
    }, 
    "@cwe_344_use_of_invariant_value_in_dynamically_changing_context": {
      "references": [
        "CWE 344", 
        "https://cwe.mitre.org/data/definitions/344.html"
      ], 
      "name": "Use of Invariant Value in Dynamically Changing Context", 
      "parent": "@predictability", 
      "description": "The product uses a constant value, name, or reference, but this value can or should vary across different environments."
    }, 
    "@cwe_273_improper_check_for_dropped_privileges": {
      "references": [
        "CWE 273", 
        "https://cwe.mitre.org/data/definitions/273.html"
      ], 
      "name": "Improper Check for Dropped Privileges", 
      "parent": "@unchecked_status_condition", 
      "description": "The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded. If the drop fails, the software will continue to run with the raised privileges, which might provide additional access to unprivileged users."
    }, 
    "@cwe_493_critical_public_variable_without_final_modifier": {
      "references": [
        "CWE 493", 
        "https://cwe.mitre.org/data/definitions/493.html"
      ], 
      "name": "Critical Public Variable Without Final Modifier", 
      "parent": "@unexpected_entry_points", 
      "description": "The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values. If a field is non-final and public, it can be changed once the value is set by any function that has access to the class which contains the field. This could lead to a vulnerability if other parts of the program make assumptions about the contents of that field."
    }, 
    "@cwe_491_public_cloneable_method_without_final_object_hijack": {
      "references": [
        "CWE 491", 
        "https://cwe.mitre.org/data/definitions/491.html"
      ], 
      "name": "Public cloneable() Method Without Final ('Object Hijack')", 
      "parent": "@unexpected_entry_points", 
      "description": "A class has a cloneable method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state."
    }, 
    "@faulty_pointer_use": {
      "refs": [
        "971"
      ], 
      "name": "Faulty Pointer Use", 
      "parent": "@memory_access"
    }, 
    "@cwe_471_modification_of_assumed_immutable_data_maid": {
      "references": [
        "CWE 471", 
        "https://cwe.mitre.org/data/definitions/471.html"
      ], 
      "name": "Modification of Assumed-Immutable Data (MAID)", 
      "parent": "@tainted_input_to_environment", 
      "description": "The software does not properly protect an assumed-immutable element from being modified by an attacker. This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups."
    }, 
    "@cwe_166_improper_handling_of_missing_special_element": {
      "references": [
        "CWE 166", 
        "https://cwe.mitre.org/data/definitions/166.html"
      ], 
      "name": "Improper Handling of Missing Special Element", 
      "parent": "@faulty_input_transformation", 
      "description": "The software receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing."
    }, 
    "@cwe_499_serializable_class_containing_sensitive_data": {
      "references": [
        "CWE 499", 
        "https://cwe.mitre.org/data/definitions/499.html"
      ], 
      "name": "Serializable Class Containing Sensitive Data", 
      "parent": "@exposed_data", 
      "description": "The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class. Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it."
    }, 
    "@cwe_764_multiple_locks_of_a_critical_resource": {
      "references": [
        "CWE 764", 
        "https://cwe.mitre.org/data/definitions/764.html"
      ], 
      "name": "Multiple Locks of a Critical Resource", 
      "parent": "@multiple_locksunlocks", 
      "description": "The software locks a critical resource more times than intended, leading to an unexpected state in the system. When software is operating in a concurrent environment and repeatedly locks a critical resource, the consequences will vary based on the type of lock, the lock s implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra locking calls will reduce the size of the total available pool, possibly leading to degraded performance or a denial of service. If this can be triggered by an attacker, it will be similar to an unrestricted lock CWE-412 . In the context of a binary lock, it is likely that any duplicate locking attempts will never succeed since the lock is already held and progress may not be possible."
    }, 
    "@cwe_698_execution_after_redirect_ear": {
      "references": [
        "CWE 698", 
        "https://cwe.mitre.org/data/definitions/698.html"
      ], 
      "name": "Execution After Redirect (EAR)", 
      "parent": "@design", 
      "description": "The web application sends a redirect to another location, but instead of exiting, it executes additional code."
    }, 
    "@cwe_421_race_condition_during_access_to_alternate_channel": {
      "references": [
        "CWE 421", 
        "https://cwe.mitre.org/data/definitions/421.html"
      ], 
      "name": "Race Condition During Access to Alternate Channel", 
      "parent": "@channel_attack", 
      "description": "The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors. This creates a race condition that allows an attacker to access the channel before the authorized user does."
    }, 
    "@cwe_159_failure_to_sanitize_special_element": {
      "references": [
        "CWE 159", 
        "https://cwe.mitre.org/data/definitions/159.html"
      ], 
      "name": "Failure to Sanitize Special Element", 
      "parent": "@tainted_input_to_command", 
      "description": "Weaknesses in this attack-focused category do not properly filter and interpret special elements in user-controlled input which could cause adverse effect on the software behavior and integrity."
    }, 
    "@cwe_123_write_what_where_condition": {
      "references": [
        "CWE 123", 
        "https://cwe.mitre.org/data/definitions/123.html"
      ], 
      "name": "Write-what-where Condition", 
      "parent": "@faulty_buffer_access", 
      "description": "Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow."
    }, 
    "@cwe_193_off_by_one_error": {
      "references": [
        "CWE 193", 
        "https://cwe.mitre.org/data/definitions/193.html"
      ], 
      "name": "Off-by-one Error", 
      "parent": "@design", 
      "description": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value."
    }, 
    "@cwe_5_j2ee_misconfiguration_data_transmission_without_encryption": {
      "references": [
        "CWE 5", 
        "https://cwe.mitre.org/data/definitions/5.html"
      ], 
      "name": "J2EE Misconfiguration: Data Transmission Without Encryption", 
      "parent": "@exposed_data", 
      "description": "Information sent over a network can be compromised while in transit. An attacker may be able to read modify the contents if the data are sent in plaintext or are weakly encrypted."
    }, 
    "@cwe_319_cleartext_transmission_of_sensitive_information": {
      "references": [
        "CWE 319", 
        "https://cwe.mitre.org/data/definitions/319.html"
      ], 
      "name": "Cleartext Transmission of Sensitive Information", 
      "parent": "@exposed_data", 
      "description": "The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors. Many communication channels can be sniffed by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers."
    }, 
    "@cwe_55_path_equivalence__single_dot_directory": {
      "references": [
        "CWE 55", 
        "https://cwe.mitre.org/data/definitions/55.html"
      ], 
      "name": "Path Equivalence: '/./' (Single Dot Directory)", 
      "parent": "@path_traversal", 
      "description": "A software system that accepts path input in the form of single dot directory exploit . without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
    }, 
    "@cwe_448_obsolete_feature_in_ui": {
      "references": [
        "CWE 448", 
        "https://cwe.mitre.org/data/definitions/448.html"
      ], 
      "name": "Obsolete Feature in UI", 
      "parent": "@feature", 
      "description": "A UI function is obsolete and the product does not warn the user."
    }, 
    "@cwe_328_reversible_one_way_hash": {
      "references": [
        "CWE 328", 
        "https://cwe.mitre.org/data/definitions/328.html"
      ], 
      "name": "Reversible One-Way Hash", 
      "parent": "@broken_cryptography", 
      "description": "The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques. This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication."
    }, 
    "@cwe_587_assignment_of_a_fixed_address_to_a_pointer": {
      "references": [
        "CWE 587", 
        "https://cwe.mitre.org/data/definitions/587.html"
      ], 
      "name": "Assignment of a Fixed Address to a Pointer", 
      "parent": "@glitch_in_computation", 
      "description": "The software sets a pointer to a specific address other than NULL or 0. Using a fixed address is not portable because that address will probably not be valid in all environments or platforms."
    }, 
    "@cwe_645_overly_restrictive_account_lockout_mechanism": {
      "references": [
        "CWE 645", 
        "https://cwe.mitre.org/data/definitions/645.html"
      ], 
      "name": "Overly Restrictive Account Lockout Mechanism", 
      "parent": "@insecure_authentication_policy", 
      "description": "The software contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily. This allows attackers to deny service to legitimate users by causing their accounts to be locked out. Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive."
    }, 
    "@cwe_120_buffer_copy_without_checking_size_of_input_classic_buffer_overflow": {
      "references": [
        "CWE 120", 
        "https://cwe.mitre.org/data/definitions/120.html"
      ], 
      "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')", 
      "parent": "@faulty_buffer_access", 
      "description": "The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow. A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the classic case in which the program copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections."
    }, 
    "@cwe_246_j2ee_bad_practices_direct_use_of_sockets": {
      "references": [
        "CWE 246", 
        "https://cwe.mitre.org/data/definitions/246.html"
      ], 
      "name": "J2EE Bad Practices: Direct Use of Sockets", 
      "parent": "@use_of_an_improper_api", 
      "description": "The J2EE application directly uses sockets instead of using framework method calls. The J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues..Without significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems. Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers."
    }, 
    "@cwe_437_incomplete_model_of_endpoint_features": {
      "references": [
        "CWE 437", 
        "https://cwe.mitre.org/data/definitions/437.html"
      ], 
      "name": "Incomplete Model of Endpoint Features", 
      "parent": "@protocol_error", 
      "description": "A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint s features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model."
    }, 
    "@cwe_67_improper_handling_of_windows_device_names": {
      "references": [
        "CWE 67", 
        "https://cwe.mitre.org/data/definitions/67.html"
      ], 
      "name": "Improper Handling of Windows Device Names", 
      "parent": "@path_traversal", 
      "description": "The software constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file. Not properly handling virtual filenames e.g. AUX, CON, PRN, COM1, LPT1 can result in different types of vulnerabilities. In some cases an attacker can request a device via injection of a virtual filename in a URL, which may cause an error that leads to a denial of service or an error page that reveals sensitive information. A software system that allows device names to bypass filtering runs the risk of an attacker injecting malicious code in a file with the name of a device."
    }, 
    "@cwe_775_missing_release_of_file_descriptor_or_handle_after_effective_lifetime": {
      "references": [
        "CWE 775", 
        "https://cwe.mitre.org/data/definitions/775.html"
      ], 
      "name": "Missing Release of File Descriptor or Handle after Effective Lifetime", 
      "parent": "@failure_to_release_resource", 
      "description": "The software does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor handle is no longer needed. When a file descriptor or handle is not released after use typically by explicitly closing it , attackers can cause a denial of service by consuming all available file descriptors handles, or otherwise preventing other system processes from obtaining their own file descriptors handles."
    }, 
    "@cwe_84_improper_neutralization_of_encoded_uri_schemes_in_a_web_page": {
      "references": [
        "CWE 84", 
        "https://cwe.mitre.org/data/definitions/84.html"
      ], 
      "name": "Improper Neutralization of Encoded URI Schemes in a Web Page", 
      "parent": "@tainted_input_to_command", 
      "description": "The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings."
    }, 
    "@cwe_85_doubled_character_xss_manipulations": {
      "references": [
        "CWE 85", 
        "https://cwe.mitre.org/data/definitions/85.html"
      ], 
      "name": "Doubled Character XSS Manipulations", 
      "parent": "@tainted_input_to_command", 
      "description": "The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters."
    }, 
    "@cwe_220_sensitive_data_under_ftp_root": {
      "references": [
        "CWE 220", 
        "https://cwe.mitre.org/data/definitions/220.html"
      ], 
      "name": "Sensitive Data Under FTP Root", 
      "parent": "@exposed_data", 
      "description": "The application stores sensitive data under the FTP document root with insufficient access control, which might make it accessible to untrusted parties."
    }, 
    "@cwe_8_j2ee_misconfiguration_entity_bean_declared_remote": {
      "references": [
        "CWE 8", 
        "https://cwe.mitre.org/data/definitions/8.html"
      ], 
      "name": "J2EE Misconfiguration: Entity Bean Declared Remote", 
      "parent": "@exposed_data", 
      "description": "When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean s data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application s expectations, potentially leading to other vulnerabilities."
    }, 
    "@cwe_91_xml_injection_aka_blind_xpath_injection": {
      "references": [
        "CWE 91", 
        "https://cwe.mitre.org/data/definitions/91.html"
      ], 
      "name": "XML Injection (aka Blind XPath Injection)", 
      "parent": "@tainted_input_to_command", 
      "description": "The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system. Within XML, special elements could include reserved words or characters such as , , , and , which could then be used to add new data or modify XML syntax."
    }, 
    "@cwe_451_user_interface_ui_misrepresentation_of_critical_information": {
      "references": [
        "CWE 451", 
        "https://cwe.mitre.org/data/definitions/451.html"
      ], 
      "name": "User Interface (UI) Misrepresentation of Critical Information", 
      "parent": "@feature", 
      "description": "The user interface UI does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks. If an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event..UI misrepresentation can take many forms:"
    }, 
    "@cwe_186_overly_restrictive_regular_expression": {
      "references": [
        "CWE 186", 
        "https://cwe.mitre.org/data/definitions/186.html"
      ], 
      "name": "Overly Restrictive Regular Expression", 
      "parent": "@tainted_input_to_command", 
      "description": "A regular expression is overly restrictive, which prevents dangerous values from being detected."
    }, 
    "@cwe_87_improper_neutralization_of_alternate_xss_syntax": {
      "references": [
        "CWE 87", 
        "https://cwe.mitre.org/data/definitions/87.html"
      ], 
      "name": "Improper Neutralization of Alternate XSS Syntax", 
      "parent": "@tainted_input_to_command", 
      "description": "The software does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax."
    }, 
    "@cwe_183_permissive_whitelist": {
      "references": [
        "CWE 183", 
        "https://cwe.mitre.org/data/definitions/183.html"
      ], 
      "name": "Permissive Whitelist", 
      "parent": "@tainted_input_to_command", 
      "description": "An application uses a whitelist of acceptable values, but the whitelist includes at least one unsafe value, leading to resultant weaknesses."
    }, 
    "@tainted_input_to_variable": {
      "refs": [
        "994"
      ], 
      "name": "Tainted Input to Variable", 
      "parent": "@tainted_input"
    }, 
    "@cwe_174_double_decoding_of_the_same_data": {
      "references": [
        "CWE 174", 
        "https://cwe.mitre.org/data/definitions/174.html"
      ], 
      "name": "Double Decoding of the Same Data", 
      "parent": "@faulty_input_transformation", 
      "description": "The software decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations."
    }, 
    "@cwe_512_spyware": {
      "references": [
        "CWE 512", 
        "https://cwe.mitre.org/data/definitions/512.html"
      ], 
      "name": "Spyware", 
      "parent": "@malware", 
      "description": "The software collects personally identifiable information about a human user or the user s activities, but the software accesses this information using other resources besides itself, and it does not require that user s explicit approval or direct input into the software.  Spyware is a commonly used term with many definitions and interpretations. In general, it is meant to software that collects information or installs functionality that human users might not allow if they were fully aware of the actions being taken by the software. For example, a user might expect that tax software would collect a social security number and include it when filing a tax return, but that same user would not expect gaming software to obtain the social security number from that tax software s data."
    }, 
    "@cwe_398_indicator_of_poor_code_quality": {
      "references": [
        "CWE 398", 
        "https://cwe.mitre.org/data/definitions/398.html"
      ], 
      "name": "Indicator of Poor Code Quality", 
      "parent": "@implementation", 
      "description": "The code has features that do not directly introduce a weakness or vulnerability, but indicate that the product has not been carefully developed or maintained. Programs are more likely to be secure when good development practices are followed. If a program is complex, difficult to maintain, not portable, or shows evidence of neglect, then there is a higher likelihood that weaknesses are buried in the code."
    }, 
    "@cwe_119_improper_restriction_of_operations_within_the_bounds_of_a_memory_buffer": {
      "references": [
        "CWE 119", 
        "https://cwe.mitre.org/data/definitions/119.html"
      ], 
      "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer", 
      "parent": "@faulty_buffer_access", 
      "description": "The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer. Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data..As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash."
    }, 
    "@cwe_552_files_or_directories_accessible_to_external_parties": {
      "references": [
        "CWE 552", 
        "https://cwe.mitre.org/data/definitions/552.html"
      ], 
      "name": "Files or Directories Accessible to External Parties", 
      "parent": "@exposed_data", 
      "description": "Files or directories are accessible in the environment that should not be."
    }, 
    "@cwe_35_path_traversal_": {
      "references": [
        "CWE 35", 
        "https://cwe.mitre.org/data/definitions/35.html"
      ], 
      "name": "Path Traversal: '.../...//'", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ... ... doubled triple dot slash sequences that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory..The ... ... manipulation is useful for bypassing some path traversal protection schemes. If .. is filtered in a sequential fashion, as done by some regular expression engines, then ... ... can collapse into the .. unsafe value CWE-182 . Removing the first .. yields .... ; the second removal yields .. . Depending on the algorithm, the software could be susceptible to CWE-34 but not CWE-35, or vice versa."
    }, 
    "@path_traversal": {
      "refs": [
        "981"
      ], 
      "name": "Path Traversal", 
      "parent": "@path_resolution"
    }, 
    "@cwe_222_truncation_of_security_relevant_information": {
      "references": [
        "CWE 222", 
        "https://cwe.mitre.org/data/definitions/222.html"
      ], 
      "name": "Truncation of Security-relevant Information", 
      "parent": "@information_loss", 
      "description": "The application truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack."
    }, 
    "@cwe_206_information_exposure_of_internal_state_through_behavioral_inconsistency": {
      "references": [
        "CWE 206", 
        "https://cwe.mitre.org/data/definitions/206.html"
      ], 
      "name": "Information Exposure of Internal State Through Behavioral Inconsistency", 
      "parent": "@state_disclosure", 
      "description": "Two separate operations in a product cause the product to behave differently in a way that is observable to an attacker and reveals security-relevant information about the internal state of the product, such as whether a particular operation was successful or not."
    }, 
    "@cwe_507_trojan_horse": {
      "references": [
        "CWE 507", 
        "https://cwe.mitre.org/data/definitions/507.html"
      ], 
      "name": "Trojan Horse", 
      "parent": "@malware", 
      "description": "The software appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator."
    }, 
    "@cwe_239_failure_to_handle_incomplete_element": {
      "references": [
        "CWE 239", 
        "https://cwe.mitre.org/data/definitions/239.html"
      ], 
      "name": "Failure to Handle Incomplete Element", 
      "parent": "@incorrect_input_handling", 
      "description": "The software does not properly handle when a particular element is not completely specified."
    }, 
    "@cwe_209_information_exposure_through_an_error_message": {
      "references": [
        "CWE 209", 
        "https://cwe.mitre.org/data/definitions/209.html"
      ], 
      "name": "Information Exposure Through an Error Message", 
      "parent": "@exposed_data", 
      "description": "The software generates an error message that includes sensitive information about its environment, users, or associated data. The sensitive information may be valuable information on its own such as a password , or it may be useful for launching other, more deadly attacks. If an attack fails, an attacker may use error information provided by the server to launch another more focused attack. For example, an attempt to exploit a path traversal weakness CWE-22 might yield the full pathname of the installed application. In turn, this could be used to select the proper number of .. sequences to navigate to the targeted file. An attack using SQL injection CWE-89 might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query."
    }, 
    "@cwe_327_use_of_a_broken_or_risky_cryptographic_algorithm": {
      "references": [
        "CWE 327", 
        "https://cwe.mitre.org/data/definitions/327.html"
      ], 
      "name": "Use of a Broken or Risky Cryptographic Algorithm", 
      "parent": "@broken_cryptography", 
      "description": "The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information. The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm."
    }, 
    "@cwe_149_improper_neutralization_of_quoting_syntax": {
      "references": [
        "CWE 149", 
        "https://cwe.mitre.org/data/definitions/149.html"
      ], 
      "name": "Improper Neutralization of Quoting Syntax", 
      "parent": "@tainted_input_to_command", 
      "description": "Quotes injected into an application can be used to compromise a system. As data are parsed, an injected absent duplicate malformed use of quotes may cause the process to take unexpected actions."
    }, 
    "@cwe_106_struts_plug_in_framework_not_in_use": {
      "references": [
        "CWE 106", 
        "https://cwe.mitre.org/data/definitions/106.html"
      ], 
      "name": "Struts: Plug-in Framework not in Use", 
      "parent": "@tainted_input_to_command", 
      "description": "When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation. Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others..Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack."
    }, 
    "@api": {
      "refs": [
        "887"
      ], 
      "name": "API", 
      "parent": "@sfp"
    }, 
    "@design": {
      "refs": [
        "977"
      ], 
      "name": "Design", 
      "parent": "@other"
    }, 
    "@cwe_538_file_and_directory_information_exposure": {
      "references": [
        "CWE 538", 
        "https://cwe.mitre.org/data/definitions/538.html"
      ], 
      "name": "File and Directory Information Exposure", 
      "parent": "@exposed_data", 
      "description": "The product stores sensitive information in files or directories that are accessible to actors outside of the intended control sphere."
    }, 
    "@cwe_36_absolute_path_traversal": {
      "references": [
        "CWE 36", 
        "https://cwe.mitre.org/data/definitions/36.html"
      ], 
      "name": "Absolute Path Traversal", 
      "parent": "@path_traversal", 
      "description": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as abs path that can resolve to a location that is outside of that directory. This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory."
    }, 
    "@cwe_603_use_of_client_side_authentication": {
      "references": [
        "CWE 603", 
        "https://cwe.mitre.org/data/definitions/603.html"
      ], 
      "name": "Use of Client-Side Authentication", 
      "parent": "@authentication_bypass", 
      "description": "A client server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check. Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected."
    }, 
    "@cwe_412_unrestricted_externally_accessible_lock": {
      "references": [
        "CWE 412", 
        "https://cwe.mitre.org/data/definitions/412.html"
      ], 
      "name": "Unrestricted Externally Accessible Lock", 
      "parent": "@unrestricted_lock", 
      "description": "The software properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control. This prevents the software from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent."
    }, 
    "@cwe_439_behavioral_change_in_new_version_or_environment": {
      "references": [
        "CWE 439", 
        "https://cwe.mitre.org/data/definitions/439.html"
      ], 
      "name": "Behavioral Change in New Version or Environment", 
      "parent": "@use_of_an_improper_api", 
      "description": "A s behavior or functionality changes with a new version of A, or a new environment, which is not known or manageable by B."
    }, 
    "@cwe_628_function_call_with_incorrectly_specified_arguments": {
      "references": [
        "CWE 628", 
        "https://cwe.mitre.org/data/definitions/628.html"
      ], 
      "name": "Function Call with Incorrectly Specified Arguments", 
      "parent": "@glitch_in_computation", 
      "description": "The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses. There are multiple ways in which this weakness can be introduced, including:"
    }, 
    "@cwe_283_unverified_ownership": {
      "references": [
        "CWE 283", 
        "https://cwe.mitre.org/data/definitions/283.html"
      ], 
      "name": "Unverified Ownership", 
      "parent": "@access_management", 
      "description": "The software does not properly verify that a critical resource is owned by the proper entity."
    }, 
    "@cwe_669_incorrect_resource_transfer_between_spheres": {
      "references": [
        "CWE 669", 
        "https://cwe.mitre.org/data/definitions/669.html"
      ], 
      "name": "Incorrect Resource Transfer Between Spheres", 
      "parent": "@exposed_data", 
      "description": "The product does not properly transfer a resource behavior to another sphere, or improperly imports a resource behavior from another sphere, in a manner that provides unintended control over that resource."
    }, 
    "@life_cycle": {
      "refs": [
        "984"
      ], 
      "name": "Life Cycle", 
      "parent": "@resource_management"
    }, 
    "@cwe_664_improper_control_of_a_resource_through_its_lifetime": {
      "references": [
        "CWE 664", 
        "https://cwe.mitre.org/data/definitions/664.html"
      ], 
      "name": "Improper Control of a Resource Through its Lifetime", 
      "parent": "@life_cycle", 
      "description": "The software does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release. Resources often have explicit instructions on how to be created, used and destroyed. When software does not follow these instructions, it can lead to unexpected behaviors and potentially exploitable states..Even without explicit instructions, various principles are expected to be adhered to, such as Do not use an object until after its creation is complete, or do not use an object after it has been slated for destruction. "
    }, 
    "@cwe_625_permissive_regular_expression": {
      "references": [
        "CWE 625", 
        "https://cwe.mitre.org/data/definitions/625.html"
      ], 
      "name": "Permissive Regular Expression", 
      "parent": "@tainted_input_to_command", 
      "description": "The product uses a regular expression that does not sufficiently restrict the set of allowed values. This effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include:"
    }, 
    "@cwe_190_integer_overflow_or_wraparound": {
      "references": [
        "CWE 190", 
        "https://cwe.mitre.org/data/definitions/190.html"
      ], 
      "name": "Integer Overflow or Wraparound", 
      "parent": "@glitch_in_computation", 
      "description": "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control. An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc."
    }, 
    "@faulty_memory_release": {
      "refs": [
        "969"
      ], 
      "name": "Faulty Memory Release", 
      "parent": "@memory_management"
    }, 
    "@cwe_330_use_of_insufficiently_random_values": {
      "references": [
        "CWE 330", 
        "https://cwe.mitre.org/data/definitions/330.html"
      ], 
      "name": "Use of Insufficiently Random Values", 
      "parent": "@predictability", 
      "description": "The software may use insufficiently random numbers or values in a security context that depends on unpredictable numbers. When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information."
    }, 
    "@cwe_201_information_exposure_through_sent_data": {
      "references": [
        "CWE 201", 
        "https://cwe.mitre.org/data/definitions/201.html"
      ], 
      "name": "Information Exposure Through Sent Data", 
      "parent": "@exposed_data", 
      "description": "The accidental exposure of sensitive information through sent data refers to the transmission of data which are either sensitive in and of itself or useful in the further exploitation of the system through standard data channels."
    }, 
    "@cwe_588_attempt_to_access_child_of_a_non_structure_pointer": {
      "references": [
        "CWE 588", 
        "https://cwe.mitre.org/data/definitions/588.html"
      ], 
      "name": "Attempt to Access Child of a Non-structure Pointer", 
      "parent": "@faulty_pointer_use", 
      "description": "Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption."
    }, 
    "@cwe_271_privilege_dropping__lowering_errors": {
      "references": [
        "CWE 271", 
        "https://cwe.mitre.org/data/definitions/271.html"
      ], 
      "name": "Privilege Dropping / Lowering Errors", 
      "parent": "@privilege", 
      "description": "The software does not drop privileges before passing control of a resource to an actor that does not have those privileges. In some contexts, a system executing with elevated permissions will hand off a process file etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker."
    }, 
    "@cwe_391_unchecked_error_condition": {
      "references": [
        "CWE 391", 
        "https://cwe.mitre.org/data/definitions/391.html"
      ], 
      "name": "Unchecked Error Condition", 
      "parent": "@unchecked_status_condition", 
      "description": "Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
    }, 
    "@cwe_356_product_ui_does_not_warn_user_of_unsafe_actions": {
      "references": [
        "CWE 356", 
        "https://cwe.mitre.org/data/definitions/356.html"
      ], 
      "name": "Product UI does not Warn User of Unsafe Actions", 
      "parent": "@security", 
      "description": "The software s user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system. Software systems should warn users that a potentially dangerous action may occur if the user proceeds. For example, if the user downloads a file from an unknown source and attempts to execute the file on their machine, then the application s GUI can indicate that the file is unsafe."
    }
  }
}